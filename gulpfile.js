//noinspection JSUnresolvedVariable
/**
 * Date: 3/8/15 11:56 AM
 *
 * ----
 *
 * (c) Okanjo Partners Inc
 * https://okanjo.com
 * support@okanjo.com
 *
 * https://github.com/okanjo/okanjo-js
 *
 * ----
 *
 * TL;DR? see: http://www.tldrlegal.com/license/mit-license
 *
 * The MIT License (MIT)
 * Copyright (c) 2013 Okanjo Partners Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

"use strict";

const { src, dest, watch, series } = require('gulp');
const Path = require('path');
const FS = require('fs');
const Del = require('del');
const AWSPublish = require('gulp-awspublish');
const Babel = require('gulp-babel');
const Concat = require('gulp-concat');
const FileInclude = require('gulp-file-include');
const Insert = require('gulp-insert');
const Less = require('gulp-less');
const HtmlMinify = require('html-minifier');
const CleanCSS = require('clean-css');
const Notify = require('gulp-notify');
const Rename = require('gulp-rename');
const Replace = require('gulp-replace');
const Size = require('gulp-size');
const SourceMaps = require('gulp-sourcemaps');
const Uglify = require('gulp-uglify');
const UMD = require('gulp-umd');
const Wrap = require('gulp-wrap');
const JSEscapeString = require('js-string-escape');
const LessPluginAutoPrefix = require('less-plugin-autoprefix');

// Auto add vendor prefixes in CSS
const autoprefix = new LessPluginAutoPrefix({ browsers: ["> 5%"] });

const uglifyOptions = {
    output: {
        comments: /^!/
    }
};

const babelOptions = {
    presets: ['@babel/preset-env']
};

const cleanCssOptions = {
    compatibility: 'ie9',
    // units: { point: true }
    level: 2
};

const htmlMinifyOptions = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: false,
    useShortDoctype: true,
    collapseWhitespace: true
};

//region Sources

// Global Okanjo sources, dependencies and polyfills
const sources = [

    'lib/polyfill/*.js',

    'src/Okanjo.js',
    'src/Request.js',
    'src/Cookie.js',

    'src/TemplateEngine.js',
    'src/Modal.js',

    'src/Metrics.js',
    'src/AutoPageView.js',

    'src/EventEmitter.js',
    'src/Widget.js',
    'src/Placement.js',
    'src/Product.js',
    'src/Ad.js',

    // External  dependencies & polyfills
    'build/vendor.js',
];

const metricsOnlyBuildFiles = [

    'lib/polyfill/*.js',

    'src/Okanjo.js',
    'src/Request.js',
    'src/Cookie.js',

    'src/Metrics.js',

    // External  dependencies & polyfills
    'build/vendor-metrics.js',
];

// Things that normally expose themselves to the root context, but shouldn't because we need them to not conflict
const vendorSources = [
    // 'node_modules/qwery/qwery.js',
    // 'lib/polyfill/*.js',
    'node_modules/mustache/mustache.js' //,
    //'build/modal.js'
];

// const metricsOnlyVendorFiles = [
//     // 'node_modules/qwery/qwery.js',
//     // 'lib/polyfill/domready.js'
// ];

const bundleSources = [
    'dist/okanjo.js',
    'dist/okanjo-templates.js'
];

const deployFiles = [
    'dist/okanjo.js',
    'dist/okanjo.min.js',
    'dist/okanjo.min.js.map',

    'dist/okanjo-bundle.js',
    'dist/okanjo-bundle.min.js',
    'dist/okanjo-bundle.min.js.map',

    'dist/okanjo-templates.js',
    'dist/okanjo-templates.min.js',
    'dist/okanjo-templates.min.js.map',

    'dist/okanjo-metrics.js',
    'dist/okanjo-metrics.min.js',
    'dist/okanjo-metrics.min.js.map'

];

//endregion

//region Helpers

// Module info
function getPackageJson() {
    return JSON.parse(FS.readFileSync(Path.join(__dirname, 'package.json'), 'utf8'));
}

// Header
function getHeader(name) {
    const metadata = getPackageJson();
    return '/*! ' + (name || metadata.name) + ' v' + metadata.version + ' | (c) 2013 Okanjo Partners Inc | ' + metadata.homepage + ' */\n';
}

//endregion

//region Metrics Build

async function vendor_metrics() {
    // sources are empty so do nothing
    // return src(metricsOnlyVendorFiles)
    //     .pipe(Concat('vendor-metrics.js'))
    //     .pipe(Wrap({ src: 'lib/vendor.js.tpl' }))
    //     .pipe(dest('build'))
    // ;
}

const min_metrics = series(
    vendor_metrics,
    function build_metrics() {
        let s1 = Size();
        let s2 = Size();
        const packageJson = getPackageJson();

        //noinspection JSUnusedGlobalSymbols
        return src(metricsOnlyBuildFiles, { allowEmpty: true })
            .pipe(SourceMaps.init())
            .pipe(Replace(/%%OKANJO_VERSION/, packageJson.version))
            .pipe(Replace(/"use strict";\s*/, ''))
            .pipe(Concat('okanjo-metrics.js'))
            .pipe(Babel(babelOptions))
            .pipe(UMD({
                exports: function() {
                    return 'okanjo';
                },
                namespace: function() {
                    return 'okanjo';
                }
            }))
            .pipe(s1)
            .pipe(Insert.prepend(getHeader('okanjo-metrics.js')))
            .pipe(dest('dist'))
            .pipe(Uglify(uglifyOptions))
            .pipe(Rename('okanjo-metrics.min.js'))
            .pipe(s2)
            .pipe(SourceMaps.write('../dist', { sourceRoot: './' }))
            .pipe(dest('dist'))
            .pipe(Notify({
                onLast: true,
                message: function () {
                    //noinspection JSUnresolvedVariable
                    return 'Okanjo-Metrics.js â€“ size: ' + s1.prettySize + ', minified: ' + s2.prettySize;
                }
            }))
        ;
    }
);

const fix_maps_metrics = series(
    min_metrics,
    function fix_maps_metrics_work() {
        return src('dist/okanjo-metrics.min.js')
            .pipe(Replace(/sourceMappingURL=\.\.\/dist\//, 'sourceMappingURL='))
            .pipe(dest('dist'))
        ;
    }
)

//endregion

//region Templates Build

function min_mustache_templates() {
    return src('templates/*.mustache')
        // .pipe(MinifyHTML({
        //     conditionals: true,
        //     spare:true,
        //     cdata:true,
        //     empty:true,
        //     loose:false
        // }))
        .on('data', function(file) {
            const bufferFile = Buffer.from(HtmlMinify.minify(file.contents.toString(), htmlMinifyOptions))
            return file.contents = bufferFile;
        })
        .pipe(dest('./build/templates/'))
        ;
}

function min_css_templates() {
    return src('templates/*.less')
        .pipe(Less({
            plugins: [autoprefix],
            paths: [ Path.join(__dirname, 'templates' ) ]
        }))
        .pipe(dest('./build/templates/unminified'))
        .on('data', function(file) {
            const payload = (new CleanCSS(cleanCssOptions)).minify(file.contents.toString());
            const bufferFile = Buffer.from(payload.styles);
            return file.contents = bufferFile;
        })
        // .pipe(MinifyCSS({ compatibility: 'ie8,-units.pt' }))
        .pipe(dest('./build/templates/'))
    ;
}

const join_templates = series(
    min_mustache_templates,
    min_css_templates,
    function join_templates_main() {
        return src("templates/*.js")
            .pipe(FileInclude({
                filters: {
                    jsStringEscape: JSEscapeString
                },
                basepath: 'build/templates/'
            }))
            .pipe(Replace(/"use strict";\s*/m, ''))
            .pipe(dest('build/templates'))
        ;
    }
)

const templatejs = series(
    join_templates,
    function templatejs_main() {
        return src("build/templates/*.js")
            .pipe(SourceMaps.init())
            .pipe(Concat('okanjo-templates.js'))
            .pipe(Babel(babelOptions))
            .pipe(Replace(/"use strict";\s*/m, ''))
            .pipe(Wrap('(function(okanjo) {<%= contents %>})(okanjo);'))
            .pipe(Insert.prepend(getHeader()))
            .pipe(dest('dist'))
            .pipe(Uglify(uglifyOptions))
            .pipe(Rename('okanjo-templates.min.js'))
            .pipe(SourceMaps.write('../dist', { sourceRoot: './' }))
            .pipe(dest('dist'))
        ;
    }
);


//endregion

//region Okanjo Build

function vendor() {
    return src(vendorSources)
        .pipe(Concat('vendor.js'))
        .pipe(Wrap({ src: 'lib/vendor.js.tpl' }))
        .pipe(dest('build'))
    ;
}

const min = series(
    vendor,
    function min_build() {
        let s1 = Size();
        let s2 = Size();
        const packageJson = getPackageJson();

        //noinspection JSUnusedGlobalSymbols
        return src(sources)
            .pipe(SourceMaps.init())
            .pipe(Replace(/%%OKANJO_VERSION/, packageJson.version))
            .pipe(Replace(/"use strict";\s*/, ''))
            .pipe(Concat('okanjo.js'))
            .pipe(Babel(babelOptions))
            .pipe(Replace(/"use strict";\s*/, ''))
            .pipe(UMD({
                exports: function() {
                    return 'okanjo';
                },
                namespace: function() {
                    return 'okanjo';
                }
            }))
            .pipe(s1)
            .pipe(Insert.prepend(getHeader()))
            .pipe(dest('dist'))
            .pipe(Uglify(uglifyOptions))
            .pipe(Rename('okanjo.min.js'))
            .pipe(s2)
            .pipe(SourceMaps.write('../dist', { sourceRoot: './' }))
            .pipe(dest('dist'))
            .pipe(Notify({
                onLast: true,
                message: function () {
                    //noinspection JSUnresolvedVariable
                    return 'Okanjo.js â€“ size: ' + s1.prettySize + ', minified: ' + s2.prettySize;
                }
            }))
        ;
    }
)

const bundle = series(
    min,
    templatejs,
    function bundle_main() {
        let s1 = Size();
        let s2 = Size();
        return src(bundleSources)
            .pipe(Concat('okanjo-bundle.js'))
            .pipe(s1)
            .pipe(dest('dist'))
            .pipe(Uglify(uglifyOptions))
            // .pipe(Insert.prepend(getHeader()))
            .pipe(SourceMaps.init())
            .pipe(Rename('okanjo-bundle.min.js'))
            .pipe(s2)
            .pipe(SourceMaps.write('../dist', { sourceRoot: './' }))
            .pipe(dest('dist'))
            .pipe(Notify({
                onLast: true,
                message: function () {
                    //noinspection JSUnresolvedVariable
                    return 'Okanjo-Bundle.js â€“ size: ' + s1.prettySize + ', minified: ' + s2.prettySize;
                }
            }))
        ;
    }
)

const fix_maps = series(
    bundle,
    function fix_maps_main() {
        return src('dist/*.min.js')
            .pipe(Replace(/sourceMappingURL=\.\.\/dist\//, 'sourceMappingURL='))
            .pipe(dest('dist'))
        ;
    }
)

//endregion

//region Deployments

function deploy_s3_latest() {
    const publisher = AWSPublish.create(require('./aws-credentials.json'));
    return src(deployFiles)
        .pipe(Rename(function(path) {
            path.dirname += '/js/latest';
        }))
        .pipe(publisher.publish({
            'Cache-Control': 'max-age=60, no-transform, public',
            'Content-Type': 'application/javascript; charset=utf-8'
        }, { force: true }))
        .pipe(AWSPublish.reporter())
    ;
}

function deploy_s3_latest_gz() {
    const publisher = AWSPublish.create(require('./aws-credentials.json'));
    return src(deployFiles)
        .pipe(Rename(function(path) {
            path.dirname += '/js/latest';
        }))
        .pipe(AWSPublish.gzip({ ext: '.gz' }))
        .pipe(publisher.publish({
            'Cache-Control': 'max-age=60, no-transform, public',
            'Content-Type': 'application/javascript; charset=utf-8'
        }, { force: true }))
        .pipe(AWSPublish.reporter())
}

function deploy_s3_version() {
    const publisher = AWSPublish.create(require('./aws-credentials.json'));
    return src(deployFiles)
        .pipe(Rename(function(path) {
            path.dirname += '/js/v' + require('./package.json').version;
        }))
        .pipe(publisher.publish({
            'Cache-Control': 'max-age=60, no-transform, public',
            'Content-Type': 'application/javascript; charset=utf-8'
        }, { force: true }))
        .pipe(AWSPublish.reporter())
    ;
}

function deploy_s3_version_gz() {
    const publisher = AWSPublish.create(require('./aws-credentials.json'));
    return src(deployFiles)
        .pipe(Rename(function(path) {
            path.dirname += '/js/v' + require('./package.json').version;
        }))
        .pipe(AWSPublish.gzip({ ext: '.gz' }))
        .pipe(publisher.publish({
            'Cache-Control': 'max-age=60, no-transform, public',
            'Content-Type': 'application/javascript; charset=utf-8'
        }, { force: true }))
        .pipe(AWSPublish.reporter())
    ;
}

function deploy_s3_preview() {
    const publisher = AWSPublish.create(require('./aws-credentials.json'));
    return src(deployFiles)
        .pipe(Rename(function(path) {
            path.dirname += '/js/preview';
        }))
        .pipe(publisher.publish({
            'Cache-Control': 'max-age=60, no-transform, public',
            'Content-Type': 'application/javascript; charset=utf-8'
        }, { force: true }))
        .pipe(AWSPublish.reporter())
    ;
}

function deploy_s3_preview_gz() {
    const publisher = AWSPublish.create(require('./aws-credentials.json'));
    return src(deployFiles)
        .pipe(Rename(function(path) {
            path.dirname += '/js/preview';
        }))
        .pipe(AWSPublish.gzip({ ext: '.gz' }))
        .pipe(publisher.publish({
            'Cache-Control': 'max-age=60, no-transform, public',
            'Content-Type': 'application/javascript; charset=utf-8'
        }, { force: true }))
        .pipe(AWSPublish.reporter())

}

//endregion

//region Exported Handlers

function clean() {
    return Del([
        'build/**/*',
        'dist/**/*'
    ]);
}

function watch_core() {
    return watch([
        'src/**/*.js',
        'lib/*.js',
        'lib/polyfill/*.js',
        'lib/vendor.js.tpl'
    ], series(
        min,
        bundle,
        fix_maps
    ));
}

function watch_templates() {
    return watch([
        'templates/*.js',
        'templates/*.mustache',
        'templates/*.less'
    ], series(templatejs, fix_maps));
}

function watch_metrics() {
    watch(metricsOnlyBuildFiles, min_metrics);
}

const full_build = series(fix_maps, fix_maps_metrics);

const deploy_s3 = series(
    deploy_s3_latest,
    deploy_s3_version,
    deploy_s3_latest_gz,
    deploy_s3_version_gz,
    deploy_s3_preview,
    deploy_s3_preview_gz
);

const deploy_preview = series(
    deploy_s3_preview,
    deploy_s3_preview_gz
);

exports.clean = clean;
exports.watch = watch_core;
exports.watch_templates = watch_templates;
exports.watch_metrics = watch_metrics;
exports.full_build = full_build;
exports.deploy_s3 = deploy_s3;
exports.deploy_preview = deploy_preview;

exports.default = series(
    full_build,
    watch_core,
    watch_templates,
    watch_metrics
);

//endregion