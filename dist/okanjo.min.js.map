{"version":3,"sources":["okanjo.js","Okanjo.js","Request.js","Cookie.js","TemplateEngine.js","Modal.js","Metrics.js","AutoPageView.js","EventEmitter.js","Widget.js","Placement.js","Product.js","Ad.js","vendor.js"],"names":["root","factory","define","amd","exports","module","okanjo","this","_possibleConstructorReturn","self","call","ReferenceError","CSS1_COMPATIBLE","document","compatMode","superClass","TypeError","subClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","ELLIPSIFY_PATTERN","Constructor","instance","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_typeof","Symbol","iterator","obj","NOOP","window","SUPPORTS_PAGE_OFFSET","undefined","pageXOffset","AGENT","navigator","userAgent","MOBILE_PATTERN","Console","console","settings","metrics","report","_len","arguments","args","Array","_key","err","Error","messageIndex","find","arg","stack","split","shift","push","reportStack","join","filter","a","splice","error","version","warn","apply","concat","message","_len2","_key2","selector","parent","qwery","querySelector","querySelectorAll","net","endpoint","sandboxEndpoint","routes","ads","getRoute","route","params","env","request","keys","forEach","replace","util","isEmpty","test","val","trim","getPageArguments","query","eqIndex","includeHashArguments","decodeURIComponent","parts","part","indexOf","queryArgs","hashArgs","substring","location","search","hash","Math","max","mixed","out","map","deepClone","options","output","input","isArray","toISOString","childObject","childKey","ignoreArrays","arrayToCsv","flatten","shortid","clusterWorkerId","shuffled","crypto","msCrypto","require","getRandomValues","randomBytes","encode","number","loopCounter","random","dest","Uint8Array","str","done","randomByte","pow","REDUCE_TIME","seconds","counter","previousSeconds","floor","Date","getTime","ui","getScrollPosition","x","documentElement","scrollLeft","body","getElementSize","element","scrollTop","includeMargin","size","height","offsetHeight","width","offsetWidth","style","currentStyle","getComputedStyle","parseInt","marginTop","marginBottom","getPageSize","marginLeft","marginRight","html","getViewportSize","scrollWidth","clientWidth","clientHeight","scrollHeight","vh","isMobileZoom","inWidth","innerWidth","inHeight","innerHeight","getEventPosition","ex","et","event","ey","el","type","name","getElementPosition","clientX","clientY","x1","y1","x2","rect","getBoundingClientRect","y2","bottom","contains","exception","left","pos","top","y","right","e","replacedText","container","substr","parentNode","targetHeight","useTextContent","textContent","text","innerText","safety","replacer","match","span","createElement","content","setAttribute","innerHTML","appendChild","method","url","payload","callback","res","ActiveXObject","calledBack","req","timeout","ontimeout","attributes","statusCode","onreadystatechange","status","data","JSON_TEST","getResponseHeader","parse","responseText","xhr","toUpperCase","open","withCredentials","includes","setRequestHeader","post","send","get","bind","encodeURIComponent","getKey","keyPrefix","stringify","pairs","v","expireDate","setDate","set","cookieName","expireDays","getDate","expires","toUTCString","path","encodeURI","cookie","cookieValue","nameTest","decodeURI","TemplateEngine","_classCallCheck","_templates","_css","classDetects","template","beforeRender","nodeType","lib","Mustache","markup","css","head","id","styleSheet","cssText","hasOwnProperty","templateName","context","model","_this","okanjoMetricUrl","now","blockClasses","ensureCss","render","formatCurrency","decimals","decimalSeparator","s","abs","toFixed","j","thousandsSeparator","slice","engine","$modalContainer","$modalWindow","isMobile","$modalOuter","$html","$body","$modalSkin","$modalInner","$modalClose","$modalFrame","addListener","addEventListener","attachEvent","getWindowHeight","handler","setTimeout","handleReposition","t","closeModal","stopPropagation","preventDefault","removeClass","addClass","className","RegExp","openModal","IS_MOBILE","setContent","initialized","show","createElements","bindEvents","modal","hide","Metrics","sourceCh","_getStoredQueue","sourceCx","pageId","defaultChannel","Channel","external","sid","_checkUrlForReferral","queue","_createClass","Params","JSON","localStorage","delay","_this2","_saveQueueTimeout","clearTimeout","_saveQueue","_queue","object_type","metric_session","event_type","Event","correlation","urlSid","_noProcess","sourceChannel","pageArgs","channel","localSid","trackEvent","sourceContext","ch","_push","page","view","href","_processQueue","_this3","_processTimeout","items","_batchSend","_updateSid","item","_this4","events","win","metrics_batch","m","exclude","assign","Meta","ok_ver","pgid","referrer","ref","ttl","_len3","_key3","pw","w","ph","h","vp","vx1","vy1","vx2","vw","vy2","jsEvent","_len4","_key4","_len5","_key5","MetricEvent","impression","interaction","Action","click","inline_click","article","thirdparty_ad","cart","order","order_item","user","widget","product","store","cause","marketplace","placement","live","testing","store_widget","Environment","others","_this5","_data","addEventInfo","addViewportInfo","_element","addElementInfo","_len6","_key6","addEventMeta","_normalizeEvent","trackPageView","EventEmitter","_events","listener","idx","listeners","_arguments","_this6","removeListener","_EventEmitter","on","DATA_REPLACE_PATTERN","Widget","DATA_ATTRIBUTE_PATTERN","getPrototypeOf","_this7","instanceId","config","_inherits","_applyConfiguration","_setCompatibilityOptions","_ensurePlacementKey","load","_this8","normalizedKey","_default","_this9","group","origKey","getGroup","showError","setMarkup","from","attr","exec","Field","_convert","_strip","_group","converter","toLowerCase","parseFloat","strip","bool","int","float","FILTERS","_Widget","DISPLAY","string","ARTICLE_META","array","_okanjo$_Widget$Field","Placement","_metricBase","_this10","_response","no_init","init","_okanjo$_Widget","q","url_referrer","ids","store_id","organization_name","property_name","store_name","external_id","sku","external_store_id","condition","manufacturer","upc","tags","category","min_price","max_price","isbn","max_donation_percent","pools","sort_by","min_donation_percent","skip","donation_to","template_theme","template_cta_style","adx_unit_path","url_category","url_keywords","template_layout","proxy_url","expandable","default","backwards","disable_inline_buy","disable_popup","_this11","getSettings","matches","backfillPattern","backfill","article_meta","isBackfill","_this12","_setMetricBase","_fetchContent","_reportWidgetLoad","toString","_mergeResponseSettings","_updateBaseMetaFromResponse","_showContent","base","cx","wgid","declined","decl","meta","getConfig","viewport","emit","msid","sandbox","_this13","_this14","display","filters","ptseed","pten","aid","enabled","ptid","seed","msg","ContentTypes","products","articles","adx","_showADX","additionalUrlParams","ok_ch","ok_cx","u","toUrl","resource","clickId","urlParam","cid","bf","currentTarget","ok_cid","trackParam","ea","_event","additionalParams","_getClickThroughURL","_clickId","_additionalParams","contentType","defaultName","template_name","isTemplateRegistered","prefix","buttonClass","brandColor","template_cta_color","brandCSS","brandCSSId","registerCss","_this15","results","_getTemplate","DefaultTemplates","offer","index","_price_formatted","price","_index","_escaped_inline_buy_url","inline_buy_url","_image_url","image_urls","_escaped_buy_url","buy_url","getAttribute","_handleResourceMouseDown","ellipsify","_handleProductClick","showNativeBuyUx","showPopupNativeBuyUx","popup","_popupFrame","vspace","allowfullscreen","frame","class","hspace","webkitallowfullscreen","mozallowfullscreen","scrolling","frame_height","src","ad_size","_this16","_handleArticleClick","_this17","Sizes","adUnitPath","renderContext","frameborder","ta_w","ta_h","ta_s","contentWindow","write","clickUrl","close","button_2","rectangle","super_leaderboard","wide_skyscraper","half_page","small_square","micro_bar","button_1","full_banner","half_banner","large_rectangle","skyscraper","square","vertical_rectangle","three_to_one_rectangle","square_button","vertical_banner","medium_rectangle","Product","_okanjo$Placement","_this18","mode","take","sold_by","url_selectors","marketplace_id","selectors","marketplace_status","property_id","suboptimal","Ad","_okanjo$Placement2","_this19","global","objectToString","nodeName","isFunction","object","mustache","typeStr","escapeRegExp","hasProperty","propName","nonSpaceRe","testRegExp","re","regExpTest","isWhitespace","tagRe","String","entityMap","parseTemplate","nonSpace","hasTag","spaces","closingTagRe","closingCurlyRe","openingTagRe","compileTags","tagsToCompile","spaceRe","start","scanner","stripSpace","sections","tokens","chr","token","openSection","valueLength","scanUntil","charAt","equalsRe","scan","curlyRe","pop","squashedTokens","lastToken","numTokens","nestedTokens","nestTokens","section","collector","Scanner","tail","Context","parentContext","cache",".","Writer","&","escapeHtml","<",">","\"","'","/","whiteRe","eos","lookupHit","names","partials","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","lookup","escape","clearCache","defaultWriter","to_html","result"],"mappings":"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","file":"okanjo.min.js","sourcesContent":["/*! okanjo-js v1.2.0 | (c) 2013 Okanjo Partners Inc | https://okanjo.com/ */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.okanjo = factory();\n  }\n}(this, function() {\n\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar okanjo = function (window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    var SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    var CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    var AGENT = window.navigator.userAgent;\n    var ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    var MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    var NOOP = function NOOP() {};\n    var Console = window.console;\n\n    // Place to pull defaults, if already set\n    var settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    var okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"1.2.0\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: function report() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var err = args.find(function (arg) {\n                return arg instanceof Error;\n            });\n            if (!err) {\n                var messageIndex = args.findIndex(function (arg) {\n                    return typeof arg === \"string\";\n                });\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                var stack = new Error().stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter(function (a) {\n                    return a !== err;\n                });\n            }\n\n            Console.error(\"[Okanjo v\" + okanjo.version + \"]: \" + err.stack);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: function warn(message) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            var err = new Error(message);\n\n            Console.warn(\"[Okanjo v\" + okanjo.version + \"]: \" + err.stack);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: function qwery(selector, parent) {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: function getRoute(route, params, env) {\n            if (params) {\n                Object.keys(params).forEach(function (key) {\n                    route = route.replace(\":\" + key, params[key] + \"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: function isEmpty(val) {\n            return val === null || val === undefined || typeof val === \"string\" && val.trim().length === 0;\n        },\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: function isMobile() {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: function getPageArguments(includeHashArguments) {\n\n            var split = function split(query) {\n                query = query || \"\";\n                var params = {};\n                var parts = query.split('&');\n                parts.forEach(function (part) {\n                    var eqIndex = part.indexOf('=');\n                    var key = void 0,\n                        value = void 0;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            var queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            var hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach(function (key) {\n                return queryArgs[key] = hashArgs[key];\n            });\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = function (mixed, out) {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map(function (val) {\n                return okanjo.util.deepClone(val);\n            }));\n        } else if ((typeof mixed === \"undefined\" ? \"undefined\" : _typeof(mixed)) === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach(function (key) {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = function (input) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var output = {};\n\n        if (input !== undefined && input !== null) {\n            Object.keys(input).forEach(function (key) {\n                // Convert object ids to hex strings\n                if (input[key] instanceof Date) {\n                    if (options.dateToIso) {\n                        output[key] = input[key].toISOString(); // convert to iso\n                    } else {\n                        output[key] = input[key]; // as-is\n                    }\n                } else if (_typeof(input[key]) === 'object' && input[key] !== null) {\n                    // Allow ignoring arrays if desired\n                    if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                        output[key] = input[key];\n                    } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                        output[key] = input[key].join(',');\n                    } else {\n                        // Make child objects flat too (always returns object so Object.keys is safe)\n                        var childObject = okanjo.util.flatten(input[key], options);\n                        Object.keys(childObject).forEach(function (childKey) {\n                            output[key + '_' + childKey] = childObject[childKey];\n                        });\n                    }\n                } else {\n                    // Copy value references\n                    output[key] = input[key];\n                }\n            });\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = function (clusterWorkerId) {\n\n        var shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n            crypto = window.crypto || window.msCrypto || typeof require === \"function\" && require('crypto'),\n            randomByte = function randomByte() {\n            /* istanbul ignore next: platform diffs out of scope */\n            if (crypto && crypto.randomBytes) {\n                return crypto.randomBytes(1)[0] & 0x30;\n            } else if (!crypto || !crypto.getRandomValues) {\n                return Math.floor(Math.random() * 256) & 0x30;\n            }\n            /* istanbul ignore next: platform diffs out of scope */\n            var dest = new Uint8Array(1);\n            /* istanbul ignore next: platform diffs out of scope */\n            crypto.getRandomValues(dest);\n            /* istanbul ignore next: platform diffs out of scope */\n            return dest[0] & 0x30;\n        },\n            encode = function encode(number) {\n            var loopCounter = 0,\n                done = void 0,\n                str = '';\n\n            while (!done) {\n                str = str + shuffled[number >> 4 * loopCounter & 0x0f | randomByte()];\n                done = number < Math.pow(16, loopCounter + 1);\n                loopCounter++;\n            }\n            return str;\n        },\n\n\n        // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n        // This number should be updated every year or so to keep the generated id short.\n        // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n        REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        var counter = void 0,\n            previousSeconds = void 0;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function () {\n            var str = '',\n                seconds = Math.floor((new Date().getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    }();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: function getScrollPosition() {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: function getElementSize(element, includeMargin) {\n            var size = {\n                height: element.offsetHeight,\n                width: element.offsetWidth\n            };\n            var style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: function getPageSize() {\n            var body = document.querySelector('body');\n            var html = document.documentElement;\n\n            return {\n                w: Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth),\n\n                h: Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight)\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: function getViewportSize() {\n            var element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */ : document.body;\n            var width = element.clientWidth;\n            var height = element.clientHeight;\n            var inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            var inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            var isMobileZoom = inWidth && width > inWidth || inHeight && height > inHeight;\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: function getEventPosition(event) {\n            var ex = event.pageX;\n            var ey = event.pageY;\n            var body = document.body;\n            var el = document.documentElement;\n            var scrollLeft = 'scrollLeft';\n            var scrollTop = 'scrollTop';\n            var type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: function getElementPosition(element) {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            var err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                var rect = element.getBoundingClientRect();\n                var pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    x1: rect.left + pos.x,\n                    y1: rect.top + pos.y,\n                    x2: rect.right + pos.x,\n                    y2: rect.bottom + pos.y\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element: element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0\n                };\n            }\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function (element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        var parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        var text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000,\n            // Safety switch to bust out of the loop in the event something goes terribly wrong\n        replacer = function replacer(match) {\n            /* istanbul ignore next: n/a to jsdom */\n            replacedText = match.substr(0, match.length - 3) + replacedText;\n            /* istanbul ignore next: n/a to jsdom */\n            return '...';\n        };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && safety-- > 0) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            var content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class', 'okanjo-ellipses');\n            span.setAttribute('class', 'okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length - 3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length - 3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n}(window, document);\n\"use strict\";\n\n(function (window) {\n\n    var JSON_TEST = /^application\\/json/;\n    var okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        var req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        var calledBack = false;\n\n        // Normalized done handler\n        var done = function done(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function (e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function (e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    var res = void 0;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    var encode = function encode(val) {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent('' + val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    var getKey = function getKey(key, keyPrefix) {\n        if (keyPrefix) {\n            return keyPrefix + \"[\" + encode(key) + \"]\";\n        } else {\n            return encode(key);\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = function (obj, keyPrefix) {\n        var pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (v) {\n                    return pairs.push(getKey(key, keyPrefix) + '=' + encode(v));\n                }); // Does not do that PHP garbage with key[]=val\n            } else if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\" && value !== null) {\n                // Recurse\n                var res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: function set(cookieName, value, expireDays) {\n            var expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            var expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            var path = \" Path=/\";\n            var cookieValue = encodeURI(value) + \";\" + expires + path;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: function get(cookieName) {\n            var output = null;\n            document.cookie.split(\";\").find(function (cookie) {\n                var nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                var value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                if (nameTest === cookieName) {\n                    output = decodeURI(value);\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            return output;\n        }\n    };\n})(window, document);\n\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n\n    var TemplateEngine = function () {\n        function TemplateEngine() {\n            _classCallCheck(this, TemplateEngine);\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n\n\n        _createClass(TemplateEngine, [{\n            key: \"registerTemplate\",\n            value: function registerTemplate(name, template, beforeRender, options) {\n\n                if ((typeof template === \"undefined\" ? \"undefined\" : _typeof(template)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (template.nodeType === undefined) {\n                        throw new Error('Parameter template must be a string or a DOM element');\n                    } else {\n                        template = template.innerHTML;\n                        okanjo.lib.Mustache.parse(template);\n                    }\n                } else if (typeof template !== \"string\") {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                }\n\n                // Shift options if only have 3 params\n                if (arguments.length === 3 && (typeof beforeRender === \"undefined\" ? \"undefined\" : _typeof(beforeRender)) === \"object\") {\n                    options = beforeRender;\n                    beforeRender = null;\n                } else {\n                    options = options || {};\n                }\n\n                if (beforeRender && typeof beforeRender !== \"function\") {\n                    throw new Error('Parameter beforeRender must be a function');\n                }\n\n                // Assign the template\n                this._templates[name] = {\n                    markup: template,\n                    options: options,\n                    beforeRender: beforeRender\n                };\n            }\n\n            /**\n             * Registers a CSS payload for use\n             * @param name\n             * @param css\n             * @param options\n             */\n\n        }, {\n            key: \"registerCss\",\n            value: function registerCss(name, css, options) {\n                options = options || {};\n\n                if ((typeof css === \"undefined\" ? \"undefined\" : _typeof(css)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (css.nodeType === undefined) {\n                        throw new Error('Parameter css must be a string or a DOM element');\n                    }\n                } else if (typeof css !== \"string\") {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n\n                this._css[name] = {\n                    markup: css,\n                    options: options\n                };\n            }\n\n            /**\n             * Checks whether a template is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: \"isTemplateRegistered\",\n            value: function isTemplateRegistered(name) {\n                return !!this._templates[name];\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Checks whether a CSS payload is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: \"isCssRegistered\",\n            value: function isCssRegistered(name) {\n                return !!this._css[name];\n            }\n\n            /**\n             * Ensures that a CSS payload has been added to the DOM\n             * @param name\n             */\n\n        }, {\n            key: \"ensureCss\",\n            value: function ensureCss(name) {\n                if (this._css[name]) {\n                    //noinspection JSValidateTypes\n                    var css = this._css[name],\n                        id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                    // Check for css element on page, if we have an ID to look for\n                    if (id) {\n                        var element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                        if (!element) {\n                            var head = document.head,\n                                style = document.createElement('style');\n\n                            style.id = id;\n                            style.setAttribute('type', 'text/css');\n\n                            /* istanbul ignore else: old ie */\n                            if (style.hasOwnProperty) {\n                                // old ie\n                                style.innerHTML = css.markup;\n                            } else {\n                                style.styleSheet.cssText = css.markup;\n                            }\n\n                            if (head) {\n                                head.appendChild(style);\n                            } else {\n                                // NO HEAD, just prepend to body then\n                                var body = document.body;\n                                if (body) {\n                                    body.appendChild(style);\n                                } else {\n                                    // And if this doesn't work, just give up\n                                    okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    okanjo.report('Attempted to add CSS template \"' + name + '\" to the DOM, however it does not appear to be registered?');\n                }\n            }\n\n            /**\n             * Renders a template and returns the markup\n             * @param templateName\n             * @param context\n             * @param model\n             * @return {string}\n             */\n\n        }, {\n            key: \"render\",\n            value: function render(templateName, context, model) {\n                var _this = this;\n\n                model = model || {};\n                var template = this._templates[templateName];\n\n                // If there's a data controller closure set, and if so, run the data through there\n                if (template.beforeRender) {\n                    model = template.beforeRender.call(context, model);\n                }\n\n                // Attach globals\n                model.okanjo = okanjo;\n                model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//, ''); // Url w/o scheme to prevent mixed-content warnings\n                model.now = function () {\n                    return new Date().getTime();\n                };\n                model.classDetects = this.classDetects;\n\n                //noinspection JSUnresolvedVariable\n                if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                    model.classDetects += \" \" + model.blockClasses.join(' ');\n                    delete model.blockClasses;\n                }\n\n                // Add CSS unless we are told not to\n                if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                    template.options.css.forEach(function (css) {\n                        return _this.ensureCss(css);\n                    });\n                    delete model.css;\n                }\n\n                // Render the template and return the result\n                return okanjo.lib.Mustache.render(template.markup, model);\n            }\n        }]);\n\n        return TemplateEngine;\n    }();\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n\n\n    TemplateEngine.formatCurrency = function (value) {\n        var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n        var decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n        var thousandsSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ',';\n\n        var s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        var j = i.length;\n        j = j > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    /*\n      div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n      */\n\n    var okanjo = window.okanjo;\n    var IS_MOBILE = okanjo.util.isMobile();\n\n    var initialized = false,\n\n    // scrollY = null,\n\n    // Selectors\n    $html = void 0,\n        $body = void 0,\n        $modalContainer = void 0,\n        $modalWindow = void 0,\n        $modalSkin = void 0,\n        $modalOuter = void 0,\n        $modalInner = void 0,\n        $modalClose = void 0,\n        $modalFrame = void 0,\n        createElements = function createElements() {\n\n        // Page elements\n        //noinspection JSUnresolvedFunction\n        $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n        //noinspection JSUnresolvedFunction\n        $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n        // Modal elements\n        $modalContainer = document.createElement('div');\n        $modalWindow = document.createElement('div');\n        $modalSkin = document.createElement('div');\n        $modalOuter = document.createElement('div');\n        $modalInner = document.createElement('div');\n        $modalClose = document.createElement('div');\n        $modalFrame = document.createElement('iframe');\n\n        $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n        $modalWindow.setAttribute('class', 'okanjo-modal-window');\n        $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n        $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n        $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n        $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n        $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n        $modalFrame.setAttribute('frameborder', '0');\n        $modalFrame.setAttribute('vspace', '0');\n        $modalFrame.setAttribute('hspace', '0');\n        $modalFrame.setAttribute('webkitallowfullscreen', '');\n        $modalFrame.setAttribute('mozallowfullscreen', '');\n        $modalFrame.setAttribute('allowfullscreen', '');\n        $modalFrame.setAttribute('scrolling', 'auto');\n\n        $modalClose.innerHTML = '×';\n\n        // Create the modal element tree\n        $modalInner.appendChild($modalFrame);\n        $modalOuter.appendChild($modalInner);\n        $modalSkin.appendChild($modalOuter);\n        $modalWindow.appendChild($modalSkin);\n        $modalWindow.appendChild($modalClose);\n        $modalContainer.appendChild($modalWindow);\n\n        // Add the modal stuff to the body\n        $body.appendChild($modalContainer);\n    },\n        addListener = function addListener(el, event, handler) {\n        /* istanbul ignore else: old browsers */\n        if (el.addEventListener) {\n            el.addEventListener(event, handler, false);\n        } else {\n            el.attachEvent(\"on\" + event, handler);\n        }\n    },\n        getWindowHeight = function getWindowHeight() {\n        return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n    },\n        handleReposition = function handleReposition() {\n        // scrollY = okanjo.ui.getScrollPosition().y;\n        //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n        $modalWindow.style.height = getWindowHeight() - 80 + \"px\";\n    },\n        bindEvents = function bindEvents() {\n\n        // If the device orientation changes, adjust the modal view port\n        addListener(window, 'orientationchange', function () {\n            for (var t = 0; t < 2; t++) {\n                setTimeout(handleReposition, 1000 * t + 10);\n            }\n        });\n\n        // If the window changes size, also adjust the modal view port\n        addListener(window, 'resize', function () {\n            setTimeout(handleReposition, 100);\n        });\n\n        // Click the overlay to close the modal\n        addListener($modalContainer, 'click', closeModal);\n\n        // If you click in the modal, don't close it!\n        addListener($modalWindow, 'click', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        // Click the close button to close it\n        addListener($modalClose, 'click', function (e) {\n\n            // Don't close it twice\n            e.preventDefault();\n            e.stopPropagation();\n\n            closeModal();\n        });\n    },\n\n\n    //removeListener = function(el, event, handler) {\n    //    if (el.removeEventListener) {\n    //        el.removeEventListener(event, handler);\n    //    } else {\n    //        el.detachEvent(\"on\" + event, handler);\n    //    }\n    //},\n\n    addClass = function addClass(el, name) {\n        el.className += \" \" + name;\n    },\n        removeClass = function removeClass(el, name) {\n        el.className = el.className.replace(new RegExp(' *?' + name), '');\n    },\n        openModal = function openModal() {\n\n        // scrollY = document.body.scrollTop;\n\n        removeClass($modalContainer, 'okanjo-modal-hidden');\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        handleReposition();\n\n        addClass($html, \"okanjo-modal-active\");\n\n        if (!IS_MOBILE) {\n            addClass($html, \"okanjo-modal-margin-fix\");\n        }\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n        }, 10);\n\n        // Click the overlay to close the modal\n        //addListener($body, 'click', closeModal);\n    },\n        closeModal = function closeModal() {\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n            addClass($modalContainer, \"okanjo-modal-hidden\");\n\n            removeClass($html, \"okanjo-modal-active\");\n            if (!IS_MOBILE) {\n                removeClass($html, \"okanjo-modal-margin-fix\");\n            }\n        }, 210);\n\n        // Click the overlay to close the modal\n        //removeListener($body, 'click', closeModal);\n    },\n\n\n    /**\n     * Insert an element or markup into the modal\n     * @param content\n     */\n    setContent = function setContent(content) {\n\n        // Remove existing content\n        $modalInner.innerHTML = \"\";\n\n        // Insert new content\n        if (typeof content === \"string\") {\n            $modalInner.innerHTML = content;\n        } else {\n            $modalInner.appendChild(content);\n        }\n    };\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function show(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function hide() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n\n    var Metrics = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Metrics() {\n            _classCallCheck(this, Metrics);\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n\n\n        _createClass(Metrics, [{\n            key: \"_getStoredQueue\",\n            value: function _getStoredQueue() {\n                if (window.localStorage[Metrics.Params.queue]) {\n                    try {\n                        var queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                        if (Array.isArray(queue)) {\n                            return queue;\n                        } else {\n                            okanjo.report('Stored queue is not a queue', { queue: queue });\n                            return [];\n                        }\n                    } catch (e) {\n                        okanjo.report('Failed to load metric queue from storage', { err: e });\n                        return [];\n                    }\n                } else {\n                    // not stored\n                    return [];\n                }\n            }\n\n            /**\n             * Updates the queue stored in storage, in the event we can't complete our submissions\n             * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n             * @private\n             */\n\n        }, {\n            key: \"_saveQueue\",\n            value: function _saveQueue(delay) {\n                var _this2 = this;\n\n                if (delay) {\n                    if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                    this._saveQueueTimeout = setTimeout(function () {\n                        _this2._saveQueue(false);\n                        _this2._saveQueueTimeout = null;\n                    }, 100);\n                } else {\n                    window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n                }\n            }\n\n            /**\n             * Extract contextual pass-through data from the URL, if present\n             * @private\n             */\n\n        }, {\n            key: \"_checkUrlForReferral\",\n            value: function _checkUrlForReferral() {\n                var pageArgs = okanjo.util.getPageArguments(true),\n                    urlSid = pageArgs[Metrics.Params.name],\n                    localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name),\n                    // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                    sourceChannel = pageArgs[Metrics.Params.channel];\n\n                // If for some reason, both are set, record the incident as a possible correlation\n                if (urlSid && localSid && urlSid !== localSid) {\n                    this.trackEvent({\n                        object_type: Metrics.Object.metric_session,\n                        event_type: Metrics.Event.correlation,\n                        id: urlSid + \"_\" + localSid,\n                        ch: this.defaultChannel,\n                        _noProcess: true\n                    });\n                }\n\n                // Update local values\n                this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n                this.sourceCh = sourceChannel || null;\n                this.sourceCx = sourceContext || null;\n            }\n\n            /**\n             * Submits an individual event metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: \"trackEvent\",\n            value: function trackEvent(event, callback) {\n                // Ensure the event contains the required fields\n                if (!event.object_type || !event.event_type) {\n                    okanjo.report('Invalid metric to track (missing object_type or event_type)', { event: event });\n                    return;\n                }\n\n                // Queue the event for publishing\n                this._push(event, callback);\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Submits a page view metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: \"trackPageView\",\n            value: function trackPageView(event, callback) {\n                event = event || {};\n                event.object_type = Metrics.Object.page;\n                event.event_type = Metrics.Event.view;\n                event.id = event.id || window.location.href;\n                event.ch = event.ch || this.defaultChannel;\n\n                // Queue the event for publishing\n                this.trackEvent(event, callback);\n            }\n\n            /**\n             * Adds an event to the queue\n             * @param event\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_push\",\n            value: function _push(event, callback) {\n                this._queue.push({ event: event, callback: callback });\n\n                // Save the queue\n                this._saveQueue(true);\n\n                // Start burning down the queue, unless the event says not to\n                if (event._noProcess) {\n                    delete event._noProcess;\n                } else {\n                    this._processQueue();\n                }\n            }\n\n            /**\n             * Burn down the queue\n             * @private\n             */\n\n        }, {\n            key: \"_processQueue\",\n            value: function _processQueue() {\n                var _this3 = this;\n\n                // If the queue is not already being processed, and there's stuff to process, continue sending them\n                if (!this._processTimeout && this._queue.length > 0) {\n                    this._processTimeout = setTimeout(function () {\n\n                        // Pull the items we're going to batch out of the queue\n                        var items = _this3._queue.splice(0, 255);\n                        _this3._saveQueue(false);\n\n                        // Track the item\n                        _this3._batchSend(items, function (err, res) {\n                            // TODO: If there was an error, consider splicing the batch back into the queue\n\n                            // Update / Set the metric sid on the publisher\n                            /* istanbul ignore else: server barks */\n                            if (res && res.data && res.data.sid) _this3._updateSid(res.data.sid);\n\n                            // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                            _this3._processTimeout = null;\n                            _this3._processQueue();\n\n                            // Fire the event callbacks if there are any\n                            items.forEach(function (item) {\n                                item.callback && item.callback(err, res);\n                            });\n                        });\n                    }, 0); // break event loop, maybe\n                }\n            }\n\n            /**\n             * Sends a bunch of queued metric events\n             * @param items\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_batchSend\",\n            value: function _batchSend(items, callback) {\n                var _this4 = this;\n\n                // Normalize event data\n                var events = items.map(function (item) {\n                    _this4._normalizeEvent(item.event);\n\n                    // Strip duplicated data from event batch\n                    delete item.event.sid;\n                    delete item.event.win;\n\n                    return item.event;\n                });\n\n                var payload = {\n                    events: events,\n                    win: window.location.href\n                };\n\n                var route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n                // Set sid if present\n                if (this.sid) {\n                    payload.sid = this.sid;\n                }\n\n                // Send it\n                okanjo.net.request.post(route, payload, function (err, res) {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err: err, res: res, items: items, route: route });\n                    }\n                    callback && callback(err, res);\n                });\n            }\n\n            /**\n             * Normaizes events so that they contain consistent data values\n             * @param event\n             * @private\n             */\n\n        }, {\n            key: \"_normalizeEvent\",\n            value: function _normalizeEvent(event) {\n\n                // Ensure meta is ready to receive values\n                event.m = event.m || {};\n\n                // Set key\n                event.key = event.key || event.m.key || okanjo.key || undefined;\n\n                // Set session\n                if (this.sid) event.sid = this.sid;\n\n                // Clone the metadata, since it might be a direct reference to a widget property\n                // Deleting properties on the meta object could be very destructive\n                event.m = Object.assign({}, event.m); // event.m should be flat\n\n                // Strip meta keys that should be excluded\n                Object.keys(Metrics.Meta.exclude).forEach(function (key) {\n                    return delete event.m[key];\n                });\n\n                // Set referral channel / context\n                if (this.sourceCh) {\n                    event.m.ref_ch = this.sourceCh;\n                }\n                if (this.sourceCx) {\n                    event.m.ref_cx = this.sourceCx;\n                }\n\n                // Set page group id\n                event.m.pgid = this.pageId;\n\n                // Set okanjo version\n                event.m.ok_ver = okanjo.version;\n\n                // Finalize metadata\n                event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n                // Ensure metadata strings won't exceed the imposed limit\n                Object.keys(event.m).forEach(function (key) {\n                    if (typeof event.m[key] === \"string\") {\n                        event.m[key] = event.m[key].substr(0, 255);\n                    }\n                });\n\n                // Set page source reference\n                if (document.referrer) {\n                    event.ref = document.referrer;\n                }\n\n                // Set the window location\n                event.win = window.location.href;\n            }\n\n            /**\n             * Updates the stored session identifier\n             * @param sid\n             * @private\n             */\n\n        }, {\n            key: \"_updateSid\",\n            value: function _updateSid(sid) {\n                if (!this.sid && sid) {\n                    this.sid = sid;\n                    window.localStorage[Metrics.Params.name] = sid;\n                    okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"create\",\n\n\n            //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n            /**\n             * Helper to create a new fluent event structure\n             * @param args\n             * @return {*}\n             */\n            value: function create() {\n                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                    args[_key3] = arguments[_key3];\n                }\n\n                return Metrics.create.apply(null, args);\n            }\n        }], [{\n            key: \"addElementInfo\",\n            value: function addElementInfo(element, event) {\n                var page = okanjo.ui.getPageSize(),\n                    size = okanjo.ui.getElementPosition(element);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.pw = page.w;\n                event.m.ph = page.h;\n                event.m.x1 = size.x1;\n                event.m.y1 = size.y1;\n                event.m.x2 = size.x2;\n                event.m.y2 = size.y2;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addViewportInfo\",\n            value: function addViewportInfo(event) {\n                var vp = okanjo.ui.getViewportSize(),\n                    pos = okanjo.ui.getScrollPosition();\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.vx1 = pos.x;\n                event.m.vy1 = pos.y;\n                event.m.vx2 = pos.x + vp.vw;\n                event.m.vy2 = pos.y + vp.vh;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addEventInfo\",\n            value: function addEventInfo(jsEvent, event) {\n                var pos = okanjo.ui.getEventPosition(jsEvent);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.et = pos.et;\n                event.m.ex = pos.ex;\n                event.m.ey = pos.ey;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param event\n             * @param args\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addEventMeta\",\n            value: function addEventMeta(event) {\n                event = event || {};\n                event.m = event.m || {};\n\n                for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                    args[_key4 - 1] = arguments[_key4];\n                }\n\n                event.m = Object.assign.apply(Object, [event.m].concat(args));\n\n                return event;\n            }\n\n            /**\n             * Helper to create a new fluent event structure\n             * @param data\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"create\",\n            value: function create(data) {\n                for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                    args[_key5 - 1] = arguments[_key5];\n                }\n\n                // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n                return new MetricEvent(data, args);\n            }\n        }]);\n\n        return Metrics;\n    }();\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n\n\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key', 'callback', 'metrics_channel_context', 'metrics_context', 'mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n\n    var MetricEvent = function () {\n        function MetricEvent(data, others) {\n            var _this5 = this;\n\n            _classCallCheck(this, MetricEvent);\n\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach(function (data) {\n                    _this5.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n\n\n        _createClass(MetricEvent, [{\n            key: \"data\",\n            value: function data(_data) {\n                Object.assign(this, okanjo.util.deepClone(_data));\n                return this;\n            }\n\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"event\",\n            value: function event(jsEvent) {\n                Metrics.addEventInfo(jsEvent, this);\n                return this;\n            }\n\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"viewport\",\n            value: function viewport() {\n                Metrics.addViewportInfo(this);\n                return this;\n            }\n\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"element\",\n            value: function element(_element) {\n                Metrics.addElementInfo(_element, this);\n                return this;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"meta\",\n            value: function meta() {\n                for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                    args[_key6] = arguments[_key6];\n                }\n\n                Metrics.addEventMeta.apply(null, [this].concat(args));\n                return this;\n            }\n\n            /**\n             * Sets the object and event type on the event w/o having to use .data\n             * @param object_type\n             * @param event_type\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"type\",\n            value: function type(object_type, event_type) {\n                this.object_type = object_type;\n                this.event_type = event_type;\n                return this;\n            }\n\n            /**\n             * Finalizes and sends the event\n             * @param callback\n             */\n\n        }, {\n            key: \"send\",\n            value: function send(callback) {\n                okanjo.metrics.trackEvent(this, callback);\n                // DONT RETURN - BREAK THE CHAIN HERE\n            }\n\n            /**\n             * Gets the single-metric tracking url for this event\n             * @return {string}\n             */\n\n        }, {\n            key: \"toUrl\",\n            value: function toUrl() {\n                // Copy data w/o modifying it\n                var event = Object.assign({}, this);\n\n                // Extract params\n                var object_type = event.object_type,\n                    event_type = event.event_type;\n\n                delete event.object_type;\n                delete event.event_type;\n\n                // Normalize event data\n                okanjo.metrics._normalizeEvent(event);\n\n                // Get the URL\n                return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type: object_type, event_type: event_type }) + '?' + okanjo.net.request.stringify(event);\n            }\n        }]);\n\n        return MetricEvent;\n    }();\n\n    // Export / initialize\n\n\n    okanjo.metrics = new Metrics();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({ _noProcess: true });\n    setTimeout(function () {\n        okanjo.metrics._processQueue();\n    }, 1000);\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function (window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    var EventEmitter = function () {\n        function EventEmitter() {\n            _classCallCheck(this, EventEmitter);\n\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n\n\n        _createClass(EventEmitter, [{\n            key: \"on\",\n            value: function on(event, listener) {\n                if (!this._events[event]) {\n                    this._events[event] = [];\n                }\n\n                this._events[event].push(listener);\n            }\n\n            /**\n             * Removes an event handler for an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: \"removeListener\",\n            value: function removeListener(event, listener) {\n\n                if (this._events[event]) {\n                    var idx = this._events[event].indexOf(listener);\n                    if (idx >= 0) {\n                        this._events[event].splice(idx, 1);\n                    }\n                }\n            }\n\n            /**\n             * Emits an event\n             * @param event\n             */\n\n        }, {\n            key: \"emit\",\n            value: function emit(event) {\n                var i = void 0,\n                    listeners = void 0,\n                    length = void 0,\n                    args = [].slice.call(arguments, 1);\n\n                if (this._events[event]) {\n                    listeners = this._events[event].slice();\n                    length = listeners.length;\n\n                    for (i = 0; i < length; i++) {\n                        listeners[i].apply(this, args);\n                    }\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Registers an event handler to fire only once on an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: \"once\",\n            value: function once(event, listener) {\n                var _arguments = arguments,\n                    _this6 = this;\n\n                var callback = function callback() {\n                    var args = [].slice.call(_arguments, 1);\n                    _this6.removeListener(event, callback);\n                    listener.apply(_this6, args);\n                };\n\n                this.on(event, callback);\n            }\n        }]);\n\n        return EventEmitter;\n    }();\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n    var DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    var DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n\n    var Widget = function (_okanjo$_EventEmitter) {\n        _inherits(Widget, _okanjo$_EventEmitter);\n\n        function Widget(element, options) {\n            _classCallCheck(this, Widget);\n\n            // Verify element was given (we can't load unless we have one)\n            var _this7 = _possibleConstructorReturn(this, (Widget.__proto__ || Object.getPrototypeOf(Widget)).call(this));\n\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: _this7, element: element, options: options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)), { widget: _this7, element: element, options: options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            _this7.name = 'Widget';\n            _this7.element = element;\n            _this7.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            _this7.config = Object.assign({}, options);\n            return _this7;\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n\n\n        _createClass(Widget, [{\n            key: \"init\",\n            value: function init() {\n                // process config attributes\n                this._applyConfiguration();\n\n                this._setCompatibilityOptions();\n\n                // ensure placement key\n                if (!this._ensurePlacementKey()) return;\n\n                // Tell the widget to load\n                this.load();\n            }\n\n            /**\n             * This is for extended widgets, so they may modify the configuration before loading\n             */\n\n        }, {\n            key: \"_setCompatibilityOptions\",\n            value: function _setCompatibilityOptions() {}\n            // By default, this does nothing. Must be overridden to be useful\n\n\n            //noinspection JSMethodCanBeStatic\n            /**\n             * Widget configuration definitions\n             * @return {{}}\n             */\n\n        }, {\n            key: \"getSettings\",\n            value: function getSettings() {\n                // Override this\n                return {};\n            }\n\n            /**\n             * Main widget load function.\n             */\n\n        }, {\n            key: \"load\",\n            value: function load() {}\n            // Override this in the widget implementation\n\n\n            /**\n             * Applies data attribute settings and defaults to the widget configuration\n             * @private\n             */\n\n        }, {\n            key: \"_applyConfiguration\",\n            value: function _applyConfiguration() {\n                var _this8 = this;\n\n                // this.config was set to the options provided in the constructor\n                // so layer data attributes on top\n\n                var data = this.getDataAttributes();\n                var settings = this.getSettings();\n                Object.keys(data).forEach(function (key) {\n                    var normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    var val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        _this8.config[normalizedKey] = val;\n                    }\n                });\n\n                // Apply defaults from the widget settings\n                Object.keys(settings).forEach(function (key) {\n                    if (_this8.config[key] === undefined && settings[key]._default !== undefined) {\n                        _this8.config[key] = settings[key].value(undefined, false);\n                    }\n                });\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets a copy of the configuration, suitable for transmission\n             * @return {{}}\n             */\n\n        }, {\n            key: \"getConfig\",\n            value: function getConfig() {\n                var _this9 = this;\n\n                var settings = this.getSettings();\n                var out = {};\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this9.config[origKey];\n                    var key = origKey;\n                    var group = null;\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            /**\n             * Before loading, ensure that a placement key is present or abort\n             * @return {boolean}\n             * @private\n             */\n\n        }, {\n            key: \"_ensurePlacementKey\",\n            value: function _ensurePlacementKey() {\n\n                // Check if set on widget or globally\n                if (this.config.key) {\n                    return true;\n                } else if (okanjo.key) {\n                    // Copy key from global scope,\n                    this.config.key = okanjo.key;\n                    return true;\n                }\n\n                // No key set, can't load.\n                okanjo.report('No key provided on widget', { widget: this });\n                this.showError('Error: Missing placement key.');\n                return false;\n            }\n\n            /**\n             * Displays an error in the widget element\n             * @param message\n             */\n\n        }, {\n            key: \"showError\",\n            value: function showError(message) {\n                this.setMarkup(okanjo.ui.engine.render('okanjo.error', this, { message: message }));\n            }\n\n            /**\n             * Sets the markup of the widget's element\n             * @param markup\n             */\n\n        }, {\n            key: \"setMarkup\",\n            value: function setMarkup(markup) {\n                this.element.innerHTML = markup;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the current page URL, sans query string and fragment.\n             * @returns {string} - URL\n             */\n\n        }, {\n            key: \"getDataAttributes\",\n\n\n            /**\n             * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n             * @returns {*}\n             */\n            value: function getDataAttributes() {\n                var data = {};\n                Array.from(this.element.attributes).forEach(function (attr) {\n                    var match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                    if (match) {\n                        data[match[1]] = attr.value;\n                    }\n                });\n                return data;\n            }\n        }], [{\n            key: \"getCurrentPageUrl\",\n            value: function getCurrentPageUrl() {\n                return window.location.href.replace(/([?#].*)$/, '');\n            }\n        }]);\n\n        return Widget;\n    }(okanjo._EventEmitter);\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n\n\n    Widget.Field = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Field() {\n            _classCallCheck(this, Field);\n\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n\n\n        _createClass(Field, [{\n            key: \"array\",\n            value: function array(converter) {\n                this._convert = function (val) {\n                    if (Array.isArray(val)) {\n                        if (converter) {\n                            return val.map(function (v) {\n                                return converter(v);\n                            });\n                        } else {\n                            return val;\n                        }\n                    }\n                    val = val.replace(/\\\\,/g, '\\0');\n                    return val.split(',').map(function (v) {\n                        var res = v.trim().replace('\\0', ',');\n                        if (converter) res = converter(res);\n                        return res;\n                    });\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"string\",\n\n\n            /**\n             * Formats the value as a string\n             * @return {Field}\n             */\n            value: function string() {\n                this._convert = function (val) {\n                    if (val === null || val === undefined) return val;else return \"\" + val;\n                };\n                return this;\n            }\n        }, {\n            key: \"bool\",\n\n\n            /**\n             * Formats the value as a boolean (takes 1, 0, true, false)\n             * @return {Field}\n             */\n            value: function bool() {\n                this._convert = function (val) {\n                    if (typeof val === \"string\") {\n                        return val === \"1\" || val.toLowerCase() === \"true\";\n                    } else {\n                        return !!val;\n                    }\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"strip\",\n\n\n            /**\n             * Indicates the field should not be passed on for transmission\n             * @return {Field}\n             */\n            value: function strip() {\n                this._strip = true;return this;\n            }\n        }, {\n            key: \"int\",\n\n\n            /**\n             * Formats the value as a integer (whole) number\n             * @return {Field}\n             */\n            value: function int() {\n                this._convert = function (val) {\n                    return parseInt(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"float\",\n\n\n            /**\n             * Formats the value as a floating point number\n             * @return {Field}\n             */\n            value: function float() {\n                this._convert = function (val) {\n                    return parseFloat(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"default\",\n\n\n            //noinspection ReservedWordAsName\n            /**\n             * Sets the default value to use if not set\n             * @param val\n             * @return {Field}\n             */\n            value: function _default(val) {\n                this._default = val;\n                return this;\n            }\n\n            /**\n             * Assigns the property to a bucket for hierarchy\n             * @param name\n             * @return {Field}\n             */\n\n        }, {\n            key: \"group\",\n            value: function group(name) {\n                this._group = name;\n                return this;\n            }\n\n            /**\n             * Gets the group the field belongs to\n             * @return {*|null}\n             */\n\n        }, {\n            key: \"getGroup\",\n            value: function getGroup() {\n                return this._group;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the formatted value of the field\n             * @param val\n             * @param strip\n             * @return {*}\n             */\n\n        }, {\n            key: \"value\",\n            value: function value(val) {\n                var strip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                if (this._strip && strip) return undefined;\n                if (val !== undefined && this._convert) {\n                    val = this._convert(val);\n                }\n                return val !== undefined ? val : this._default;\n            }\n        }], [{\n            key: \"array\",\n            value: function array(converter) {\n                return new Field().array(converter);\n            }\n        }, {\n            key: \"string\",\n            value: function string() {\n                return new Field().string();\n            }\n        }, {\n            key: \"bool\",\n            value: function bool() {\n                return new Field().bool();\n            }\n        }, {\n            key: \"strip\",\n            value: function strip() {\n                return new Field().strip();\n            }\n        }, {\n            key: \"int\",\n            value: function int() {\n                return new Field().int();\n            }\n        }, {\n            key: \"float\",\n            value: function float() {\n                return new Field().float();\n            }\n        }]);\n\n        return Field;\n    }();\n\n    // Export\n    return okanjo._Widget = Widget;\n})(window);\n\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    //region Imports and Constants\n\n    var okanjo = window.okanjo;\n    var _okanjo$_Widget$Field = okanjo._Widget.Field,\n        string = _okanjo$_Widget$Field.string,\n        array = _okanjo$_Widget$Field.array,\n        float = _okanjo$_Widget$Field.float,\n        int = _okanjo$_Widget$Field.int,\n        bool = _okanjo$_Widget$Field.bool;\n\n    var Metrics = okanjo.metrics.constructor;\n    var TemplateEngine = okanjo.ui.engine.constructor;\n\n    var FILTERS = 'filters';\n    var DISPLAY = 'display';\n    var ARTICLE_META = 'article_meta';\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n\n    var Placement = function (_okanjo$_Widget) {\n        _inherits(Placement, _okanjo$_Widget);\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        function Placement(element) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            _classCallCheck(this, Placement);\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n\n            var _this10 = _possibleConstructorReturn(this, (Placement.__proto__ || Object.getPrototypeOf(Placement)).call(this, element, options));\n\n            _this10.name = 'Placement';\n            _this10._metricBase = {}; // placeholder for metrics\n            _this10._response = null;\n\n            // Start loading content\n            if (!options.no_init) _this10.init();\n            return _this10;\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n\n\n        _createClass(Placement, [{\n            key: \"getSettings\",\n            value: function getSettings() {\n                return {\n\n                    // What type of response do you want\n                    type: string().group(FILTERS),\n\n                    // What specific products do you want\n                    ids: array().group(FILTERS),\n\n                    // Filter by generic query string\n                    q: string().group(FILTERS),\n\n                    // Filter by relation to content\n                    url: string().group(FILTERS),\n                    url_referrer: string().group(FILTERS).strip(),\n                    url_selectors: string().group(FILTERS),\n\n                    // Filter by hierarchy\n                    organization_id: string().group(FILTERS),\n                    property_id: string().group(FILTERS),\n                    store_id: string().group(FILTERS),\n\n                    // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                    organization_name: string().group(FILTERS),\n                    property_name: string().group(FILTERS),\n                    store_name: string().group(FILTERS),\n\n                    // Filter by integrations\n                    external_id: string().group(FILTERS),\n                    sku: string().group(FILTERS),\n                    external_store_id: string().group(FILTERS),\n\n                    // Filter by product attributes\n                    condition: string().group(FILTERS),\n                    manufacturer: string().group(FILTERS),\n                    upc: string().group(FILTERS),\n                    isbn: string().group(FILTERS),\n\n                    // Filter by categorization / distribution\n                    tags: array().group(FILTERS),\n                    category: array().group(FILTERS),\n                    pools: array().group(FILTERS),\n\n                    // Filter by price range\n                    min_price: float().group(FILTERS),\n                    max_price: float().group(FILTERS),\n\n                    // Filter by donation ranges\n                    min_donation_percent: float().group(FILTERS),\n                    max_donation_percent: float().group(FILTERS),\n\n                    // Filter by donation recipient\n                    donation_to: string().group(FILTERS),\n\n                    // Sorting\n                    sort_by: string().group(FILTERS),\n                    sort_direction: string().group(FILTERS),\n\n                    // Pagination\n                    skip: int().group(FILTERS),\n                    take: int().group(FILTERS),\n\n                    // Placement Testing\n                    placement_tests_only: bool(),\n\n                    // Display settings\n                    size: string().group(DISPLAY),\n                    template_name: string().group(DISPLAY),\n                    template_layout: string().group(DISPLAY),\n                    template_theme: string().group(DISPLAY),\n                    template_cta_style: string().group(DISPLAY),\n                    template_cta_text: string().group(DISPLAY),\n                    template_cta_color: string().group(DISPLAY),\n                    adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                    // Article metadata\n                    url_category: array().group(ARTICLE_META),\n                    url_keywords: array().group(ARTICLE_META),\n\n                    // Functional settings\n                    key: string().strip(), // don't need to resend key on all our requests\n                    no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                    proxy_url: string().strip(),\n                    expandable: bool().strip().default(true),\n                    disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                    disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                    backwards: string().strip() // internal flag indicating port from a deprecated widget\n                };\n            }\n\n            /**\n             * Gets the widget configuration formatted using settings, suitable for transmission\n             * @return {{filters: {}, display: {}, backfill: {}, article_meta: {}}}\n             */\n\n        }, {\n            key: \"getConfig\",\n            value: function getConfig() {\n                var _this11 = this;\n\n                var settings = this.getSettings();\n                var out = { filters: {}, display: {}, backfill: {}, article_meta: {} };\n                var backfillPattern = /^backfill_(.+)$/; // backfill_property\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this11.config[origKey];\n                    var key = origKey;\n                    var isBackfill = false;\n                    var group = null;\n\n                    // Get the property name if it was prefixed with backfill\n                    var matches = backfillPattern.exec(origKey);\n                    if (matches) {\n                        key = matches[1];\n                        isBackfill = true;\n                    }\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = isBackfill ? out.backfill : out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Core load process\n             */\n\n        }, {\n            key: \"load\",\n            value: function load() {\n                var _this12 = this;\n\n                // Set metric base data (stub for all future events emitted by the widget)\n                this._setMetricBase();\n\n                // Find out what we should display here\n                this._fetchContent(function (err) {\n                    if (err) {\n                        // Report the widget load as declined\n                        _this12._reportWidgetLoad(\"fetch failed: \" + err.statusCode /* istanbul ignore next: out of scope */ || err.toString());\n                    } else {\n                        // Merge display settings from response\n                        _this12._mergeResponseSettings();\n\n                        // Merge the referential data from the response\n                        _this12._updateBaseMetaFromResponse();\n\n                        // Handle rendering based on output type\n                        _this12._showContent();\n                    }\n                });\n            }\n\n            //endregion\n\n            //region Internal Helpers\n\n            /**\n             * Initializes the common metric data for events emitted by the placement\n             * @private\n             */\n\n        }, {\n            key: \"_setMetricBase\",\n            value: function _setMetricBase() {\n                var base = this._metricBase;\n                base.ch = Metrics.Channel.placement;\n                base.cx = this.config.backwards || 'auto';\n                base.key = this.config.key;\n                base.m = base.m || {};\n                base.m.wgid = this.instanceId;\n            }\n\n            /**\n             * Emits the widget impression event\n             * @param declined\n             * @private\n             */\n\n        }, {\n            key: \"_reportWidgetLoad\",\n            value: function _reportWidgetLoad(declined) {\n\n                // If this is declined, mark future events as declined too\n                this._metricBase.m.decl = declined || '0';\n\n                // Track impression\n                okanjo.metrics.create(this._metricBase).type(Metrics.Object.widget, Metrics.Event.impression).meta(this.getConfig()).element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport().send();\n            }\n\n            /**\n             * Executes the request for content to fill the placement\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_fetchContent\",\n            value: function _fetchContent(callback) {\n                var _this13 = this;\n\n                // Build request to api, starting with this placement config params\n                var query = this.getConfig();\n\n                // Extract the key\n                var key = this.config.key;\n\n                // Attach sid and referrer\n                if (okanjo.metrics.sid) query.sid = okanjo.metrics.msid;\n                query.filters.url_referrer = window.location.href;\n                query.wgid = this.instanceId;\n                query.pgid = okanjo.metrics.pageId;\n\n                // Send it\n                okanjo.net.request.post(okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live') + \"?key=\" + encodeURIComponent(key), query, function (err, res) {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: _this13 });\n                        _this13.setMarkup(''); // Don't show anything\n                        _this13.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        _this13._response = res;\n\n                        // Hook point for response handling\n                        _this13.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                });\n            }\n\n            /**\n             * Applies response filters and display settings into the widget configuration\n             * @private\n             */\n\n        }, {\n            key: \"_mergeResponseSettings\",\n            value: function _mergeResponseSettings() {\n                var _this14 = this;\n\n                var res = this._response;\n                var data = res.data || {};\n                var settings = data.settings || {};\n\n                if (settings.filters) {\n                    Object.keys(settings.filters).forEach(function (key) {\n                        _this14.config[key] = settings.filters[key];\n                    });\n                }\n\n                if (settings.display) {\n                    Object.keys(settings.display).forEach(function (key) {\n                        _this14.config[key] = settings.display[key];\n                    });\n                }\n            }\n\n            /**\n             * Applies response data to future metric events\n             * @private\n             */\n\n        }, {\n            key: \"_updateBaseMetaFromResponse\",\n            value: function _updateBaseMetaFromResponse() {\n                // Update the base metric data with info from the response\n                var data = (this._response || {}).data || {};\n                this._metricBase.m = this._metricBase.m || {};\n                var meta = this._metricBase.m;\n\n                // Article\n                if (data.article) meta.aid = data.article.id;\n\n                if (data.test && data.test.enabled) {\n                    meta.pten = 1;\n                    meta.ptid = data.test.id;\n                    meta.ptseed = data.test.seed;\n                } else {\n                    meta.pten = 0;\n                }\n            }\n\n            /**\n             * Beings the render process based on the response content\n             * @private\n             */\n\n        }, {\n            key: \"_showContent\",\n            value: function _showContent() {\n                var data = (this._response || {}).data || {};\n\n                // Known content types we can display\n                if (data.type === Placement.ContentTypes.products) {\n                    this._showProducts();\n                } else if (data.type === Placement.ContentTypes.articles) {\n                    this._showArticles();\n                } else if (data.type === Placement.ContentTypes.adx) {\n                    this._showADX();\n                } else {\n                    // Unknown response type!\n\n                    // Report the widget load as declined\n                    var msg = 'Unknown response content type: ' + data.type;\n                    okanjo.report(msg, { placement: this });\n                    this.setMarkup(''); // Don't show anything\n                    this.emit('error', msg);\n                    this._reportWidgetLoad(msg);\n                }\n            }\n\n            /**\n             * Generates the click url using the event, proxy_url, and additional params\n             * @param event\n             * @param url\n             * @param additionalUrlParams\n             * @return {*}\n             * @private\n             */\n\n        }, {\n            key: \"_getClickThroughURL\",\n            value: function _getClickThroughURL(event, url, additionalUrlParams) {\n                var joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n                // Tack on transfer params\n                additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n                additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n                additionalUrlParams.ok_ch = this._metricBase.ch;\n                additionalUrlParams.ok_cx = this._metricBase.cx;\n\n                url += joiner + Object.keys(additionalUrlParams).map(function (key) {\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(additionalUrlParams[key]);\n                }).join('&');\n\n                // Wrap the url if we're proxying\n                if (this.config.proxy_url) {\n                    url = this.config.proxy_url + encodeURIComponent(url);\n                }\n\n                // Set the url on the event\n                event.data({\n                    u: url\n                });\n\n                return event.toUrl();\n            }\n\n            /**\n             * Converts a resource's link into one suitable for tracking, making middle-click safe\n             * @param type\n             * @param resource\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: \"_handleResourceMouseDown\",\n            value: function _handleResourceMouseDown(type, resource, e) {\n                // Generate a new click id for this event\n                var clickId = okanjo.util.shortid();\n\n                // Start building the event\n                var event = okanjo.metrics.create(this._metricBase, {\n                    id: resource.id\n                }).type(type, Metrics.Event.interaction).meta(this.getConfig()).meta({ cid: clickId }).meta({ bf: resource.backfill ? 1 : 0 }).event(e).element(e.currentTarget).viewport();\n\n                // Pull the proper params out of the resource depending on it's type\n                var trackParam = 'url_track_param';\n                var urlParam = 'url';\n\n                if (type === Metrics.Object.product) {\n                    trackParam = 'buy_url_track_param';\n                    urlParam = 'buy_url';\n                }\n\n                // Attach the campaign tracking identifier\n                var additionalParams = {\n                    ok_cid: clickId\n                };\n                if (resource[trackParam]) additionalParams[resource[trackParam]] = (okanjo.metrics.sid || 'unknown') + ':' + clickId;\n\n                // Update the link with the event data\n                event.data({ ea: Metrics.Action.click });\n                e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n                // Cache this on the product\n                resource._clickId = clickId;\n                resource._event = event;\n                resource._additionalParams = additionalParams;\n            }\n\n            /**\n             * Gets the template to use, accounting for configured preference if available\n             * @param contentType\n             * @param defaultName\n             * @return {string}\n             * @private\n             */\n\n        }, {\n            key: \"_getTemplate\",\n            value: function _getTemplate(contentType, defaultName) {\n                var templateName = this.config.template_name;\n                if (!templateName || !okanjo.ui.engine.isTemplateRegistered(contentType + \".\" + templateName)) {\n                    templateName = defaultName;\n                }\n                return contentType + \".\" + templateName;\n            }\n\n            /**\n             * Enforces size/layout/cta restrictions\n             * @private\n             */\n\n        }, {\n            key: \"_enforceLayoutOptions\",\n            value: function _enforceLayoutOptions() {\n                // Enforce format restrictions\n                if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                    this.config.template_layout = \"list\";\n                    this.config.template_cta_style = \"link\";\n                } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                    this.config.template_layout = \"list\";\n                }\n            }\n\n            /**\n             * Register a custom\n             * @private\n             */\n\n        }, {\n            key: \"_registerCustomBranding\",\n            value: function _registerCustomBranding(prefix, buttonClass) {\n                var brandColor = this.config.template_cta_color;\n                if (brandColor) {\n                    var brandCSS = void 0,\n                        brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                    brandCSS = \"\\n                    \" + prefix + \"-block2.\" + brandCSSId + \" \" + prefix + \"-\" + buttonClass + \" { color: \" + brandColor + \";} \\n                    \" + prefix + \"-block2.\" + brandCSSId + \".okanjo-cta-style-button \" + prefix + \"-\" + buttonClass + \" { border: 1px solid \" + brandColor + \"; } \\n                    \" + prefix + \"-block2.\" + brandCSSId + \".okanjo-cta-style-button \" + prefix + \"-\" + buttonClass + \":hover { background: \" + brandColor + \"; } \\n                \";\n\n                    okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                    okanjo.ui.engine.ensureCss(brandCSSId);\n                }\n            }\n\n            //endregion\n\n            //region Product Handling\n\n            /**\n             * Renders a product response\n             * @private\n             */\n\n        }, {\n            key: \"_showProducts\",\n            value: function _showProducts() {\n                var _this15 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // - render\n\n                // Format products\n                data.results.forEach(function (offer, index) {\n                    // Disable inline buy if configured to do so\n                    if (_this15.config.disable_inline_buy) offer.inline_buy_url = null;\n                    if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                    // Set primary image\n                    offer._image_url = offer.image_urls ? offer.image_urls[0] : '';\n\n                    // Escape buy url (fixme: does not include proxy_url!)\n                    offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                    // Make price tag pretty\n                    offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                    offer._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break it */\n                    if (id && index >= 0) {\n                        var product = _this15._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break it */\n                        if (product) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this15._handleResourceMouseDown.bind(_this15, Metrics.Object.product, product));\n                            a.addEventListener('click', _this15._handleProductClick.bind(_this15, product));\n\n                            // Track impression\n                            okanjo.metrics.create(_this15._metricBase, { id: product.id }).type(Metrics.Object.product, Metrics.Event.impression).meta(_this15.getConfig()).meta({ bf: product.backfill ? 1 : 0 }).element(a).send();\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-resource-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the product click process\n             * @param product\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: \"_handleProductClick\",\n            value: function _handleProductClick(product, e) {\n\n                // Update the event\n                if (!product._event || !product._additionalParams || !product._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.product, product, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = product._event,\n                    additionalParams = product._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Determine what we're doing - native ux or redirect\n                var showNativeBuyUx = !!product.inline_buy_url,\n                    showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile();\n\n                // Show the inline buy experience or redirect\n                if (showPopupNativeBuyUx) {\n                    // Mobile native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    //\n                    // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                    // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                    // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                    //\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ popup: 'true' });\n\n                    // Get the frame url\n                    var url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Open the window or redirect if that failed\n                    this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                    /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                    if (!this._popupFrame) {\n                        // Fallback to just replacing the window with the target, since popups don't work :(\n                        okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                        window.location.href = url;\n                    }\n                } else if (showNativeBuyUx) {\n                    // Regular native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-inline-buy-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto'\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Check whether we're allowed to expand past the bounds of the placement\n                    additionalParams.expandable = this.config.expandable ? 1 : 0;\n                    if (!this.config.expandable) {\n                        var parent = this.element.querySelector('.okanjo-expansion-root');\n                        /* istanbul ignore else: custom templates could break this */\n                        if (parent) {\n                            frame.className += ' okanjo-ad-in-unit';\n                            frame.setAttribute('height', \"100%\");\n                            frame.setAttribute('width', \"100%\");\n\n                            parent.appendChild(frame);\n\n                            var size = okanjo.ui.getElementSize(parent);\n                            additionalParams.frame_height = size.height;\n                            additionalParams.frame_width = size.width;\n                            /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                            if (this.config.size) additionalParams.ad_size = this.config.size;\n                        }\n                    }\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                    // Set the frame url\n                    frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Show the modal if it was not internally expanded\n                    if (!frame.parentNode) {\n                        okanjo.ui.modal.show(frame);\n                    }\n                } else {\n                    // Update the link a second time, just in case the data changed\n                    e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n                }\n            }\n\n            //endregion\n\n            //region Article Handling\n\n            /**\n             * Renders an article response\n             * @private\n             */\n\n        }, {\n            key: \"_showArticles\",\n            value: function _showArticles() {\n                var _this16 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // - render\n\n                // Format articles\n                data.results.forEach(function (article, index) {\n                    // Escape url (fixme: does not include proxy_url!)\n                    article._escaped_url = encodeURIComponent(article.url);\n                    article._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break this */\n                    if (id && index >= 0) {\n                        var article = _this16._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break this */\n                        if (article) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this16._handleResourceMouseDown.bind(_this16, Metrics.Object.article, article));\n                            a.addEventListener('click', _this16._handleArticleClick.bind(_this16, article));\n\n                            // Track impression\n                            okanjo.metrics.create(_this16._metricBase, { id: article.id }).type(Metrics.Object.article, Metrics.Event.impression).meta(_this16.getConfig()).meta({ bf: article.backfill ? 1 : 0 }).element(a).send();\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-resource-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the article click process\n             * @param article\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: \"_handleArticleClick\",\n            value: function _handleArticleClick(article, e) {\n                // Update the event\n                if (!article._event || !article._additionalParams || !article._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.article, article, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = article._event,\n                    additionalParams = article._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n            }\n\n            //endregion\n\n            //region ADX Handling\n\n            /**\n             * Renders a Google DFP/ADX response\n             * @private\n             */\n\n        }, {\n            key: \"_showADX\",\n            value: function _showADX() {\n                var _this17 = this;\n\n                var data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n                // Get the template we should use to render the google ad\n                var templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n                // Determine what size ad we can place here\n                var size = null;\n                if (this.config.size) {\n                    if (Placement.Sizes[this.config.size]) {\n                        // Defined size, use these known dimensions\n                        size = Placement.Sizes[this.config.size];\n                    } else {\n                        var match = /^([0-9]+)x([0-9]+)$/i.exec(this.config.size);\n                        if (match) {\n                            size = { width: match[1], height: match[2] };\n                        }\n                    }\n                }\n\n                // No given size, we need to guess\n                if (!size) size = Placement.Sizes.default;\n\n                // If we're using okanjo's ad slot, then track the impression\n                // otherwise decline it because we're just passing through to the publishers account\n                var adUnitPath = '/90447967/okanjo:<publisher>';\n                if (data.settings.display && data.settings.display.adx_unit_path) {\n                    adUnitPath = data.settings.display.adx_unit_path;\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad(); // accept it because we're serving out of our exchange\n                }\n\n                // Pass along what the template needs to know to display the ad\n                var renderContext = {\n                    size: size,\n                    adUnitPath: adUnitPath\n                };\n\n                // Render the container\n                this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n                // Insert the actual ad into the container\n                var container = this.element.querySelector('.okanjo-adx-container');\n                /* istanbul ignore else: custom templates could break this */\n                if (container) {\n\n                    // Make the frame element\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-adx-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto',\n                        width: size.width,\n                        height: size.height\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Attach to dOM\n                    container.appendChild(frame);\n\n                    // Build a click-through tracking url so we know when an ad is clicked too\n                    var clickUrl = okanjo.metrics.create(this._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction).meta(this.getConfig()).meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    }).element(frame).toUrl();\n\n                    // Transfer references to the frame window\n                    // frame.contentWindow.okanjo = okanjo;\n                    // frame.contentWindow.placement = this;\n                    frame.contentWindow.trackImpression = function () {\n                        okanjo.metrics.create(_this17._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.impression).meta(_this17.getConfig()).meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        }).element(frame).send();\n                    };\n\n                    // Load Google ad!\n                    frame.contentWindow.document.open();\n                    frame.contentWindow.document.write(\"<html><head><style type=\\\"text/css\\\">html,body {margin: 0; padding: 0;}</style></head><body>\\n<\" + (\"script type=\\\"text/javascript\\\" src=\\\"https://www.googletagservices.com/tag/js/gpt.js\\\">\\n    googletag.pubads().addEventListener('slotRenderEnded', function(e) { \\n        trackImpression(e);\\n    });\\n    googletag.pubads()\\n        .definePassback(\\\"\" + adUnitPath.replace(/\"/g, '\\\\\"') + \"\\\", [[\" + size.width + \", \" + size.height + \"]])\\n        .setClickUrl(\\\"\" + clickUrl + \"&u=\\\")\\n        .display();\\n<\") + \"/script>\\n</body></html>\");\n                    frame.contentWindow.document.close();\n\n                    // TODO future event hooks\n                    // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                    // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                    // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                    // Impression tracking is done from within the iframe. Crazy, right?\n                }\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            //endregion\n\n        }]);\n\n        return Placement;\n    }(okanjo._Widget);\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n\n\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle: { width: 300, height: 250 }, // aka: sidekick\n        leaderboard: { width: 728, height: 90 },\n        large_mobile_banner: { width: 320, height: 100 },\n        half_page: { width: 300, height: 600 }, // aka: filmstrip, sidekick\n\n        // IAB / Others\n        billboard: { width: 970, height: 250 }, // aka: sidekick\n        button_2: { width: 120, height: 60 },\n        micro_bar: { width: 88, height: 31 },\n        portrait: { width: 300, height: 1050 },\n        rectangle: { width: 180, height: 150 },\n        super_leaderboard: { width: 970, height: 90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper: { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard: { width: 320, height: 50 },\n        small_square: { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1: { width: 120, height: 90 },\n        full_banner: { width: 468, height: 60 },\n        half_banner: { width: 234, height: 60 },\n        large_rectangle: { width: 336, height: 280 },\n        pop_under: { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper: { width: 120, height: 600 },\n        square: { width: 250, height: 250 },\n        square_button: { width: 125, height: 125 },\n        vertical_banner: { width: 120, height: 240 },\n        vertical_rectangle: { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n\n    var Product = function (_okanjo$Placement) {\n        _inherits(Product, _okanjo$Placement);\n\n        function Product(element, options) {\n            _classCallCheck(this, Product);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this18 = _possibleConstructorReturn(this, (Product.__proto__ || Object.getPrototypeOf(Product)).call(this, element, options));\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this18 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this18.config.no_init;\n                _this18.init();\n            }\n            return _this18;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Product, [{\n            key: \"_setCompatibilityOptions\",\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Product';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Set filters based on old \"mode\"\n                if (this.config.mode === 'sense') {\n                    // sense\n                    this.config.url = this.config.url || 'referrer';\n                    this.config.take = this.config.take || 5;\n                } else if (this.config.mode === 'single') {\n                    // single\n                    this.config.url = null;\n                    if (this.config.id) this.config.ids = [this.config.id];\n                    this.config.take = 1;\n                    delete this.config.id;\n                } else {\n                    // browse\n                    this.config.url = null;\n                    this.config.take = this.config.take || 25;\n                }\n                delete this.config.mode;\n\n                // Sold by changed to store name\n                if (this.config.sold_by) {\n                    this.config.store_name = this.config.sold_by;\n                    delete this.config.sold_by;\n                }\n\n                // Selectors is now url_selectors\n                if (this.config.selectors) {\n                    this.config.url_selectors = this.config.selectors;\n                    delete this.config.selectors;\n                }\n\n                // Marketplace_id is no longer a thing, closest analog are properties.\n                if (this.config.marketplace_id) {\n                    this.config.property_id = this.config.marketplace_id;\n                    delete this.config.marketplace_id;\n                }\n\n                // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n                if (this.config.marketplace_status === 'testing') {\n                    this.config.sandbox = true;\n                }\n                delete this.config.marketplace_status;\n\n                // Deprecated\n                delete this.config.suboptimal;\n                delete this.config.text;\n            }\n        }]);\n\n        return Product;\n    }(okanjo.Placement);\n\n    return okanjo.Product = Product;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n\n    var Ad = function (_okanjo$Placement2) {\n        _inherits(Ad, _okanjo$Placement2);\n\n        function Ad(element, options) {\n            _classCallCheck(this, Ad);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this19 = _possibleConstructorReturn(this, (Ad.__proto__ || Object.getPrototypeOf(Ad)).call(this, element, options));\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this19 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this19.config.no_init;\n                _this19.init();\n            }\n            return _this19;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Ad, [{\n            key: \"_setCompatibilityOptions\",\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Ad';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Id / single mode is now ids\n                this.config.url = null;\n                if (this.config.id) {\n                    this.config.ids = [this.config.id];\n                } else {\n                    okanjo.warn('Ad widget should have parameter `id` set.');\n                }\n                this.config.take = 1;\n                delete this.config.id;\n\n                // Content is automatically determined whether the placement element contains children\n                delete this.config.content;\n            }\n        }]);\n\n        return Ad;\n    }(okanjo.Placement);\n\n    return okanjo.Ad = Ad;\n})(window);\n/* jshint ignore:start */\n\n(function () {\n\n    /*!\n     * mustache.js - Logic-less {{mustache}} templates with JavaScript\n     * http://github.com/janl/mustache.js\n     */\n\n    /*global define: false Mustache: true*/\n\n    (function defineMustache(global, factory) {\n        if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && exports && typeof exports.nodeName !== 'string') {\n            factory(exports); // CommonJS\n        } else if (typeof define === 'function' && define.amd) {\n            define(['exports'], factory); // AMD\n        } else {\n            global.Mustache = {};\n            factory(global.Mustache); // script, wsh, asp\n        }\n    })(this, function mustacheFactory(mustache) {\n\n        var objectToString = Object.prototype.toString;\n        var isArray = Array.isArray || function isArrayPolyfill(object) {\n            return objectToString.call(object) === '[object Array]';\n        };\n\n        function isFunction(object) {\n            return typeof object === 'function';\n        }\n\n        /**\n         * More correct typeof string handling array\n         * which normally returns typeof 'object'\n         */\n        function typeStr(obj) {\n            return isArray(obj) ? 'array' : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n        }\n\n        function escapeRegExp(string) {\n            return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        /**\n         * Null safe way of checking whether or not an object,\n         * including its prototype, has a given property\n         */\n        function hasProperty(obj, propName) {\n            return obj != null && (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === 'object' && propName in obj;\n        }\n\n        // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n        // See https://github.com/janl/mustache.js/issues/189\n        var regExpTest = RegExp.prototype.test;\n        function testRegExp(re, string) {\n            return regExpTest.call(re, string);\n        }\n\n        var nonSpaceRe = /\\S/;\n        function isWhitespace(string) {\n            return !testRegExp(nonSpaceRe, string);\n        }\n\n        var entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n\n        function escapeHtml(string) {\n            return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n                return entityMap[s];\n            });\n        }\n\n        var whiteRe = /\\s*/;\n        var spaceRe = /\\s+/;\n        var equalsRe = /\\s*=/;\n        var curlyRe = /\\s*\\}/;\n        var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n        /**\n         * Breaks up the given `template` string into a tree of tokens. If the `tags`\n         * argument is given here it must be an array with two string values: the\n         * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n         * course, the default is to use mustaches (i.e. mustache.tags).\n         *\n         * A token is an array with at least 4 elements. The first element is the\n         * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n         * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n         * all text that appears outside a symbol this element is \"text\".\n         *\n         * The second element of a token is its \"value\". For mustache tags this is\n         * whatever else was inside the tag besides the opening symbol. For text tokens\n         * this is the text itself.\n         *\n         * The third and fourth elements of the token are the start and end indices,\n         * respectively, of the token in the original template.\n         *\n         * Tokens that are the root node of a subtree contain two more elements: 1) an\n         * array of tokens in the subtree and 2) the index in the original template at\n         * which the closing tag for that section begins.\n         */\n        function parseTemplate(template, tags) {\n            if (!template) return [];\n\n            var sections = []; // Stack to hold section tokens\n            var tokens = []; // Buffer to hold the tokens\n            var spaces = []; // Indices of whitespace tokens on the current line\n            var hasTag = false; // Is there a {{tag}} on the current line?\n            var nonSpace = false; // Is there a non-space char on the current line?\n\n            // Strips all whitespace tokens array for the current line\n            // if there was a {{#tag}} on it and otherwise only space.\n            function stripSpace() {\n                if (hasTag && !nonSpace) {\n                    while (spaces.length) {\n                        delete tokens[spaces.pop()];\n                    }\n                } else {\n                    spaces = [];\n                }\n\n                hasTag = false;\n                nonSpace = false;\n            }\n\n            var openingTagRe, closingTagRe, closingCurlyRe;\n            function compileTags(tagsToCompile) {\n                if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n                if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n\n                openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n                closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n                closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n            }\n\n            compileTags(tags || mustache.tags);\n\n            var scanner = new Scanner(template);\n\n            var start, type, value, chr, token, openSection;\n            while (!scanner.eos()) {\n                start = scanner.pos;\n\n                // Match any text between tags.\n                value = scanner.scanUntil(openingTagRe);\n\n                if (value) {\n                    for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n                        chr = value.charAt(i);\n\n                        if (isWhitespace(chr)) {\n                            spaces.push(tokens.length);\n                        } else {\n                            nonSpace = true;\n                        }\n\n                        tokens.push(['text', chr, start, start + 1]);\n                        start += 1;\n\n                        // Check for whitespace on the current line.\n                        if (chr === '\\n') stripSpace();\n                    }\n                }\n\n                // Match the opening tag.\n                if (!scanner.scan(openingTagRe)) break;\n\n                hasTag = true;\n\n                // Get the tag type.\n                type = scanner.scan(tagRe) || 'name';\n                scanner.scan(whiteRe);\n\n                // Get the tag value.\n                if (type === '=') {\n                    value = scanner.scanUntil(equalsRe);\n                    scanner.scan(equalsRe);\n                    scanner.scanUntil(closingTagRe);\n                } else if (type === '{') {\n                    value = scanner.scanUntil(closingCurlyRe);\n                    scanner.scan(curlyRe);\n                    scanner.scanUntil(closingTagRe);\n                    type = '&';\n                } else {\n                    value = scanner.scanUntil(closingTagRe);\n                }\n\n                // Match the closing tag.\n                if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n                token = [type, value, start, scanner.pos];\n                tokens.push(token);\n\n                if (type === '#' || type === '^') {\n                    sections.push(token);\n                } else if (type === '/') {\n                    // Check section nesting.\n                    openSection = sections.pop();\n\n                    if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n                    if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n                } else if (type === 'name' || type === '{' || type === '&') {\n                    nonSpace = true;\n                } else if (type === '=') {\n                    // Set the tags for the next time around.\n                    compileTags(value);\n                }\n            }\n\n            // Make sure there are no open sections when we're done.\n            openSection = sections.pop();\n\n            if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n            return nestTokens(squashTokens(tokens));\n        }\n\n        /**\n         * Combines the values of consecutive text tokens in the given `tokens` array\n         * to a single token.\n         */\n        function squashTokens(tokens) {\n            var squashedTokens = [];\n\n            var token, lastToken;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                if (token) {\n                    if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n                        lastToken[1] += token[1];\n                        lastToken[3] = token[3];\n                    } else {\n                        squashedTokens.push(token);\n                        lastToken = token;\n                    }\n                }\n            }\n\n            return squashedTokens;\n        }\n\n        /**\n         * Forms the given array of `tokens` into a nested tree structure where\n         * tokens that represent a section have two additional items: 1) an array of\n         * all tokens that appear in that section and 2) the index in the original\n         * template that represents the end of that section.\n         */\n        function nestTokens(tokens) {\n            var nestedTokens = [];\n            var collector = nestedTokens;\n            var sections = [];\n\n            var token, section;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                switch (token[0]) {\n                    case '#':\n                    case '^':\n                        collector.push(token);\n                        sections.push(token);\n                        collector = token[4] = [];\n                        break;\n                    case '/':\n                        section = sections.pop();\n                        section[5] = token[2];\n                        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n                        break;\n                    default:\n                        collector.push(token);\n                }\n            }\n\n            return nestedTokens;\n        }\n\n        /**\n         * A simple string scanner that is used by the template parser to find\n         * tokens in template strings.\n         */\n        function Scanner(string) {\n            this.string = string;\n            this.tail = string;\n            this.pos = 0;\n        }\n\n        /**\n         * Returns `true` if the tail is empty (end of string).\n         */\n        Scanner.prototype.eos = function eos() {\n            return this.tail === '';\n        };\n\n        /**\n         * Tries to match the given regular expression at the current position.\n         * Returns the matched text if it can match, the empty string otherwise.\n         */\n        Scanner.prototype.scan = function scan(re) {\n            var match = this.tail.match(re);\n\n            if (!match || match.index !== 0) return '';\n\n            var string = match[0];\n\n            this.tail = this.tail.substring(string.length);\n            this.pos += string.length;\n\n            return string;\n        };\n\n        /**\n         * Skips all text until the given regular expression can be matched. Returns\n         * the skipped string, which is the entire tail if no match can be made.\n         */\n        Scanner.prototype.scanUntil = function scanUntil(re) {\n            var index = this.tail.search(re),\n                match;\n\n            switch (index) {\n                case -1:\n                    match = this.tail;\n                    this.tail = '';\n                    break;\n                case 0:\n                    match = '';\n                    break;\n                default:\n                    match = this.tail.substring(0, index);\n                    this.tail = this.tail.substring(index);\n            }\n\n            this.pos += match.length;\n\n            return match;\n        };\n\n        /**\n         * Represents a rendering context by wrapping a view object and\n         * maintaining a reference to the parent context.\n         */\n        function Context(view, parentContext) {\n            this.view = view;\n            this.cache = { '.': this.view };\n            this.parent = parentContext;\n        }\n\n        /**\n         * Creates a new context using the given view with this context\n         * as the parent.\n         */\n        Context.prototype.push = function push(view) {\n            return new Context(view, this);\n        };\n\n        /**\n         * Returns the value of the given name in this context, traversing\n         * up the context hierarchy if the value is absent in this context's view.\n         */\n        Context.prototype.lookup = function lookup(name) {\n            var cache = this.cache;\n\n            var value;\n            if (cache.hasOwnProperty(name)) {\n                value = cache[name];\n            } else {\n                var context = this,\n                    names,\n                    index,\n                    lookupHit = false;\n\n                while (context) {\n                    if (name.indexOf('.') > 0) {\n                        value = context.view;\n                        names = name.split('.');\n                        index = 0;\n\n                        /**\n                         * Using the dot notion path in `name`, we descend through the\n                         * nested objects.\n                         *\n                         * To be certain that the lookup has been successful, we have to\n                         * check if the last object in the path actually has the property\n                         * we are looking for. We store the result in `lookupHit`.\n                         *\n                         * This is specially necessary for when the value has been set to\n                         * `undefined` and we want to avoid looking up parent contexts.\n                         **/\n                        while (value != null && index < names.length) {\n                            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);\n\n                            value = value[names[index++]];\n                        }\n                    } else {\n                        value = context.view[name];\n                        lookupHit = hasProperty(context.view, name);\n                    }\n\n                    if (lookupHit) break;\n\n                    context = context.parent;\n                }\n\n                cache[name] = value;\n            }\n\n            if (isFunction(value)) value = value.call(this.view);\n\n            return value;\n        };\n\n        /**\n         * A Writer knows how to take a stream of tokens and render them to a\n         * string, given a context. It also maintains a cache of templates to\n         * avoid the need to parse the same template twice.\n         */\n        function Writer() {\n            this.cache = {};\n        }\n\n        /**\n         * Clears all cached templates in this writer.\n         */\n        Writer.prototype.clearCache = function clearCache() {\n            this.cache = {};\n        };\n\n        /**\n         * Parses and caches the given `template` and returns the array of tokens\n         * that is generated from the parse.\n         */\n        Writer.prototype.parse = function parse(template, tags) {\n            var cache = this.cache;\n            var tokens = cache[template];\n\n            if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);\n\n            return tokens;\n        };\n\n        /**\n         * High-level method that is used to render the given `template` with\n         * the given `view`.\n         *\n         * The optional `partials` argument may be an object that contains the\n         * names and templates of partials that are used in the template. It may\n         * also be a function that is used to load partial templates on the fly\n         * that takes a single argument: the name of the partial.\n         */\n        Writer.prototype.render = function render(template, view, partials) {\n            var tokens = this.parse(template);\n            var context = view instanceof Context ? view : new Context(view);\n            return this.renderTokens(tokens, context, partials, template);\n        };\n\n        /**\n         * Low-level method that renders the given array of `tokens` using\n         * the given `context` and `partials`.\n         *\n         * Note: The `originalTemplate` is only ever used to extract the portion\n         * of the original template that was contained in a higher-order section.\n         * If the template doesn't use higher-order sections, this argument may\n         * be omitted.\n         */\n        Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {\n            var buffer = '';\n\n            var token, symbol, value;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                value = undefined;\n                token = tokens[i];\n                symbol = token[0];\n\n                if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);\n\n                if (value !== undefined) buffer += value;\n            }\n\n            return buffer;\n        };\n\n        Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {\n            var self = this;\n            var buffer = '';\n            var value = context.lookup(token[1]);\n\n            // This function is used to render an arbitrary template\n            // in the current context by higher-order sections.\n            function subRender(template) {\n                return self.render(template, context, partials);\n            }\n\n            if (!value) return;\n\n            if (isArray(value)) {\n                for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n                    buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n                }\n            } else if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === 'object' || typeof value === 'string' || typeof value === 'number') {\n                buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n            } else if (isFunction(value)) {\n                if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n                // Extract the portion of the original template that the section contains.\n                value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n                if (value != null) buffer += value;\n            } else {\n                buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n            }\n            return buffer;\n        };\n\n        Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {\n            var value = context.lookup(token[1]);\n\n            // Use JavaScript's definition of falsy. Include empty arrays.\n            // See https://github.com/janl/mustache.js/issues/186\n            if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);\n        };\n\n        Writer.prototype.renderPartial = function renderPartial(token, context, partials) {\n            if (!partials) return;\n\n            var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n            if (value != null) return this.renderTokens(this.parse(value), context, partials, value);\n        };\n\n        Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return value;\n        };\n\n        Writer.prototype.escapedValue = function escapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return mustache.escape(value);\n        };\n\n        Writer.prototype.rawValue = function rawValue(token) {\n            return token[1];\n        };\n\n        mustache.name = 'mustache.js';\n        mustache.version = '2.3.0';\n        mustache.tags = ['{{', '}}'];\n\n        // All high-level mustache.* functions use this writer.\n        var defaultWriter = new Writer();\n\n        /**\n         * Clears all cached templates in the default writer.\n         */\n        mustache.clearCache = function clearCache() {\n            return defaultWriter.clearCache();\n        };\n\n        /**\n         * Parses and caches the given template in the default writer and returns the\n         * array of tokens it contains. Doing this ahead of time avoids the need to\n         * parse templates on the fly as they are rendered.\n         */\n        mustache.parse = function parse(template, tags) {\n            return defaultWriter.parse(template, tags);\n        };\n\n        /**\n         * Renders the `template` with the given `view` and `partials` using the\n         * default writer.\n         */\n        mustache.render = function render(template, view, partials) {\n            if (typeof template !== 'string') {\n                throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n            }\n\n            return defaultWriter.render(template, view, partials);\n        };\n\n        // This is here for backwards compatibility with 0.4.x.,\n        /*eslint-disable */ // eslint wants camel cased function name\n        mustache.to_html = function to_html(template, view, partials, send) {\n            /*eslint-enable*/\n\n            var result = mustache.render(template, view, partials);\n\n            if (isFunction(send)) {\n                send(result);\n            } else {\n                return result;\n            }\n        };\n\n        // Export the escaping function so that the user may override it.\n        // See https://github.com/janl/mustache.js/issues/244\n        mustache.escape = escapeHtml;\n\n        // Export these mainly for testing, but also for advanced usage.\n        mustache.Scanner = Scanner;\n        mustache.Context = Context;\n        mustache.Writer = Writer;\n\n        return mustache;\n    });\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */\nreturn okanjo;\n}));\n","\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nconst okanjo = (function(window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    const SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    const CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    const AGENT = window.navigator.userAgent;\n    const ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    const MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    const NOOP = () => {};\n    const Console = window.console;\n\n    // Place to pull defaults, if already set\n    const settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    const okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"%%OKANJO_VERSION\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: (...args) => {\n            let err = args.find((arg) => arg instanceof Error);\n            if (!err) {\n                let messageIndex = args.findIndex((arg) => typeof arg === \"string\");\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                let stack = (new Error()).stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter((a) => a !== err);\n            }\n\n            Console.error(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: (message, ...args) => {\n            const err = new Error(message);\n\n            Console.warn(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: (selector, parent) => {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: (route, params, env) => {\n            if (params) {\n                Object.keys(params).forEach((key) => {\n                    route = route.replace(`:${key}`, params[key]+\"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: (val) => val === null || val === undefined || (typeof val === \"string\" && val.trim().length === 0),\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: () => {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: (includeHashArguments) => {\n\n            const split = (query) => {\n                query = query || \"\";\n                const params = {};\n                const parts = query.split('&');\n                parts.forEach((part) => {\n                    const eqIndex = part.indexOf('=');\n                    let key, value;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            const queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            const hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach((key) => queryArgs[key] = hashArgs[key]);\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = (mixed, out) => {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map((val) => okanjo.util.deepClone(val)));\n        } else if (typeof mixed === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach((key) => {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = (input, options = {}) => {\n        const output = {};\n\n        if (input !== undefined && input !== null) {\n            Object\n                .keys(input)\n                .forEach((key) => {\n                    // Convert object ids to hex strings\n                    if (input[key] instanceof Date) {\n                        if (options.dateToIso) {\n                            output[key] = input[key].toISOString(); // convert to iso\n                        } else {\n                            output[key] = input[key]; // as-is\n                        }\n                    } else if (typeof input[key] === 'object' && input[key] !== null) {\n                        // Allow ignoring arrays if desired\n                        if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                            output[key] = input[key];\n                        } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                            output[key] = input[key].join(',');\n                        } else {\n                            // Make child objects flat too (always returns object so Object.keys is safe)\n                            const childObject = okanjo.util.flatten(input[key], options);\n                            Object\n                                .keys(childObject)\n                                .forEach((childKey) => {\n                                    output[key + '_' + childKey] = childObject[childKey];\n                                })\n                            ;\n                        }\n                    } else {\n                        // Copy value references\n                        output[key] = input[key];\n                    }\n                })\n            ;\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = (function(clusterWorkerId) {\n\n        const shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n\n            crypto = window.crypto || window.msCrypto || (typeof require === \"function\" && require('crypto')),\n\n            randomByte = () => {\n                /* istanbul ignore next: platform diffs out of scope */\n                if (crypto && crypto.randomBytes) {\n                    return crypto.randomBytes(1)[0] & 0x30;\n                } else if (!crypto || !crypto.getRandomValues) {\n                    return Math.floor(Math.random() * 256) & 0x30;\n                }\n                /* istanbul ignore next: platform diffs out of scope */\n                const dest = new Uint8Array(1);\n                /* istanbul ignore next: platform diffs out of scope */\n                crypto.getRandomValues(dest);\n                /* istanbul ignore next: platform diffs out of scope */\n                return dest[0] & 0x30;\n            },\n\n            encode = (number) => {\n                let loopCounter = 0,\n                    done,\n                    str = '';\n\n                while (!done) {\n                    str = str + shuffled[ ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() ];\n                    done = number < (Math.pow(16, loopCounter + 1 ) );\n                    loopCounter++;\n                }\n                return str;\n            },\n\n            // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n            // This number should be updated every year or so to keep the generated id short.\n            // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n            REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        let counter,\n            previousSeconds;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function() {\n            let str = '',\n                seconds = Math.floor(((new Date()).getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    })();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: () => {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: (element, includeMargin) => {\n            const size = {\n                height: element.offsetHeight,\n                width : element.offsetWidth\n            };\n            const style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: () => {\n            const body = document.querySelector('body');\n            const html = document.documentElement;\n\n            return {\n                w: Math.max(\n                    body.scrollWidth,\n                    body.offsetWidth,\n                    html.clientWidth,\n                    html.scrollWidth,\n                    html.offsetWidth\n                ),\n\n                h: Math.max(\n                    body.scrollHeight,\n                    body.offsetHeight,\n                    html.clientHeight,\n                    html.scrollHeight,\n                    html.offsetHeight\n                )\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: () => {\n            const element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */: document.body;\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            const inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            const isMobileZoom = (inWidth && width > inWidth) || (inHeight && height > inHeight);\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: (event) => {\n            const ex = event.pageX;\n            const ey = event.pageY;\n            const body = document.body;\n            const el = document.documentElement;\n            const scrollLeft = 'scrollLeft';\n            const scrollTop = 'scrollTop';\n            const type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: (element) => {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            const err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                let rect = element.getBoundingClientRect();\n                let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    x1: rect.left + pos.x,\n                    y1: rect.top + pos.y,\n                    x2: rect.right + pos.x,\n                    y2: rect.bottom + pos.y\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0\n                };\n            }\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function(element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        const parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        let text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000, // Safety switch to bust out of the loop in the event something goes terribly wrong\n            replacer = (match) => {\n                /* istanbul ignore next: n/a to jsdom */\n                replacedText = match.substr(0, match.length-3) + replacedText;\n                /* istanbul ignore next: n/a to jsdom */\n                return '...';\n            };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && (safety-- > 0)) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            let content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class','okanjo-ellipses');\n            span.setAttribute('class','okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length-3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length-3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n\n})(window, document);","\"use strict\";\n\n(function(window) {\n\n    const JSON_TEST = /^application\\/json/;\n    const okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        const req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        let calledBack = false;\n\n        // Normalized done handler\n        const done = function(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function(e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function(e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    let res;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST','PUT','PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    const encode = (val) => {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent(''+val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    const getKey = (key, keyPrefix) => {\n        if (keyPrefix) {\n            return `${keyPrefix}[${encode(key)}]`;\n        } else {\n            return encode(key)\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = (obj, keyPrefix) => {\n        let pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach((v) => pairs.push(getKey(key, keyPrefix) + '=' + encode(v))); // Does not do that PHP garbage with key[]=val\n            } else if (typeof value === \"object\" && value !== null) {\n                // Recurse\n                let res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: (cookieName, value, expireDays) => {\n            const expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            const expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            const path = \" Path=/\";\n            const cookieValue = `${encodeURI(value)};${expires}${path}`;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: (cookieName) => {\n            let output = null;\n            document.cookie\n                .split(\";\")\n                .find((cookie) => {\n                    let nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                    let value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                    if (nameTest === cookieName) {\n                        output = decodeURI(value);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                })\n            ;\n            return output;\n        }\n    };\n\n})(window, document);","\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n    class TemplateEngine {\n\n        constructor() {\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n        registerTemplate(name, template, beforeRender, options) {\n\n            if (typeof template === \"object\") {\n                //noinspection JSValidateTypes\n                if (template.nodeType === undefined) {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                } else {\n                    template = template.innerHTML;\n                    okanjo.lib.Mustache.parse(template);\n                }\n            } else if (typeof template !== \"string\") {\n                throw new Error('Parameter template must be a string or a DOM element');\n            }\n\n            // Shift options if only have 3 params\n            if (arguments.length === 3 && typeof beforeRender === \"object\") {\n                options = beforeRender;\n                beforeRender = null;\n            } else {\n                options = options || {};\n            }\n\n            if (beforeRender && typeof beforeRender !== \"function\") {\n                throw new Error('Parameter beforeRender must be a function');\n            }\n\n            // Assign the template\n            this._templates[name] = {\n                markup: template,\n                options,\n                beforeRender\n            };\n        }\n\n        /**\n         * Registers a CSS payload for use\n         * @param name\n         * @param css\n         * @param options\n         */\n        registerCss(name, css, options) {\n            options = options || {};\n\n            if (typeof css === \"object\") {\n                //noinspection JSValidateTypes\n                if (css.nodeType === undefined) {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n            } else if (typeof css !== \"string\") {\n                throw new Error('Parameter css must be a string or a DOM element');\n            }\n\n            this._css[name] = {\n                markup: css,\n                options: options\n            };\n        }\n\n        /**\n         * Checks whether a template is registered\n         * @param name\n         * @return {boolean}\n         */\n        isTemplateRegistered(name) {\n            return !!this._templates[name];\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Checks whether a CSS payload is registered\n         * @param name\n         * @return {boolean}\n         */\n        isCssRegistered(name) {\n            return !!this._css[name];\n        }\n\n        /**\n         * Ensures that a CSS payload has been added to the DOM\n         * @param name\n         */\n        ensureCss(name) {\n            if (this._css[name]) {\n                //noinspection JSValidateTypes\n                const css = this._css[name],\n                    id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                // Check for css element on page, if we have an ID to look for\n                if (id) {\n                    const element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                    if (!element) {\n                        const head = document.head,\n                            style = document.createElement('style');\n\n                        style.id = id;\n                        style.setAttribute('type', 'text/css');\n\n                        /* istanbul ignore else: old ie */\n                        if (style.hasOwnProperty) { // old ie\n                            style.innerHTML = css.markup;\n                        } else {\n                            style.styleSheet.cssText = css.markup;\n                        }\n\n                        if (head) {\n                            head.appendChild(style);\n                        } else {\n                            // NO HEAD, just prepend to body then\n                            const body = document.body;\n                            if (body) {\n                                body.appendChild(style);\n                            } else {\n                                // And if this doesn't work, just give up\n                                okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                            }\n                        }\n                    }\n                }\n            } else {\n                okanjo.report('Attempted to add CSS template \"'+name+'\" to the DOM, however it does not appear to be registered?');\n            }\n        }\n\n        /**\n         * Renders a template and returns the markup\n         * @param templateName\n         * @param context\n         * @param model\n         * @return {string}\n         */\n        render(templateName, context, model) {\n\n            model = model || {};\n            const template = this._templates[templateName];\n\n            // If there's a data controller closure set, and if so, run the data through there\n            if (template.beforeRender) {\n                model = template.beforeRender.call(context, model);\n            }\n\n            // Attach globals\n            model.okanjo = okanjo;\n            model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//,''); // Url w/o scheme to prevent mixed-content warnings\n            model.now = function() { return (new Date()).getTime(); };\n            model.classDetects = this.classDetects;\n\n            //noinspection JSUnresolvedVariable\n            if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                model.classDetects += \" \" + model.blockClasses.join(' ');\n                delete model.blockClasses;\n            }\n\n            // Add CSS unless we are told not to\n            if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                template.options.css.forEach((css) => this.ensureCss(css));\n                delete model.css;\n            }\n\n            // Render the template and return the result\n            return okanjo.lib.Mustache.render(template.markup, model);\n        }\n\n    }\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n    TemplateEngine.formatCurrency = (value, decimals=2, decimalSeparator='.', thousandsSeparator=',') => {\n        const s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        let j = i.length;\n        j = (j) > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    /*\n\n     div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n\n     */\n\n    const okanjo = window.okanjo;\n    const IS_MOBILE = okanjo.util.isMobile();\n\n    let initialized = false,\n        // scrollY = null,\n\n        // Selectors\n        $html, $body, $modalContainer, $modalWindow, $modalSkin, $modalOuter, $modalInner, $modalClose, $modalFrame,\n\n        createElements = function() {\n\n            // Page elements\n            //noinspection JSUnresolvedFunction\n            $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n            //noinspection JSUnresolvedFunction\n            $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n            // Modal elements\n            $modalContainer = document.createElement('div');\n            $modalWindow = document.createElement('div');\n            $modalSkin = document.createElement('div');\n            $modalOuter = document.createElement('div');\n            $modalInner = document.createElement('div');\n            $modalClose = document.createElement('div');\n            $modalFrame = document.createElement('iframe');\n\n            $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n            $modalWindow.setAttribute('class', 'okanjo-modal-window');\n            $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n            $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n            $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n            $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n            $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n            $modalFrame.setAttribute('frameborder', '0');\n            $modalFrame.setAttribute('vspace', '0');\n            $modalFrame.setAttribute('hspace', '0');\n            $modalFrame.setAttribute('webkitallowfullscreen', '');\n            $modalFrame.setAttribute('mozallowfullscreen', '');\n            $modalFrame.setAttribute('allowfullscreen', '');\n            $modalFrame.setAttribute('scrolling', 'auto');\n\n            $modalClose.innerHTML = '×';\n\n            // Create the modal element tree\n            $modalInner.appendChild($modalFrame);\n            $modalOuter.appendChild($modalInner);\n            $modalSkin.appendChild($modalOuter);\n            $modalWindow.appendChild($modalSkin);\n            $modalWindow.appendChild($modalClose);\n            $modalContainer.appendChild($modalWindow);\n\n            // Add the modal stuff to the body\n            $body.appendChild($modalContainer);\n        },\n\n        addListener = function(el, event, handler) {\n            /* istanbul ignore else: old browsers */\n            if (el.addEventListener) {\n                el.addEventListener(event, handler, false);\n            } else {\n                el.attachEvent(\"on\" + event, handler);\n            }\n        },\n\n        getWindowHeight = function() {\n            return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n        },\n\n        handleReposition = function() {\n            // scrollY = okanjo.ui.getScrollPosition().y;\n            //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n            $modalWindow.style.height = (getWindowHeight() - 80) + \"px\";\n        },\n\n        bindEvents = function() {\n\n            // If the device orientation changes, adjust the modal view port\n            addListener(window, 'orientationchange', function() {\n                for (let t = 0; t < 2; t++) {\n                    setTimeout(handleReposition, 1000 * t + 10);\n                }\n            });\n\n            // If the window changes size, also adjust the modal view port\n            addListener(window, 'resize', function() {\n                setTimeout(handleReposition, 100);\n            });\n\n            // Click the overlay to close the modal\n            addListener($modalContainer, 'click', closeModal);\n\n            // If you click in the modal, don't close it!\n            addListener($modalWindow, 'click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Click the close button to close it\n            addListener($modalClose, 'click', function(e) {\n\n                // Don't close it twice\n                e.preventDefault();\n                e.stopPropagation();\n\n                closeModal();\n            });\n\n        },\n\n        //removeListener = function(el, event, handler) {\n        //    if (el.removeEventListener) {\n        //        el.removeEventListener(event, handler);\n        //    } else {\n        //        el.detachEvent(\"on\" + event, handler);\n        //    }\n        //},\n\n        addClass = function(el, name) {\n            el.className += \" \" + name;\n        },\n\n        removeClass = function(el, name) {\n            el.className = el.className.replace(new RegExp(' *?'+name), '');\n        },\n\n        openModal = function() {\n\n            // scrollY = document.body.scrollTop;\n\n            removeClass($modalContainer, 'okanjo-modal-hidden');\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            handleReposition();\n\n            addClass($html, \"okanjo-modal-active\");\n\n            if (!IS_MOBILE) {\n                addClass($html, \"okanjo-modal-margin-fix\");\n            }\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n            }, 10);\n\n            // Click the overlay to close the modal\n            //addListener($body, 'click', closeModal);\n\n        },\n\n        closeModal = function() {\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n                addClass($modalContainer, \"okanjo-modal-hidden\");\n\n                removeClass($html, \"okanjo-modal-active\");\n                if (!IS_MOBILE) {\n                    removeClass($html, \"okanjo-modal-margin-fix\");\n                }\n            }, 210);\n\n            // Click the overlay to close the modal\n            //removeListener($body, 'click', closeModal);\n        },\n\n        /**\n         * Insert an element or markup into the modal\n         * @param content\n         */\n        setContent = function(content) {\n\n            // Remove existing content\n            $modalInner.innerHTML = \"\";\n\n            // Insert new content\n            if (typeof content === \"string\") {\n                $modalInner.innerHTML = content;\n            } else {\n                $modalInner.appendChild(content);\n            }\n        };\n\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n    class Metrics {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n        _getStoredQueue() {\n            if (window.localStorage[Metrics.Params.queue]) {\n                try {\n                    let queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                    if (Array.isArray(queue)) {\n                        return queue;\n                    } else {\n                        okanjo.report('Stored queue is not a queue', {queue});\n                        return [];\n                    }\n                } catch (e) {\n                    okanjo.report('Failed to load metric queue from storage', {err: e});\n                    return [];\n                }\n            } else {\n                // not stored\n                return [];\n            }\n        }\n\n        /**\n         * Updates the queue stored in storage, in the event we can't complete our submissions\n         * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n         * @private\n         */\n        _saveQueue(delay) {\n            if (delay) {\n                if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                this._saveQueueTimeout = setTimeout(() => {\n                    this._saveQueue(false);\n                    this._saveQueueTimeout = null;\n                }, 100);\n            } else {\n                window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n            }\n        }\n\n        /**\n         * Extract contextual pass-through data from the URL, if present\n         * @private\n         */\n        _checkUrlForReferral() {\n            const pageArgs = okanjo.util.getPageArguments(true),\n                urlSid = pageArgs[Metrics.Params.name],\n                localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name), // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                sourceChannel = pageArgs[Metrics.Params.channel];\n\n            // If for some reason, both are set, record the incident as a possible correlation\n            if (urlSid && localSid && urlSid !== localSid) {\n                this.trackEvent({\n                    object_type: Metrics.Object.metric_session,\n                    event_type: Metrics.Event.correlation,\n                    id: urlSid+\"_\"+localSid,\n                    ch: this.defaultChannel,\n                    _noProcess: true\n                });\n            }\n\n            // Update local values\n            this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n            this.sourceCh = sourceChannel || null;\n            this.sourceCx = sourceContext || null;\n        }\n\n        /**\n         * Submits an individual event metric\n         * @param event\n         * @param callback\n         */\n        trackEvent(event, callback) {\n            // Ensure the event contains the required fields\n            if (!event.object_type || !event.event_type) {\n                okanjo.report('Invalid metric to track (missing object_type or event_type)', {event});\n                return;\n            }\n\n            // Queue the event for publishing\n            this._push(event, callback);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Submits a page view metric\n         * @param event\n         * @param callback\n         */\n        trackPageView(event, callback) {\n            event = event || {};\n            event.object_type = Metrics.Object.page;\n            event.event_type = Metrics.Event.view;\n            event.id = event.id || window.location.href;\n            event.ch = event.ch || this.defaultChannel;\n\n            // Queue the event for publishing\n            this.trackEvent(event, callback);\n        }\n\n        /**\n         * Adds an event to the queue\n         * @param event\n         * @param callback\n         * @private\n         */\n        _push(event, callback) {\n            this._queue.push({ event, callback });\n\n            // Save the queue\n            this._saveQueue(true);\n\n            // Start burning down the queue, unless the event says not to\n            if (event._noProcess) {\n                delete event._noProcess;\n            } else {\n                this._processQueue();\n            }\n        }\n\n        /**\n         * Burn down the queue\n         * @private\n         */\n        _processQueue() {\n            // If the queue is not already being processed, and there's stuff to process, continue sending them\n            if (!this._processTimeout && this._queue.length > 0) {\n                this._processTimeout = setTimeout(() => {\n\n                    // Pull the items we're going to batch out of the queue\n                    const items = this._queue.splice(0, 255);\n                    this._saveQueue(false);\n\n                    // Track the item\n                    this._batchSend(items, (err, res) => {\n                        // TODO: If there was an error, consider splicing the batch back into the queue\n\n                        // Update / Set the metric sid on the publisher\n                        /* istanbul ignore else: server barks */\n                        if (res && res.data && res.data.sid) this._updateSid(res.data.sid);\n\n                        // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                        this._processTimeout = null;\n                        this._processQueue();\n\n                        // Fire the event callbacks if there are any\n                        items.forEach((item) => {\n                            item.callback && item.callback(err, res);\n                        });\n                    });\n\n                }, 0); // break event loop, maybe\n            }\n        }\n\n        /**\n         * Sends a bunch of queued metric events\n         * @param items\n         * @param callback\n         * @private\n         */\n        _batchSend(items, callback) {\n\n            // Normalize event data\n            const events = items.map((item) => {\n                this._normalizeEvent(item.event);\n\n                // Strip duplicated data from event batch\n                delete item.event.sid;\n                delete item.event.win;\n\n                return item.event;\n            });\n\n            const payload = {\n                events,\n                win: window.location.href\n            };\n\n            const route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n            // Set sid if present\n            if (this.sid) {\n                payload.sid = this.sid;\n            }\n\n            // Send it\n            okanjo.net.request.post(\n                route,\n                payload,\n                (err, res) => {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err, res, items, route });\n                    }\n                    callback && callback(err, res);\n                }\n            );\n        }\n\n        /**\n         * Normaizes events so that they contain consistent data values\n         * @param event\n         * @private\n         */\n        _normalizeEvent(event) {\n\n            // Ensure meta is ready to receive values\n            event.m = event.m || {};\n\n            // Set key\n            event.key = event.key || event.m.key || okanjo.key || undefined;\n\n            // Set session\n            if (this.sid) event.sid = this.sid;\n\n            // Clone the metadata, since it might be a direct reference to a widget property\n            // Deleting properties on the meta object could be very destructive\n            event.m = Object.assign({}, event.m); // event.m should be flat\n\n            // Strip meta keys that should be excluded\n            Object.keys(Metrics.Meta.exclude).forEach((key) => delete event.m[key]);\n\n            // Set referral channel / context\n            if (this.sourceCh) { event.m.ref_ch = this.sourceCh; }\n            if (this.sourceCx) { event.m.ref_cx = this.sourceCx; }\n\n            // Set page group id\n            event.m.pgid = this.pageId;\n\n            // Set okanjo version\n            event.m.ok_ver = okanjo.version;\n\n            // Finalize metadata\n            event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n            // Ensure metadata strings won't exceed the imposed limit\n            Object.keys(event.m).forEach((key) => {\n                if (typeof event.m[key] === \"string\") {\n                    event.m[key] = event.m[key].substr(0, 255);\n                }\n            });\n\n            // Set page source reference\n            if (document.referrer) {\n                event.ref = document.referrer;\n            }\n\n             // Set the window location\n            event.win = window.location.href;\n        }\n\n        /**\n         * Updates the stored session identifier\n         * @param sid\n         * @private\n         */\n        _updateSid(sid) {\n            if (!this.sid && sid) {\n                this.sid = sid;\n                window.localStorage[Metrics.Params.name] = sid;\n                okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @param event\n         * @return {*|{}}\n         */\n        static addElementInfo(element, event) {\n            const page = okanjo.ui.getPageSize(),\n                size = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.pw = page.w;\n            event.m.ph = page.h;\n            event.m.x1 = size.x1;\n            event.m.y1 = size.y1;\n            event.m.x2 = size.x2;\n            event.m.y2 = size.y2;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @param event\n         * @return {*|{}}\n         */\n        static addViewportInfo(event) {\n            const vp = okanjo.ui.getViewportSize(),\n                pos = okanjo.ui.getScrollPosition();\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.vx1 = pos.x;\n            event.m.vy1 = pos.y;\n            event.m.vx2 = pos.x+vp.vw;\n            event.m.vy2 = pos.y+vp.vh;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @param event\n         * @return {*|{}}\n         */\n        static addEventInfo(jsEvent, event) {\n            const pos = okanjo.ui.getEventPosition(jsEvent);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.et = pos.et;\n            event.m.ex = pos.ex;\n            event.m.ey = pos.ey;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param event\n         * @param args\n         * @return {*|{}}\n         */\n        static addEventMeta(event, ...args) {\n            event = event || {};\n            event.m = event.m || {};\n            event.m = Object.assign.apply(Object, [event.m].concat(args));\n            \n            return event;\n        }\n\n        /**\n         * Helper to create a new fluent event structure\n         * @param data\n         * @param args\n         * @return {MetricEvent}\n         */\n        static create(data, ...args) {\n            // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n            return new MetricEvent(data, args);\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Helper to create a new fluent event structure\n         * @param args\n         * @return {*}\n         */\n        create(...args) {\n            return Metrics.create.apply(null, args);\n        }\n\n    }\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key','callback','metrics_channel_context','metrics_context','mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n    class MetricEvent {\n        constructor(data, others) {\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach((data) => {\n                    this.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n        data(data) {\n            Object.assign(this, okanjo.util.deepClone(data));\n            return this;\n        }\n\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @return {MetricEvent}\n         */\n        event(jsEvent) {\n            Metrics.addEventInfo(jsEvent, this);\n            return this;\n        }\n\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @return {MetricEvent}\n         */\n        viewport() {\n            Metrics.addViewportInfo(this);\n            return this;\n        }\n\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @return {MetricEvent}\n         */\n        element(element) {\n            Metrics.addElementInfo(element, this);\n            return this;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param args\n         * @return {MetricEvent}\n         */\n        meta(...args) {\n            Metrics.addEventMeta.apply(null, [this].concat(args));\n            return this;\n        }\n\n        /**\n         * Sets the object and event type on the event w/o having to use .data\n         * @param object_type\n         * @param event_type\n         * @return {MetricEvent}\n         */\n        type(object_type, event_type) {\n            this.object_type = object_type;\n            this.event_type = event_type;\n            return this;\n        }\n\n        /**\n         * Finalizes and sends the event\n         * @param callback\n         */\n        send(callback) {\n            okanjo.metrics.trackEvent(this, callback);\n            // DONT RETURN - BREAK THE CHAIN HERE\n        }\n\n        /**\n         * Gets the single-metric tracking url for this event\n         * @return {string}\n         */\n        toUrl() {\n            // Copy data w/o modifying it\n            const event = Object.assign({}, this);\n\n            // Extract params\n            const {\n                object_type,\n                event_type\n            } = event;\n            delete event.object_type;\n            delete event.event_type;\n\n            // Normalize event data\n            okanjo.metrics._normalizeEvent(event);\n\n            // Get the URL\n            return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type, event_type }) + '?' +\n                okanjo.net.request.stringify(event);\n        }\n    }\n\n    // Export / initialize\n    okanjo.metrics = new Metrics();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({_noProcess:true});\n    setTimeout(() => {\n        okanjo.metrics._processQueue();\n    }, 1000);\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function(window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    class EventEmitter {\n\n        constructor() {\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n        on(event, listener) {\n            if (!this._events[event]) {\n                this._events[event] = [];\n            }\n\n            this._events[event].push(listener);\n        }\n\n        /**\n         * Removes an event handler for an event\n         * @param event\n         * @param listener\n         */\n        removeListener(event, listener) {\n\n            if (this._events[event]) {\n                let idx = this._events[event].indexOf(listener);\n                if (idx >= 0) {\n                    this._events[event].splice(idx, 1);\n                }\n            }\n        }\n\n        /**\n         * Emits an event\n         * @param event\n         */\n        emit(event) {\n            let i, listeners, length, args = [].slice.call(arguments, 1);\n\n            if (this._events[event]) {\n                listeners = this._events[event].slice();\n                length = listeners.length;\n\n                for (i = 0; i < length; i++) {\n                    listeners[i].apply(this, args);\n                }\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Registers an event handler to fire only once on an event\n         * @param event\n         * @param listener\n         */\n        once(event, listener) {\n\n            const callback = () => {\n                let args = [].slice.call(arguments, 1);\n                this.removeListener(event, callback);\n                listener.apply(this, args);\n            };\n\n            this.on(event, callback);\n        }\n\n    }\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n    const DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    const DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n    class Widget extends okanjo._EventEmitter {\n\n        constructor(element, options) {\n            super();\n\n            // Verify element was given (we can't load unless we have one)\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: this, element, options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && typeof options !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + typeof options, { widget: this, element, options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            this.name = 'Widget';\n            this.element = element;\n            this.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            this.config = Object.assign({}, options);\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n        init() {\n            // process config attributes\n            this._applyConfiguration();\n\n            this._setCompatibilityOptions();\n\n            // ensure placement key\n            if (!this._ensurePlacementKey()) return;\n\n            // Tell the widget to load\n            this.load();\n        }\n\n        /**\n         * This is for extended widgets, so they may modify the configuration before loading\n         */\n        _setCompatibilityOptions() {\n            // By default, this does nothing. Must be overridden to be useful\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Widget configuration definitions\n         * @return {{}}\n         */\n        getSettings() {\n            // Override this\n            return {};\n        }\n\n        /**\n         * Main widget load function.\n         */\n        load() {\n            // Override this in the widget implementation\n        }\n\n        /**\n         * Applies data attribute settings and defaults to the widget configuration\n         * @private\n         */\n        _applyConfiguration() {\n\n            // this.config was set to the options provided in the constructor\n            // so layer data attributes on top\n\n            const data = this.getDataAttributes();\n            const settings = this.getSettings();\n            Object\n                .keys(data)\n                .forEach((key) => {\n                    let normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    let val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        this.config[normalizedKey] = val;\n                    }\n                })\n            ;\n\n            // Apply defaults from the widget settings\n            Object.keys(settings).forEach((key) => {\n                if (this.config[key] === undefined && settings[key]._default !== undefined) {\n                    this.config[key] = settings[key].value(undefined, false);\n                }\n            });\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets a copy of the configuration, suitable for transmission\n         * @return {{}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = {};\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let group = null;\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        /**\n         * Before loading, ensure that a placement key is present or abort\n         * @return {boolean}\n         * @private\n         */\n        _ensurePlacementKey() {\n\n            // Check if set on widget or globally\n            if (this.config.key) {\n                return true;\n            } else if (okanjo.key) {\n                // Copy key from global scope,\n                this.config.key = okanjo.key;\n                return true;\n            }\n\n            // No key set, can't load.\n            okanjo.report('No key provided on widget', { widget: this });\n            this.showError('Error: Missing placement key.');\n            return false;\n        }\n\n        /**\n         * Displays an error in the widget element\n         * @param message\n         */\n        showError(message) {\n            this.setMarkup(okanjo.ui.engine.render(\n                'okanjo.error',\n                this,\n                { message }\n            ));\n        }\n\n        /**\n         * Sets the markup of the widget's element\n         * @param markup\n         */\n        setMarkup(markup) {\n            this.element.innerHTML = markup;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the current page URL, sans query string and fragment.\n         * @returns {string} - URL\n         */\n        static getCurrentPageUrl() {\n            return window.location.href.replace(/([?#].*)$/, '');\n        }\n\n        /**\n         * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n         * @returns {*}\n         */\n        getDataAttributes() {\n            const data = {};\n                Array\n                    .from(this.element.attributes)\n                    .forEach((attr) => {\n                        const match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                        if (match) {\n                            data[match[1]] = attr.value;\n                        }\n                    });\n            return data;\n        }\n\n    }\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n    Widget.Field = class Field {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n        array(converter) {\n            this._convert = (val) => {\n                if (Array.isArray(val)) {\n                    if (converter) {\n                        return val.map((v) => converter(v))\n                    } else {\n                        return val;\n                    }\n                }\n                val = val.replace(/\\\\,/g, '\\0');\n                return val.split(',').map((v) => {\n                    let res = v.trim().replace('\\0', ',');\n                    if (converter) res = converter(res);\n                    return res;\n                });\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static array(converter) { return (new Field()).array(converter); }\n\n        /**\n         * Formats the value as a string\n         * @return {Field}\n         */\n        string() {\n            this._convert = (val) => {\n                if (val === null || val === undefined) return val;\n                else return \"\"+val;\n            };\n            return this;\n        }\n        static string() { return (new Field()).string(); }\n\n        /**\n         * Formats the value as a boolean (takes 1, 0, true, false)\n         * @return {Field}\n         */\n        bool() {\n            this._convert = (val) => {\n                if (typeof val === \"string\") {\n                    return (val === \"1\" || val.toLowerCase() === \"true\");\n                } else {\n                    return !!val;\n                }\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static bool() { return (new Field()).bool(); }\n\n        /**\n         * Indicates the field should not be passed on for transmission\n         * @return {Field}\n         */\n        strip() { this._strip = true; return this; }\n        static strip() { return (new Field()).strip(); }\n\n        /**\n         * Formats the value as a integer (whole) number\n         * @return {Field}\n         */\n        int() { this._convert = (val) => parseInt(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static int() { return (new Field()).int(); }\n\n        /**\n         * Formats the value as a floating point number\n         * @return {Field}\n         */\n        float() { this._convert = (val) => parseFloat(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static float() { return (new Field()).float(); }\n\n        //noinspection ReservedWordAsName\n        /**\n         * Sets the default value to use if not set\n         * @param val\n         * @return {Field}\n         */\n        default(val) {\n            this._default = val;\n            return this;\n        }\n\n        /**\n         * Assigns the property to a bucket for hierarchy\n         * @param name\n         * @return {Field}\n         */\n        group(name) {\n            this._group = name;\n            return this;\n        }\n\n        /**\n         * Gets the group the field belongs to\n         * @return {*|null}\n         */\n        getGroup() {\n            return this._group;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the formatted value of the field\n         * @param val\n         * @param strip\n         * @return {*}\n         */\n        value(val, strip=true) {\n            if (this._strip && strip) return undefined;\n            if (val !== undefined && this._convert) {\n                val = this._convert(val);\n            }\n            return val !== undefined ? val : this._default;\n        }\n\n    };\n\n    // Export\n    return okanjo._Widget = Widget;\n\n})(window);\n\n\n\n","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    //region Imports and Constants\n\n    const okanjo = window.okanjo;\n    const { string, array, float, int, bool } = okanjo._Widget.Field;\n    const Metrics = okanjo.metrics.constructor;\n    const TemplateEngine = okanjo.ui.engine.constructor;\n\n    const FILTERS = 'filters';\n    const DISPLAY = 'display';\n    const ARTICLE_META = 'article_meta';\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n    class Placement extends okanjo._Widget {\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        constructor(element, options = {}) {\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n            super(element, options);\n\n            this.name = 'Placement';\n            this._metricBase = {}; // placeholder for metrics\n            this._response = null;\n\n            // Start loading content\n            if (!options.no_init) this.init();\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n        getSettings() {\n            return {\n\n                // What type of response do you want\n                type: string().group(FILTERS),\n\n                // What specific products do you want\n                ids: array().group(FILTERS),\n\n                // Filter by generic query string\n                q: string().group(FILTERS),\n\n                // Filter by relation to content\n                url: string().group(FILTERS),\n                url_referrer: string().group(FILTERS).strip(),\n                url_selectors: string().group(FILTERS),\n\n                // Filter by hierarchy\n                organization_id: string().group(FILTERS),\n                property_id: string().group(FILTERS),\n                store_id: string().group(FILTERS),\n\n                // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                organization_name: string().group(FILTERS),\n                property_name: string().group(FILTERS),\n                store_name: string().group(FILTERS),\n\n                // Filter by integrations\n                external_id: string().group(FILTERS),\n                sku: string().group(FILTERS),\n                external_store_id: string().group(FILTERS),\n\n                // Filter by product attributes\n                condition: string().group(FILTERS),\n                manufacturer: string().group(FILTERS),\n                upc: string().group(FILTERS),\n                isbn: string().group(FILTERS),\n\n                // Filter by categorization / distribution\n                tags: array().group(FILTERS),\n                category: array().group(FILTERS),\n                pools: array().group(FILTERS),\n\n                // Filter by price range\n                min_price: float().group(FILTERS),\n                max_price: float().group(FILTERS),\n\n                // Filter by donation ranges\n                min_donation_percent: float().group(FILTERS),\n                max_donation_percent: float().group(FILTERS),\n\n                // Filter by donation recipient\n                donation_to: string().group(FILTERS),\n\n                // Sorting\n                sort_by: string().group(FILTERS),\n                sort_direction: string().group(FILTERS),\n\n                // Pagination\n                skip: int().group(FILTERS),\n                take: int().group(FILTERS),\n\n                // Placement Testing\n                placement_tests_only: bool(),\n\n                // Display settings\n                size: string().group(DISPLAY),\n                template_name: string().group(DISPLAY),\n                template_layout: string().group(DISPLAY),\n                template_theme: string().group(DISPLAY),\n                template_cta_style: string().group(DISPLAY),\n                template_cta_text: string().group(DISPLAY),\n                template_cta_color: string().group(DISPLAY),\n                adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                // Article metadata\n                url_category: array().group(ARTICLE_META),\n                url_keywords: array().group(ARTICLE_META),\n\n                // Functional settings\n                key: string().strip(), // don't need to resend key on all our requests\n                no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                proxy_url: string().strip(),\n                expandable: bool().strip().default(true),\n                disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                backwards: string().strip() // internal flag indicating port from a deprecated widget\n            };\n        }\n\n        /**\n         * Gets the widget configuration formatted using settings, suitable for transmission\n         * @return {{filters: {}, display: {}, backfill: {}, article_meta: {}}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = { filters: {}, display: {}, backfill: {}, article_meta: {} };\n            const backfillPattern = /^backfill_(.+)$/; // backfill_property\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let isBackfill = false;\n                let group = null;\n\n                // Get the property name if it was prefixed with backfill\n                let matches = backfillPattern.exec(origKey);\n                if (matches) {\n                    key = matches[1];\n                    isBackfill = true;\n                }\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = isBackfill ? out.backfill : out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Core load process\n         */\n        load() {\n            // Set metric base data (stub for all future events emitted by the widget)\n            this._setMetricBase();\n\n            // Find out what we should display here\n            this._fetchContent((err) => {\n                if (err) {\n                    // Report the widget load as declined\n                    this._reportWidgetLoad(\"fetch failed: \" + err.statusCode /* istanbul ignore next: out of scope */ || err.toString());\n                } else {\n                    // Merge display settings from response\n                    this._mergeResponseSettings();\n\n                    // Merge the referential data from the response\n                    this._updateBaseMetaFromResponse();\n\n                    // Handle rendering based on output type\n                    this._showContent();\n                }\n            });\n        }\n\n        //endregion\n\n        //region Internal Helpers\n\n        /**\n         * Initializes the common metric data for events emitted by the placement\n         * @private\n         */\n        _setMetricBase() {\n            const base = this._metricBase;\n            base.ch = Metrics.Channel.placement;\n            base.cx = this.config.backwards || 'auto';\n            base.key = this.config.key;\n            base.m = base.m || {};\n            base.m.wgid = this.instanceId;\n        }\n\n        /**\n         * Emits the widget impression event\n         * @param declined\n         * @private\n         */\n        _reportWidgetLoad(declined) {\n\n            // If this is declined, mark future events as declined too\n            this._metricBase.m.decl = declined || '0';\n\n            // Track impression\n            okanjo.metrics.create(this._metricBase)\n                .type(Metrics.Object.widget, Metrics.Event.impression)\n                .meta(this.getConfig())\n                .element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport()\n                .send();\n        }\n\n        /**\n         * Executes the request for content to fill the placement\n         * @param callback\n         * @private\n         */\n        _fetchContent(callback) {\n            // Build request to api, starting with this placement config params\n            const query = this.getConfig();\n\n            // Extract the key\n            const key = this.config.key;\n\n            // Attach sid and referrer\n            if (okanjo.metrics.sid) query.sid = okanjo.metrics.msid;\n            query.filters.url_referrer = window.location.href;\n            query.wgid = this.instanceId;\n            query.pgid = okanjo.metrics.pageId;\n\n            // Send it\n            okanjo.net.request.post(\n                `${okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live')}?key=${encodeURIComponent(key)}`,\n                query,\n                (err, res) => {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: this });\n                        this.setMarkup(''); // Don't show anything\n                        this.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        this._response = res;\n\n                        // Hook point for response handling\n                        this.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                }\n            );\n        }\n\n        /**\n         * Applies response filters and display settings into the widget configuration\n         * @private\n         */\n        _mergeResponseSettings() {\n            const res = this._response;\n            const data = res.data || {};\n            const settings = data.settings || {};\n\n            if (settings.filters) {\n                Object.keys(settings.filters).forEach((key) => {\n                    this.config[key] = settings.filters[key];\n                });\n            }\n\n            if (settings.display) {\n                Object.keys(settings.display).forEach((key) => {\n                    this.config[key] = settings.display[key];\n                });\n            }\n        }\n\n        /**\n         * Applies response data to future metric events\n         * @private\n         */\n        _updateBaseMetaFromResponse() {\n            // Update the base metric data with info from the response\n            const data = (this._response|| {}).data || {};\n            this._metricBase.m = this._metricBase.m || {};\n            const meta = this._metricBase.m;\n\n            // Article\n            if (data.article) meta.aid = data.article.id;\n\n            if (data.test && data.test.enabled) {\n                meta.pten = 1;\n                meta.ptid = data.test.id;\n                meta.ptseed = data.test.seed;\n            } else {\n                meta.pten = 0;\n            }\n        }\n\n        /**\n         * Beings the render process based on the response content\n         * @private\n         */\n        _showContent() {\n            const data = (this._response|| {}).data || {};\n\n            // Known content types we can display\n            if (data.type === Placement.ContentTypes.products) {\n                this._showProducts();\n            } else if (data.type === Placement.ContentTypes.articles) {\n                this._showArticles();\n            } else if (data.type === Placement.ContentTypes.adx) {\n                this._showADX();\n            } else {\n                // Unknown response type!\n\n                // Report the widget load as declined\n                const msg = 'Unknown response content type: ' + data.type;\n                okanjo.report(msg, { placement: this });\n                this.setMarkup(''); // Don't show anything\n                this.emit('error', msg);\n                this._reportWidgetLoad(msg);\n            }\n        }\n\n        /**\n         * Generates the click url using the event, proxy_url, and additional params\n         * @param event\n         * @param url\n         * @param additionalUrlParams\n         * @return {*}\n         * @private\n         */\n        _getClickThroughURL(event, url, additionalUrlParams) {\n            const joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n            // Tack on transfer params\n            additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n            additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n            additionalUrlParams.ok_ch = this._metricBase.ch;\n            additionalUrlParams.ok_cx = this._metricBase.cx;\n\n            url += joiner + Object.keys(additionalUrlParams)\n                    .map((key) => encodeURIComponent(key)+'='+encodeURIComponent(additionalUrlParams[key]))\n                    .join('&');\n\n            // Wrap the url if we're proxying\n            if (this.config.proxy_url) {\n                url = this.config.proxy_url + encodeURIComponent(url);\n            }\n\n            // Set the url on the event\n            event.data({\n                u: url\n            });\n\n            return event.toUrl();\n        }\n\n        /**\n         * Converts a resource's link into one suitable for tracking, making middle-click safe\n         * @param type\n         * @param resource\n         * @param e\n         * @private\n         */\n        _handleResourceMouseDown(type, resource, e) {\n            // Generate a new click id for this event\n            const clickId = okanjo.util.shortid();\n\n            // Start building the event\n            const event = okanjo.metrics.create(this._metricBase, {\n                id: resource.id\n            })\n                .type(type, Metrics.Event.interaction)\n                .meta(this.getConfig())\n                .meta({ cid: clickId })\n                .meta({ bf: resource.backfill ? 1 : 0 })\n                .event(e)\n                .element(e.currentTarget)\n                .viewport();\n\n            // Pull the proper params out of the resource depending on it's type\n            let trackParam = 'url_track_param';\n            let urlParam = 'url';\n\n            if (type === Metrics.Object.product) {\n                trackParam = 'buy_url_track_param';\n                urlParam = 'buy_url';\n            }\n\n            // Attach the campaign tracking identifier\n            const additionalParams = {\n                ok_cid: clickId\n            };\n            if (resource[trackParam]) additionalParams[resource[trackParam]] = (okanjo.metrics.sid || 'unknown') + ':' + clickId;\n\n            // Update the link with the event data\n            event.data({ ea: Metrics.Action.click });\n            e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n            // Cache this on the product\n            resource._clickId = clickId;\n            resource._event = event;\n            resource._additionalParams = additionalParams;\n        }\n\n        /**\n         * Gets the template to use, accounting for configured preference if available\n         * @param contentType\n         * @param defaultName\n         * @return {string}\n         * @private\n         */\n        _getTemplate(contentType, defaultName) {\n            let templateName = this.config.template_name;\n            if (!templateName ||\n                !okanjo.ui.engine.isTemplateRegistered(`${contentType}.${templateName}`)) {\n                templateName = defaultName;\n            }\n            return `${contentType}.${templateName}`;\n        }\n\n        /**\n         * Enforces size/layout/cta restrictions\n         * @private\n         */\n        _enforceLayoutOptions() {\n            // Enforce format restrictions\n            if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n                this.config.template_cta_style = \"link\";\n            } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            }\n        }\n\n        /**\n         * Register a custom\n         * @private\n         */\n        _registerCustomBranding(prefix, buttonClass) {\n            const brandColor = this.config.template_cta_color;\n            if (brandColor) {\n                let brandCSS,\n                    brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                brandCSS = `\n                    ${prefix}-block2.${brandCSSId} ${prefix}-${buttonClass} { color: ${brandColor};} \n                    ${prefix}-block2.${brandCSSId}.okanjo-cta-style-button ${prefix}-${buttonClass} { border: 1px solid ${brandColor}; } \n                    ${prefix}-block2.${brandCSSId}.okanjo-cta-style-button ${prefix}-${buttonClass}:hover { background: ${brandColor}; } \n                `;\n\n                okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                okanjo.ui.engine.ensureCss(brandCSSId);\n            }\n        }\n\n        //endregion\n\n        //region Product Handling\n\n        /**\n         * Renders a product response\n         * @private\n         */\n        _showProducts() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // - render\n\n            // Format products\n            data.results.forEach((offer, index) => {\n                // Disable inline buy if configured to do so\n                if (this.config.disable_inline_buy) offer.inline_buy_url = null;\n                if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                // Set primary image\n                offer._image_url = offer.image_urls ? offer.image_urls[0] : '' ;\n\n                // Escape buy url (fixme: does not include proxy_url!)\n                offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                // Make price tag pretty\n                offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                offer._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break it */\n                if (id && index >= 0) {\n                    const product = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break it */\n                    if (product) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.product, product));\n                        a.addEventListener('click', this._handleProductClick.bind(this, product));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: product.id })\n                            .type(Metrics.Object.product, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({ bf: product.backfill ? 1 : 0 })\n                            .element(a)\n                            .send();\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the product click process\n         * @param product\n         * @param e\n         * @private\n         */\n        _handleProductClick(product, e) {\n\n            // Update the event\n            if (!product._event || !product._additionalParams || !product._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.product, product, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = product;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Determine what we're doing - native ux or redirect\n            const showNativeBuyUx = !!product.inline_buy_url,\n                showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile()\n            ;\n\n            // Show the inline buy experience or redirect\n            if (showPopupNativeBuyUx) {\n                // Mobile native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                //\n                // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                //\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ popup: 'true' });\n\n                // Get the frame url\n                let url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Open the window or redirect if that failed\n                this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                if (!this._popupFrame) {\n                    // Fallback to just replacing the window with the target, since popups don't work :(\n                    okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                    window.location.href = url;\n                }\n\n            } else if (showNativeBuyUx) {\n                // Regular native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-inline-buy-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto'\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Check whether we're allowed to expand past the bounds of the placement\n                additionalParams.expandable = this.config.expandable ? 1: 0;\n                if (!this.config.expandable) {\n                    const parent = this.element.querySelector('.okanjo-expansion-root');\n                    /* istanbul ignore else: custom templates could break this */\n                    if (parent) {\n                        frame.className += ' okanjo-ad-in-unit';\n                        frame.setAttribute('height', \"100%\");\n                        frame.setAttribute('width', \"100%\");\n\n                        parent.appendChild(frame);\n\n                        const size = okanjo.ui.getElementSize(parent);\n                        additionalParams.frame_height = size.height;\n                        additionalParams.frame_width = size.width;\n                        /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                        if (this.config.size) additionalParams.ad_size = this.config.size;\n                    }\n                }\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                // Set the frame url\n                frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Show the modal if it was not internally expanded\n                if (!frame.parentNode) {\n                    okanjo.ui.modal.show(frame);\n                }\n\n            } else {\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n            }\n        }\n\n        //endregion\n\n        //region Article Handling\n\n        /**\n         * Renders an article response\n         * @private\n         */\n        _showArticles() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // - render\n\n            // Format articles\n            data.results.forEach((article, index) => {\n                // Escape url (fixme: does not include proxy_url!)\n                article._escaped_url = encodeURIComponent(article.url);\n                article._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break this */\n                if (id && index >= 0) {\n                    const article = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break this */\n                    if (article) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.article, article));\n                        a.addEventListener('click', this._handleArticleClick.bind(this, article));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: article.id })\n                            .type(Metrics.Object.article, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({ bf: article.backfill ? 1 : 0 })\n                            .element(a)\n                            .send();\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the article click process\n         * @param article\n         * @param e\n         * @private\n         */\n        _handleArticleClick(article, e) {\n            // Update the event\n            if (!article._event || !article._additionalParams || !article._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.article, article, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = article;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Update the link a second time, just in case the data changed\n            e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n        }\n\n        //endregion\n\n        //region ADX Handling\n\n        /**\n         * Renders a Google DFP/ADX response\n         * @private\n         */\n        _showADX() {\n            const data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n            // Get the template we should use to render the google ad\n            const templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n            // Determine what size ad we can place here\n            let size = null;\n            if (this.config.size) {\n                if (Placement.Sizes[this.config.size]) {\n                    // Defined size, use these known dimensions\n                    size = Placement.Sizes[this.config.size];\n                } else {\n                    let match = (/^([0-9]+)x([0-9]+)$/i).exec(this.config.size);\n                    if (match) {\n                        size = { width: match[1], height: match[2] }\n                    }\n                }\n            }\n\n            // No given size, we need to guess\n            if (!size) size = Placement.Sizes.default;\n\n\n            // If we're using okanjo's ad slot, then track the impression\n            // otherwise decline it because we're just passing through to the publishers account\n            let adUnitPath = '/90447967/okanjo:<publisher>';\n            if (data.settings.display && data.settings.display.adx_unit_path) {\n                adUnitPath = data.settings.display.adx_unit_path;\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad(); // accept it because we're serving out of our exchange\n            }\n\n            // Pass along what the template needs to know to display the ad\n            const renderContext = {\n                size,\n                adUnitPath\n            };\n\n            // Render the container\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n            // Insert the actual ad into the container\n            const container = this.element.querySelector('.okanjo-adx-container');\n            /* istanbul ignore else: custom templates could break this */\n            if (container) {\n\n                // Make the frame element\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-adx-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto',\n                    width: size.width,\n                    height: size.height\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Attach to dOM\n                container.appendChild(frame);\n\n                // Build a click-through tracking url so we know when an ad is clicked too\n                let clickUrl = okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction)\n                    .meta(this.getConfig())\n                    .meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    })\n                    .element(frame)\n                    .toUrl();\n\n                // Transfer references to the frame window\n                // frame.contentWindow.okanjo = okanjo;\n                // frame.contentWindow.placement = this;\n                frame.contentWindow.trackImpression = () => {\n                    okanjo.metrics.create(this._metricBase)\n                        .type(Metrics.Object.thirdparty_ad, Metrics.Event.impression)\n                        .meta(this.getConfig())\n                        .meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        })\n                        .element(frame)\n                        .send()\n                    ;\n                };\n\n                // Load Google ad!\n                frame.contentWindow.document.open();\n                frame.contentWindow.document.write(\n`<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body>\n<`+`script type=\"text/javascript\" src=\"https://www.googletagservices.com/tag/js/gpt.js\">\n    googletag.pubads().addEventListener('slotRenderEnded', function(e) { \n        trackImpression(e);\n    });\n    googletag.pubads()\n        .definePassback(\"${adUnitPath.replace(/\"/g, '\\\\\"')}\", [[${size.width}, ${size.height}]])\n        .setClickUrl(\"${clickUrl}&u=\")\n        .display();\n<`+`/script>\n</body></html>`);\n                frame.contentWindow.document.close();\n\n                // TODO future event hooks\n                // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                // Impression tracking is done from within the iframe. Crazy, right?\n            }\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        //endregion\n    }\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle:       { width: 300, height: 250 }, // aka: sidekick\n        leaderboard:            { width: 728, height:  90 },\n        large_mobile_banner:    { width: 320, height: 100 },\n        half_page:              { width: 300, height: 600 }, // aka: filmstrip, sidekick\n\n        // IAB / Others\n        billboard:              { width: 970, height: 250 }, // aka: sidekick\n        button_2:               { width: 120, height:  60 },\n        micro_bar:              { width:  88, height:  31 },\n        portrait:               { width: 300, height:1050 },\n        rectangle:              { width: 180, height: 150 },\n        super_leaderboard:      { width: 970, height:  90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper:        { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard:     { width: 320, height:  50 },\n        small_square:           { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1:               { width: 120, height:  90 },\n        full_banner:            { width: 468, height:  60 },\n        half_banner:            { width: 234, height:  60 },\n        large_rectangle:        { width: 336, height: 280 },\n        pop_under:              { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper:             { width: 120, height: 600 },\n        square:                 { width: 250, height: 250 },\n        square_button:          { width: 125, height: 125 },\n        vertical_banner:        { width: 120, height: 240 },\n        vertical_rectangle:     { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n    class Product extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Product';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Set filters based on old \"mode\"\n            if (this.config.mode === 'sense') {\n                // sense\n                this.config.url = this.config.url || 'referrer';\n                this.config.take = this.config.take || 5;\n            } else if (this.config.mode === 'single') {\n                // single\n                this.config.url = null;\n                if (this.config.id) this.config.ids = [this.config.id];\n                this.config.take = 1;\n                delete this.config.id;\n            } else {\n                // browse\n                this.config.url = null;\n                this.config.take = this.config.take || 25;\n            }\n            delete this.config.mode;\n\n            // Sold by changed to store name\n            if (this.config.sold_by) {\n                this.config.store_name = this.config.sold_by;\n                delete this.config.sold_by;\n            }\n\n            // Selectors is now url_selectors\n            if (this.config.selectors) {\n                this.config.url_selectors = this.config.selectors;\n                delete this.config.selectors;\n            }\n\n            // Marketplace_id is no longer a thing, closest analog are properties.\n            if (this.config.marketplace_id) {\n                this.config.property_id = this.config.marketplace_id;\n                delete this.config.marketplace_id\n            }\n\n            // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n            if (this.config.marketplace_status === 'testing') {\n                this.config.sandbox = true;\n            }\n            delete this.config.marketplace_status;\n\n            // Deprecated\n            delete this.config.suboptimal;\n            delete this.config.text;\n        }\n\n    }\n\n    return okanjo.Product = Product;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n    class Ad extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Ad';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Id / single mode is now ids\n            this.config.url = null;\n            if (this.config.id) {\n                this.config.ids = [this.config.id];\n            } else {\n                okanjo.warn('Ad widget should have parameter `id` set.');\n            }\n            this.config.take = 1;\n            delete this.config.id;\n\n            // Content is automatically determined whether the placement element contains children\n            delete this.config.content;\n        }\n\n    }\n\n    return okanjo.Ad = Ad;\n\n})(window);","/* jshint ignore:start */\n\n(function() {\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n\n\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */"],"sourceRoot":"./"}