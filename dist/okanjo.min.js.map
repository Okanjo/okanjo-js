{"version":3,"sources":["okanjo.js","Array.from.js","Array.prototype.find.js","Array.prototype.findIndex.js","Array.prototype.includes.js","NodeList.prototype.forEach.js","Object.Assign.js","Okanjo.js","Request.js","Cookie.js","TemplateEngine.js","Modal.js","Metrics.js","AutoPageView.js","EventEmitter.js","Widget.js","Placement.js","Product.js","Ad.js","vendor.js"],"names":["root","factory","define","amd","exports","module","okanjo","this","_possibleConstructorReturn","isCallable","self","ReferenceError","call","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","Number","instance","Constructor","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","Array","Symbol","iterator","obj","from","number","toStr","toString","fn","Math","maxSafeInteger","toLength","len","toInteger","isFinite","floor","abs","pow","items","arrayLike","min","max","C","mapFn","T","arguments","A","kValue","k","find","predicate","o","thisArg","findIndex","includes","searchElement","fromIndex","sameValueZero","x","y","isNaN","n","window","NodeList","forEach","callback","assign","varArgs","nextSource","to","index","nextKey","hasOwnProperty","NOOP","document","SUPPORTS_PAGE_OFFSET","undefined","pageXOffset","CSS1_COMPATIBLE","compatMode","AGENT","navigator","userAgent","ELLIPSIFY_PATTERN","MOBILE_PATTERN","Console","console","settings","metrics","report","_len","args","_key","err","Error","messageIndex","arg","stack","split","shift","push","reportStack","join","filter","a","splice","error","version","warn","apply","concat","message","_len2","_key2","selector","parent","qwery","querySelector","querySelectorAll","net","endpoint","sandboxEndpoint","routes","ads","getRoute","route","params","env","request","keys","replace","util","isEmpty","test","val","trim","getPageArguments","query","eqIndex","includeHashArguments","decodeURIComponent","parts","part","indexOf","queryArgs","hashArgs","substring","location","search","hash","mixed","out","map","deepClone","_typeof","options","output","input","isArray","toISOString","childObject","childKey","ignoreArrays","arrayToCsv","flatten","shortid","clusterWorkerId","shuffled","crypto","msCrypto","require","getRandomValues","randomBytes","encode","loopCounter","random","dest","Uint8Array","str","done","randomByte","REDUCE_TIME","seconds","counter","previousSeconds","Date","getTime","ui","getScrollPosition","documentElement","scrollLeft","body","getElementSize","element","scrollTop","includeMargin","size","height","offsetHeight","width","offsetWidth","style","currentStyle","getComputedStyle","parseInt","marginTop","marginBottom","getPageSize","marginLeft","marginRight","html","getViewportSize","scrollWidth","clientWidth","clientHeight","scrollHeight","vh","isMobileZoom","inWidth","innerWidth","inHeight","innerHeight","getEventPosition","ex","et","event","ey","el","type","name","getElementPosition","clientX","clientY","rect","getBoundingClientRect","y2","x1","left","contains","y1","x2","top","right","bottom","e","exception","elementArea","iLeft","s","iRight","v","vw","iTop","iBottom","intersectionArea","isElementVisible","getPercentageInViewport","_okanjo$ui$_getInters","_getIntersection","replacedText","container","substr","parentNode","targetHeight","useTextContent","textContent","text","innerText","safety","replacer","match","span","createElement","content","setAttribute","innerHTML","fitImages","appendChild","backgroundImage","src","img","display","backgroundposition","method","url","payload","res","ActiveXObject","calledBack","req","timeout","ontimeout","attributes","statusCode","onreadystatechange","status","data","JSON_TEST","getResponseHeader","parse","responseText","xhr","toUpperCase","open","withCredentials","setRequestHeader","post","send","get","bind","encodeURIComponent","getKey","keyPrefix","stringify","pairs","expireDate","setDate","set","cookieName","expireDays","getDate","expires","toUTCString","path","secure","protocol","cookieValue","cookie","nameTest","decodeURI","TemplateEngine","_templates","_css","classDetects","template","beforeRender","nodeType","lib","Mustache","markup","css","head","id","styleSheet","cssText","templateName","context","model","_this","okanjoMetricUrl","now","blockClasses","ensureCss","render","formatCurrency","decimals","decimalSeparator","toFixed","j","thousandsSeparator","slice","engine","$modalContainer","$modalWindow","isMobile","$modalOuter","$html","$body","$modalSkin","$modalInner","$modalClose","$modalFrame","addListener","addEventListener","attachEvent","getWindowHeight","handler","setTimeout","handleReposition","t","closeModal","stopPropagation","preventDefault","removeClass","addClass","className","RegExp","openModal","IS_MOBILE","setContent","initialized","show","createElements","bindEvents","modal","hide","Metrics","sourceCh","_getStoredQueue","sourceCx","pageId","defaultChannel","Channel","external","sid","_checkUrlForReferral","queue","Params","JSON","localStorage","delay","_this2","_saveQueueTimeout","clearTimeout","_saveQueue","_queue","object_type","metric_session","event_type","Event","correlation","urlSid","_noProcess","sourceChannel","pageArgs","channel","localSid","trackEvent","sourceContext","ch","_push","page","view","href","_processQueue","_this3","_processTimeout","_batchSend","_updateSid","item","_this4","events","win","metrics_batch","m","exclude","Meta","ok_ver","pgid","referrer","ref","ttl","_len3","_key3","pw","w","ph","h","containerSize","innerSize","childNodes","wix1","wiy1","wox1","wox2","woy2","wix2","wiy2","vp","pos","vx1","vy1","vx2","vy2","jsEvent","_len4","_key4","_len5","_key5","MetricEvent","impression","interaction","Action","click","inline_click","article","thirdparty_ad","cart","order","order_item","user","widget","product","store","cause","marketplace","placement","live","testing","store_widget","Environment","others","_this5","_data","addEventInfo","addViewportInfo","_element","addElementInfo","addWidgetInfo","_len6","_key6","addEventMeta","_normalizeEvent","trackPageView","EventEmitter","_events","listener","idx","listeners","_arguments","_this6","removeListener","_EventEmitter","on","DATA_REPLACE_PATTERN","Widget","DATA_ATTRIBUTE_PATTERN","getPrototypeOf","_this7","instanceId","config","_applyConfiguration","_setCompatibilityOptions","_ensurePlacementKey","load","_this8","normalizedKey","_default","_this9","group","origKey","getGroup","showError","setMarkup","attr","exec","Field","_convert","_strip","_group","converter","toLowerCase","parseFloat","strip","bool","int","float","FILTERS","_Widget","DISPLAY","string","ARTICLE_META","array","_okanjo$_Widget$Field","MINIMUM_VIEW_PX","MINIMUM_VIEW_TIME","Placement","MINIMUM_VIEW_FREQ","_metricBase","_viewedWatchers","_this10","_response","_viewWatcherIv","no_init","init","_okanjo$_Widget","q","url_referrer","not_url_paths","organization_id","organization_name","property_name","store_name","external_id","sku","external_store_id","condition","manufacturer","upc","tags","category","min_price","max_price","isbn","max_donation_percent","pools","sort_by","min_donation_percent","skip","donation_to","template_theme","template_variant","template_cta_color","url_category","url_keywords","proxy_url","expandable","default","backwards","disable_inline_buy","disable_popup","_this11","isBackfill","getSettings","filters","backfill","shortfill","article_meta","backfillPattern","shortfillPattern","matches","isShortfill","_this12","_setMetricBase","_fetchContent","_reportWidgetLoad","_mergeResponseSettings","_updateBaseMetaFromResponse","_showContent","base","cx","wgid","_this13","res_type","decl","declined","res_bf","backfilled","res_sf","shortfilled","_addOnceViewedHandler","res_length","results","meta","getConfig","viewport","emit","sandbox","_this14","_this15","ptseed","pten","aid","enabled","ptid","seed","msg","ContentTypes","products","articles","adx","_showADX","additionalUrlParams","joiner","ok_msid","_okjr","utm_source","utm_campaign","u","toUrl","bf","sf","resource","clickId","_cid","urlParam","cid","trackParam","spltfl_seg","splitfill_segment","currentTarget","ok_cid","ea","_event","additionalParams","_getClickThroughURL","_clickId","_additionalParams","contentType","defaultName","template_name","isTemplateRegistered","template_layout","template_cta_style","brandColor","brandCSS","brandCSSId","registerCss","controller","successfulCount","_toggleViewWatcher","setInterval","_checkViewWatchers","clearInterval","inline_buy_url","_getTemplate","DefaultTemplates","offer","_price_formatted","price","_index","_escaped_inline_buy_url","_image_url","image_urls","_escaped_buy_url","buy_url","getAttribute","_this16","_handleResourceMouseDown","_handleProductClick","ellipsify","showNativeBuyUx","showPopupNativeBuyUx","popup","_popupFrame","vspace","allowfullscreen","frame","class","hspace","webkitallowfullscreen","mozallowfullscreen","scrolling","frame_height","ad_size","_escaped_url","_this17","_handleArticleClick","_this18","Sizes","adUnitPath","declineReason","adx_unit_path","renderContext","frameborder","ta_w","ta_h","ta_s","contentWindow","write","clickUrl","close","button_2","rectangle","super_leaderboard","wide_skyscraper","half_page","billboard","micro_bar","button_1","full_banner","half_banner","large_rectangle","skyscraper","square","vertical_rectangle","three_to_one_rectangle","square_button","vertical_banner","medium_rectangle","Product","_okanjo$Placement","_this19","ids","mode","take","sold_by","url_selectors","marketplace_id","selectors","marketplace_status","property_id","suboptimal","Ad","_okanjo$Placement2","_this20","global","objectToString","nodeName","isFunction","object","mustache","typeStr","escapeRegExp","hasProperty","propName","nonSpaceRe","testRegExp","re","regExpTest","isWhitespace","tagRe","String","entityMap","parseTemplate","nonSpace","hasTag","spaces","closingTagRe","closingCurlyRe","openingTagRe","compileTags","tagsToCompile","spaceRe","start","scanner","stripSpace","sections","tokens","chr","token","openSection","valueLength","scanUntil","charAt","equalsRe","scan","curlyRe","pop","squashedTokens","lastToken","numTokens","nestedTokens","nestTokens","section","collector","Scanner","tail","Context","parentContext","cache",".","Writer","&","escapeHtml","<",">","\"","'","/","whiteRe","eos","lookupHit","names","partials","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","lookup","escape","clearCache","defaultWriter","to_html","result"],"mappings":"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","file":"okanjo.min.js","sourcesContent":["/*! okanjo-js v1.17.0 | (c) 2013 Okanjo Partners Inc | https://okanjo.com/ */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.okanjo = factory();\n  }\n}(this, function() {\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n    Array.from = function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function isCallable(fn) {\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function toInteger(value) {\n            var number = Number(value);\n            if (isNaN(number)) {\n                return 0;\n            }\n            if (number === 0 || !isFinite(number)) {\n                return number;\n            }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function toLength(value) {\n            var len = toInteger(value);\n            return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike /*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T;\n            if (typeof mapFn !== 'undefined') {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < len… (also steps a - h)\n            var kValue;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }();\n}\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function value(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return kValue.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return undefined.\n            return undefined;\n        }\n    });\n}\n// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nif (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n        value: function value(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return k.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return k;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return -1.\n            return -1;\n        }\n    });\n}\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n        value: function value(searchElement, fromIndex) {\n\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || window;\n        for (var i = 0; i < this.length; i++) {\n            callback.call(thisArg, this[i], i, this);\n        }\n    };\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign != 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, \"assign\", {\n        value: function assign(target, varArgs) {\n            // .length of function is 2\n            'use strict';\n\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        },\n        writable: true,\n        configurable: true\n    });\n}\n\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nvar okanjo = function (window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    var SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    var CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    var AGENT = window.navigator.userAgent;\n    var ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    var MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    var NOOP = function NOOP() {};\n    var Console = window.console;\n\n    // Place to pull defaults, if already set\n    var settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    var okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"1.17.0\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: function report() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var err = args.find(function (arg) {\n                return arg instanceof Error;\n            });\n            if (!err) {\n                var messageIndex = args.findIndex(function (arg) {\n                    return typeof arg === \"string\";\n                });\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                var stack = new Error().stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter(function (a) {\n                    return a !== err;\n                });\n            }\n\n            Console.error('[Okanjo v' + okanjo.version + ']: ' + err.stack);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: function warn(message) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            var err = new Error(message);\n\n            Console.warn('[Okanjo v' + okanjo.version + ']: ' + err.stack);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: function qwery(selector, parent) {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: function getRoute(route, params, env) {\n            if (params) {\n                Object.keys(params).forEach(function (key) {\n                    route = route.replace(':' + key, params[key] + \"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: function isEmpty(val) {\n            return val === null || val === undefined || typeof val === \"string\" && val.trim().length === 0;\n        },\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: function isMobile() {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: function getPageArguments(includeHashArguments) {\n\n            var split = function split(query) {\n                query = query || \"\";\n                var params = {};\n                var parts = query.split('&');\n                parts.forEach(function (part) {\n                    var eqIndex = part.indexOf('=');\n                    var key = void 0,\n                        value = void 0;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            var queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            var hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach(function (key) {\n                return queryArgs[key] = hashArgs[key];\n            });\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = function (mixed, out) {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map(function (val) {\n                return okanjo.util.deepClone(val);\n            }));\n        } else if ((typeof mixed === 'undefined' ? 'undefined' : _typeof(mixed)) === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach(function (key) {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = function (input) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var output = {};\n\n        if (input !== undefined && input !== null) {\n            Object.keys(input).forEach(function (key) {\n                // Convert object ids to hex strings\n                if (input[key] instanceof Date) {\n                    if (options.dateToIso) {\n                        output[key] = input[key].toISOString(); // convert to iso\n                    } else {\n                        output[key] = input[key]; // as-is\n                    }\n                } else if (_typeof(input[key]) === 'object' && input[key] !== null) {\n                    // Allow ignoring arrays if desired\n                    if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                        output[key] = input[key];\n                    } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                        output[key] = input[key].join(',');\n                    } else {\n                        // Make child objects flat too (always returns object so Object.keys is safe)\n                        var childObject = okanjo.util.flatten(input[key], options);\n                        Object.keys(childObject).forEach(function (childKey) {\n                            output[key + '_' + childKey] = childObject[childKey];\n                        });\n                    }\n                } else {\n                    // Copy value references\n                    output[key] = input[key];\n                }\n            });\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = function (clusterWorkerId) {\n\n        var shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n            crypto = window.crypto || window.msCrypto || typeof require === \"function\" && require('crypto'),\n            randomByte = function randomByte() {\n            /* istanbul ignore next: platform diffs out of scope */\n            if (crypto && crypto.randomBytes) {\n                return crypto.randomBytes(1)[0] & 0x30;\n            } else if (!crypto || !crypto.getRandomValues) {\n                return Math.floor(Math.random() * 256) & 0x30;\n            }\n            /* istanbul ignore next: platform diffs out of scope */\n            var dest = new Uint8Array(1);\n            /* istanbul ignore next: platform diffs out of scope */\n            crypto.getRandomValues(dest);\n            /* istanbul ignore next: platform diffs out of scope */\n            return dest[0] & 0x30;\n        },\n            encode = function encode(number) {\n            var loopCounter = 0,\n                done = void 0,\n                str = '';\n\n            while (!done) {\n                str = str + shuffled[number >> 4 * loopCounter & 0x0f | randomByte()];\n                done = number < Math.pow(16, loopCounter + 1);\n                loopCounter++;\n            }\n            return str;\n        },\n\n\n        // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n        // This number should be updated every year or so to keep the generated id short.\n        // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n        REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        var counter = void 0,\n            previousSeconds = void 0;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function () {\n            var str = '',\n                seconds = Math.floor((new Date().getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    }();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: function getScrollPosition() {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: function getElementSize(element, includeMargin) {\n            var size = {\n                height: element.offsetHeight,\n                width: element.offsetWidth\n            };\n            var style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: function getPageSize() {\n            var body = document.querySelector('body');\n            var html = document.documentElement;\n\n            return {\n                w: Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth),\n\n                h: Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight)\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: function getViewportSize() {\n            var element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */ : document.body;\n            var width = element.clientWidth;\n            var height = element.clientHeight;\n            var inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            var inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            var isMobileZoom = inWidth && width > inWidth || inHeight && height > inHeight;\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: function getEventPosition(event) {\n            var ex = event.pageX;\n            var ey = event.pageY;\n            var body = document.body;\n            var el = document.documentElement;\n            var scrollLeft = 'scrollLeft';\n            var scrollTop = 'scrollTop';\n            var type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: function getElementPosition(element) {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            var err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                var rect = element.getBoundingClientRect();\n                var body = document.body.getBoundingClientRect();\n                // let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    // x1: rect.left + pos.x,\n                    // y1: rect.top + pos.y,\n                    // x2: rect.right + pos.x,\n                    // y2: rect.bottom + pos.y\n\n                    // This might fix\n                    x1: rect.left - body.left,\n                    y1: rect.top - body.top,\n                    x2: rect.right - body.left,\n                    y2: rect.bottom - body.top\n\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element: element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: function _getIntersection(e, s, v) {\n            var iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x + v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y + v.vh),\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea: intersectionArea,\n                elementArea: elementArea\n            };\n        },\n\n        /**\n         * Checks whether the element is actually displayed on the DOM\n         * @param element\n         * @return {boolean}\n         */\n        isElementVisible: function isElementVisible(element) {\n            /* istanbul ignore next: jsdom won't trigger this */\n            return element.offsetWidth > 0 && element.offsetHeight > 0;\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: function getPercentageInViewport(element) {\n            var e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n\n            var _okanjo$ui$_getInters = okanjo.ui._getIntersection(e, s, v),\n                intersectionArea = _okanjo$ui$_getInters.intersectionArea,\n                elementArea = _okanjo$ui$_getInters.elementArea;\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n\n\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function (element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        var parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        var text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000,\n            // Safety switch to bust out of the loop in the event something goes terribly wrong\n        replacer = function replacer(match) {\n            /* istanbul ignore next: n/a to jsdom */\n            replacedText = match.substr(0, match.length - 3) + replacedText;\n            /* istanbul ignore next: n/a to jsdom */\n            return '...';\n        };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && safety-- > 0) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            var content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class', 'okanjo-ellipses');\n            span.setAttribute('class', 'okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length - 3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length - 3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n    };\n\n    /**\n     * Locates images with the class okanjo-fit and ensures that they get filled.\n     * This is basically a object-fit hacky workaround\n     * @param element\n     */\n    okanjo.ui.fitImages = function (element) {\n        // Detect objectFit support\n        /* istanbul ignore else: n/a to jsdom */\n        if ('objectFit' in document.documentElement.style === false) {\n            // Find images to fit\n            element.querySelectorAll('img.okanjo-fit').forEach(function (img) {\n\n                // Hide the image\n                img.style.display = 'none';\n\n                // Update the parent w/ the background\n                var parent = img.parentNode;\n                parent.style.backgroundSize = 'cover';\n                parent.style.backgroundImage = 'url(' + img.src + ')';\n                parent.style.backgroundposition = 'center center';\n            });\n        }\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n}(window, document);\n\"use strict\";\n\n(function (window) {\n\n    var JSON_TEST = /^application\\/json/;\n    var okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        var req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        var calledBack = false;\n\n        // Normalized done handler\n        var done = function done(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function (e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function (e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    var res = void 0;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    var encode = function encode(val) {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent('' + val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    var getKey = function getKey(key, keyPrefix) {\n        if (keyPrefix) {\n            return keyPrefix + '[' + encode(key) + ']';\n        } else {\n            return encode(key);\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = function (obj, keyPrefix) {\n        var pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (v) {\n                    return pairs.push(getKey(key, keyPrefix) + '=' + encode(v));\n                }); // Does not do that PHP garbage with key[]=val\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\" && value !== null) {\n                // Recurse\n                var res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: function set(cookieName, value, expireDays) {\n            var expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            var expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            var path = \" Path=/\";\n            var secure = window.location.protocol === 'https:' ? ' Secure;' : '';\n            // const secure = ' Secure;';\n            var cookieValue = encodeURI(value) + ';' + expires + secure + ' SameSite=None;' + path;\n            // console.log('setting cookie', cookieName, cookieValue)\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: function get(cookieName) {\n            var output = null;\n            document.cookie.split(\";\").find(function (cookie) {\n                var nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                var value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                if (nameTest === cookieName) {\n                    output = decodeURI(value);\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            return output;\n        }\n    };\n})(window, document);\n\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n\n    var TemplateEngine = function () {\n        function TemplateEngine() {\n            _classCallCheck(this, TemplateEngine);\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n\n\n        _createClass(TemplateEngine, [{\n            key: 'registerTemplate',\n            value: function registerTemplate(name, template, beforeRender, options) {\n\n                if ((typeof template === 'undefined' ? 'undefined' : _typeof(template)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (template.nodeType === undefined) {\n                        throw new Error('Parameter template must be a string or a DOM element');\n                    } else {\n                        template = template.innerHTML;\n                        okanjo.lib.Mustache.parse(template);\n                    }\n                } else if (typeof template !== \"string\") {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                }\n\n                // Shift options if only have 3 params\n                if (arguments.length === 3 && (typeof beforeRender === 'undefined' ? 'undefined' : _typeof(beforeRender)) === \"object\") {\n                    options = beforeRender;\n                    beforeRender = null;\n                } else {\n                    options = options || {};\n                }\n\n                if (beforeRender && typeof beforeRender !== \"function\") {\n                    throw new Error('Parameter beforeRender must be a function');\n                }\n\n                // Assign the template\n                this._templates[name] = {\n                    markup: template,\n                    options: options,\n                    beforeRender: beforeRender\n                };\n            }\n\n            /**\n             * Registers a CSS payload for use\n             * @param name\n             * @param css\n             * @param options\n             */\n\n        }, {\n            key: 'registerCss',\n            value: function registerCss(name, css, options) {\n                options = options || {};\n\n                if ((typeof css === 'undefined' ? 'undefined' : _typeof(css)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (css.nodeType === undefined) {\n                        throw new Error('Parameter css must be a string or a DOM element');\n                    }\n                } else if (typeof css !== \"string\") {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n\n                this._css[name] = {\n                    markup: css,\n                    options: options\n                };\n            }\n\n            /**\n             * Checks whether a template is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: 'isTemplateRegistered',\n            value: function isTemplateRegistered(name) {\n                return !!this._templates[name];\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Checks whether a CSS payload is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: 'isCssRegistered',\n            value: function isCssRegistered(name) {\n                return !!this._css[name];\n            }\n\n            /**\n             * Ensures that a CSS payload has been added to the DOM\n             * @param name\n             */\n\n        }, {\n            key: 'ensureCss',\n            value: function ensureCss(name) {\n                if (this._css[name]) {\n                    //noinspection JSValidateTypes\n                    var css = this._css[name],\n                        id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                    // Check for css element on page, if we have an ID to look for\n                    if (id) {\n                        var element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                        if (!element) {\n                            var head = document.head,\n                                style = document.createElement('style');\n\n                            style.id = id;\n                            style.setAttribute('type', 'text/css');\n\n                            /* istanbul ignore else: old ie */\n                            if (style.hasOwnProperty) {\n                                // old ie\n                                style.innerHTML = css.markup;\n                            } else {\n                                style.styleSheet.cssText = css.markup;\n                            }\n\n                            if (head) {\n                                head.appendChild(style);\n                            } else {\n                                // NO HEAD, just prepend to body then\n                                var body = document.body;\n                                if (body) {\n                                    body.appendChild(style);\n                                } else {\n                                    // And if this doesn't work, just give up\n                                    okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    okanjo.report('Attempted to add CSS template \"' + name + '\" to the DOM, however it does not appear to be registered?');\n                }\n            }\n\n            /**\n             * Renders a template and returns the markup\n             * @param templateName\n             * @param context\n             * @param model\n             * @return {string}\n             */\n\n        }, {\n            key: 'render',\n            value: function render(templateName, context, model) {\n                var _this = this;\n\n                model = model || {};\n                var template = this._templates[templateName];\n\n                // If there's a data controller closure set, and if so, run the data through there\n                if (template.beforeRender) {\n                    model = template.beforeRender.call(context, model);\n                }\n\n                // Attach globals\n                model.okanjo = okanjo;\n                model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//, ''); // Url w/o scheme to prevent mixed-content warnings\n                model.now = function () {\n                    return new Date().getTime();\n                };\n                model.classDetects = this.classDetects;\n\n                //noinspection JSUnresolvedVariable\n                if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                    model.classDetects += \" \" + model.blockClasses.join(' ');\n                    delete model.blockClasses;\n                }\n\n                // Add CSS unless we are told not to\n                if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                    template.options.css.forEach(function (css) {\n                        return _this.ensureCss(css);\n                    });\n                    delete model.css;\n                }\n\n                // Render the template and return the result\n                return okanjo.lib.Mustache.render(template.markup, model);\n            }\n        }]);\n\n        return TemplateEngine;\n    }();\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n\n\n    TemplateEngine.formatCurrency = function (value) {\n        var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n        var decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n        var thousandsSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ',';\n\n        var s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        var j = i.length;\n        j = j > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    /*\n      div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n      */\n\n    var okanjo = window.okanjo;\n    var IS_MOBILE = okanjo.util.isMobile();\n\n    var initialized = false,\n\n    // scrollY = null,\n\n    // Selectors\n    $html = void 0,\n        $body = void 0,\n        $modalContainer = void 0,\n        $modalWindow = void 0,\n        $modalSkin = void 0,\n        $modalOuter = void 0,\n        $modalInner = void 0,\n        $modalClose = void 0,\n        $modalFrame = void 0,\n        createElements = function createElements() {\n\n        // Page elements\n        //noinspection JSUnresolvedFunction\n        $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n        //noinspection JSUnresolvedFunction\n        $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n        // Modal elements\n        $modalContainer = document.createElement('div');\n        $modalWindow = document.createElement('div');\n        $modalSkin = document.createElement('div');\n        $modalOuter = document.createElement('div');\n        $modalInner = document.createElement('div');\n        $modalClose = document.createElement('div');\n        $modalFrame = document.createElement('iframe');\n\n        $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n        $modalWindow.setAttribute('class', 'okanjo-modal-window');\n        $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n        $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n        $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n        $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n        $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n        $modalFrame.setAttribute('frameborder', '0');\n        $modalFrame.setAttribute('vspace', '0');\n        $modalFrame.setAttribute('hspace', '0');\n        $modalFrame.setAttribute('webkitallowfullscreen', '');\n        $modalFrame.setAttribute('mozallowfullscreen', '');\n        $modalFrame.setAttribute('allowfullscreen', '');\n        $modalFrame.setAttribute('scrolling', 'auto');\n\n        $modalClose.innerHTML = '×';\n\n        // Create the modal element tree\n        $modalInner.appendChild($modalFrame);\n        $modalOuter.appendChild($modalInner);\n        $modalSkin.appendChild($modalOuter);\n        $modalWindow.appendChild($modalSkin);\n        $modalWindow.appendChild($modalClose);\n        $modalContainer.appendChild($modalWindow);\n\n        // Add the modal stuff to the body\n        $body.appendChild($modalContainer);\n    },\n        addListener = function addListener(el, event, handler) {\n        /* istanbul ignore else: old browsers */\n        if (el.addEventListener) {\n            el.addEventListener(event, handler, false);\n        } else {\n            el.attachEvent(\"on\" + event, handler);\n        }\n    },\n        getWindowHeight = function getWindowHeight() {\n        return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n    },\n        handleReposition = function handleReposition() {\n        // scrollY = okanjo.ui.getScrollPosition().y;\n        //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n        $modalWindow.style.height = getWindowHeight() - 80 + \"px\";\n    },\n        bindEvents = function bindEvents() {\n\n        // If the device orientation changes, adjust the modal view port\n        addListener(window, 'orientationchange', function () {\n            for (var t = 0; t < 2; t++) {\n                setTimeout(handleReposition, 1000 * t + 10);\n            }\n        });\n\n        // If the window changes size, also adjust the modal view port\n        addListener(window, 'resize', function () {\n            setTimeout(handleReposition, 100);\n        });\n\n        // Click the overlay to close the modal\n        addListener($modalContainer, 'click', closeModal);\n\n        // If you click in the modal, don't close it!\n        addListener($modalWindow, 'click', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        // Click the close button to close it\n        addListener($modalClose, 'click', function (e) {\n\n            // Don't close it twice\n            e.preventDefault();\n            e.stopPropagation();\n\n            closeModal();\n        });\n    },\n\n\n    //removeListener = function(el, event, handler) {\n    //    if (el.removeEventListener) {\n    //        el.removeEventListener(event, handler);\n    //    } else {\n    //        el.detachEvent(\"on\" + event, handler);\n    //    }\n    //},\n\n    addClass = function addClass(el, name) {\n        el.className += \" \" + name;\n    },\n        removeClass = function removeClass(el, name) {\n        el.className = el.className.replace(new RegExp(' *?' + name), '');\n    },\n        openModal = function openModal() {\n\n        // scrollY = document.body.scrollTop;\n\n        removeClass($modalContainer, 'okanjo-modal-hidden');\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        handleReposition();\n\n        addClass($html, \"okanjo-modal-active\");\n\n        if (!IS_MOBILE) {\n            addClass($html, \"okanjo-modal-margin-fix\");\n        }\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n        }, 10);\n\n        // Click the overlay to close the modal\n        //addListener($body, 'click', closeModal);\n    },\n        closeModal = function closeModal() {\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n            addClass($modalContainer, \"okanjo-modal-hidden\");\n\n            removeClass($html, \"okanjo-modal-active\");\n            if (!IS_MOBILE) {\n                removeClass($html, \"okanjo-modal-margin-fix\");\n            }\n        }, 210);\n\n        // Click the overlay to close the modal\n        //removeListener($body, 'click', closeModal);\n    },\n\n\n    /**\n     * Insert an element or markup into the modal\n     * @param content\n     */\n    setContent = function setContent(content) {\n\n        // Remove existing content\n        $modalInner.innerHTML = \"\";\n\n        // Insert new content\n        if (typeof content === \"string\") {\n            $modalInner.innerHTML = content;\n        } else {\n            $modalInner.appendChild(content);\n        }\n    };\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function show(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function hide() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n\n    var Metrics = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Metrics() {\n            _classCallCheck(this, Metrics);\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n\n\n        _createClass(Metrics, [{\n            key: '_getStoredQueue',\n            value: function _getStoredQueue() {\n                if (window.localStorage[Metrics.Params.queue]) {\n                    try {\n                        var queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                        if (Array.isArray(queue)) {\n                            return queue;\n                        } else {\n                            okanjo.report('Stored queue is not a queue', { queue: queue });\n                            return [];\n                        }\n                    } catch (e) {\n                        okanjo.report('Failed to load metric queue from storage', { err: e });\n                        return [];\n                    }\n                } else {\n                    // not stored\n                    return [];\n                }\n            }\n\n            /**\n             * Updates the queue stored in storage, in the event we can't complete our submissions\n             * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n             * @private\n             */\n\n        }, {\n            key: '_saveQueue',\n            value: function _saveQueue(delay) {\n                var _this2 = this;\n\n                if (delay) {\n                    if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                    this._saveQueueTimeout = setTimeout(function () {\n                        _this2._saveQueue(false);\n                        _this2._saveQueueTimeout = null;\n                    }, 100);\n                } else {\n                    window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n                }\n            }\n\n            /**\n             * Extract contextual pass-through data from the URL, if present\n             * @private\n             */\n\n        }, {\n            key: '_checkUrlForReferral',\n            value: function _checkUrlForReferral() {\n                var pageArgs = okanjo.util.getPageArguments(true),\n                    urlSid = pageArgs[Metrics.Params.name],\n                    localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name),\n                    // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                    sourceChannel = pageArgs[Metrics.Params.channel];\n\n                // If for some reason, both are set, record the incident as a possible correlation\n                if (urlSid && localSid && urlSid !== localSid) {\n                    this.trackEvent({\n                        object_type: Metrics.Object.metric_session,\n                        event_type: Metrics.Event.correlation,\n                        id: urlSid + \"_\" + localSid,\n                        ch: this.defaultChannel,\n                        _noProcess: true\n                    });\n                }\n\n                // Update local values\n                this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n                this.sourceCh = sourceChannel || null;\n                this.sourceCx = sourceContext || null;\n            }\n\n            /**\n             * Submits an individual event metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: 'trackEvent',\n            value: function trackEvent(event, callback) {\n                // Ensure the event contains the required fields\n                if (!event.object_type || !event.event_type) {\n                    okanjo.report('Invalid metric to track (missing object_type or event_type)', { event: event });\n                    return;\n                }\n\n                // Queue the event for publishing\n                this._push(event, callback);\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Submits a page view metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: 'trackPageView',\n            value: function trackPageView(event, callback) {\n                event = event || {};\n                event.object_type = Metrics.Object.page;\n                event.event_type = Metrics.Event.view;\n                event.id = event.id || window.location.href;\n                event.ch = event.ch || this.defaultChannel;\n\n                // Queue the event for publishing\n                this.trackEvent(event, callback);\n            }\n\n            /**\n             * Adds an event to the queue\n             * @param event\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: '_push',\n            value: function _push(event, callback) {\n                this._queue.push({ event: event, callback: callback });\n\n                // Save the queue\n                this._saveQueue(true);\n\n                // Start burning down the queue, unless the event says not to\n                if (event._noProcess) {\n                    delete event._noProcess;\n                } else {\n                    this._processQueue();\n                }\n            }\n\n            /**\n             * Burn down the queue\n             * @private\n             */\n\n        }, {\n            key: '_processQueue',\n            value: function _processQueue() {\n                var _this3 = this;\n\n                // If the queue is not already being processed, and there's stuff to process, continue sending them\n                if (!this._processTimeout && this._queue.length > 0) {\n                    this._processTimeout = setTimeout(function () {\n\n                        // Pull the items we're going to batch out of the queue\n                        var items = _this3._queue.splice(0, 255);\n                        _this3._saveQueue(false);\n\n                        // Track the item\n                        _this3._batchSend(items, function (err, res) {\n                            // TODO: If there was an error, consider splicing the batch back into the queue\n\n                            // Update / Set the metric sid on the publisher\n                            /* istanbul ignore else: server barks */\n                            if (res && res.data && res.data.sid) _this3._updateSid(res.data.sid);\n\n                            // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                            _this3._processTimeout = null;\n                            _this3._processQueue();\n\n                            // Fire the event callbacks if there are any\n                            items.forEach(function (item) {\n                                item.callback && item.callback(err, res);\n                            });\n                        });\n                    }, 0); // break event loop, maybe\n                }\n            }\n\n            /**\n             * Sends a bunch of queued metric events\n             * @param items\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: '_batchSend',\n            value: function _batchSend(items, callback) {\n                var _this4 = this;\n\n                // Normalize event data\n                var events = items.map(function (item) {\n                    _this4._normalizeEvent(item.event);\n\n                    // Strip duplicated data from event batch\n                    delete item.event.sid;\n                    delete item.event.win;\n\n                    return item.event;\n                });\n\n                var payload = {\n                    events: events,\n                    win: window.location.href\n                };\n\n                var route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n                // Set sid if present\n                if (this.sid) {\n                    payload.sid = this.sid;\n                }\n\n                // Send it\n                okanjo.net.request.post(route, payload, function (err, res) {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err: err, res: res, items: items, route: route });\n                    }\n                    callback && callback(err, res);\n                });\n            }\n\n            /**\n             * Normaizes events so that they contain consistent data values\n             * @param event\n             * @private\n             */\n\n        }, {\n            key: '_normalizeEvent',\n            value: function _normalizeEvent(event) {\n\n                // Ensure meta is ready to receive values\n                event.m = event.m || {};\n\n                // Set key\n                event.key = event.key || event.m.key || okanjo.key || undefined;\n\n                // Set session\n                if (this.sid) event.sid = this.sid;\n\n                // Clone the metadata, since it might be a direct reference to a widget property\n                // Deleting properties on the meta object could be very destructive\n                event.m = Object.assign({}, event.m); // event.m should be flat\n\n                // Strip meta keys that should be excluded\n                Object.keys(Metrics.Meta.exclude).forEach(function (key) {\n                    return delete event.m[key];\n                });\n\n                // Set referral channel / context\n                if (this.sourceCh) {\n                    event.m.ref_ch = this.sourceCh;\n                }\n                if (this.sourceCx) {\n                    event.m.ref_cx = this.sourceCx;\n                }\n\n                // Set page group id\n                event.m.pgid = this.pageId;\n\n                // Set okanjo version\n                event.m.ok_ver = okanjo.version;\n\n                // Finalize metadata\n                event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n                // Ensure metadata strings won't exceed the imposed limit\n                Object.keys(event.m).forEach(function (key) {\n                    if (typeof event.m[key] === \"string\") {\n                        event.m[key] = event.m[key].substr(0, 255);\n                    }\n                });\n\n                // Set page source reference\n                if (document.referrer) {\n                    event.ref = document.referrer;\n                }\n\n                // Set the window location\n                event.win = window.location.href;\n            }\n\n            /**\n             * Updates the stored session identifier\n             * @param sid\n             * @private\n             */\n\n        }, {\n            key: '_updateSid',\n            value: function _updateSid(sid) {\n                if (!this.sid && sid) {\n                    this.sid = sid;\n                    window.localStorage[Metrics.Params.name] = sid;\n                    okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'create',\n\n\n            //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n            /**\n             * Helper to create a new fluent event structure\n             * @param args\n             * @return {*}\n             */\n            value: function create() {\n                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                    args[_key3] = arguments[_key3];\n                }\n\n                return Metrics.create.apply(null, args);\n            }\n        }], [{\n            key: 'addElementInfo',\n            value: function addElementInfo(element, event) {\n                var page = okanjo.ui.getPageSize(),\n                    size = okanjo.ui.getElementPosition(element);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.pw = page.w;\n                event.m.ph = page.h;\n                event.m.x1 = size.x1;\n                event.m.y1 = size.y1;\n                event.m.x2 = size.x2;\n                event.m.y2 = size.y2;\n\n                return event;\n            }\n        }, {\n            key: 'addWidgetInfo',\n            value: function addWidgetInfo(element, event) {\n                var containerSize = okanjo.ui.getElementPosition(element);\n                var innerSize = okanjo.ui.getElementPosition(element.childNodes[0]);\n\n                event = event || {};\n                event.m = event.m || {};\n\n                // placement div size\n                event.m.wox1 = containerSize.x1;\n                event.m.woy1 = containerSize.y1;\n                event.m.wox2 = containerSize.x2;\n                event.m.woy2 = containerSize.y2;\n\n                // inner size (might be centered or something)\n                event.m.wix1 = innerSize.x1;\n                event.m.wiy1 = innerSize.y1;\n                event.m.wix2 = innerSize.x2;\n                event.m.wiy2 = innerSize.y2;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'addViewportInfo',\n            value: function addViewportInfo(event) {\n                var vp = okanjo.ui.getViewportSize(),\n                    pos = okanjo.ui.getScrollPosition();\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.vx1 = pos.x;\n                event.m.vy1 = pos.y;\n                event.m.vx2 = pos.x + vp.vw;\n                event.m.vy2 = pos.y + vp.vh;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'addEventInfo',\n            value: function addEventInfo(jsEvent, event) {\n                var pos = okanjo.ui.getEventPosition(jsEvent);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.et = pos.et;\n                event.m.ex = pos.ex;\n                event.m.ey = pos.ey;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param event\n             * @param args\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'addEventMeta',\n            value: function addEventMeta(event) {\n                event = event || {};\n                event.m = event.m || {};\n\n                for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                    args[_key4 - 1] = arguments[_key4];\n                }\n\n                event.m = Object.assign.apply(Object, [event.m].concat(args));\n\n                return event;\n            }\n\n            /**\n             * Helper to create a new fluent event structure\n             * @param data\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'create',\n            value: function create(data) {\n                for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                    args[_key5 - 1] = arguments[_key5];\n                }\n\n                // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n                return new MetricEvent(data, args);\n            }\n        }]);\n\n        return Metrics;\n    }();\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n\n\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key', 'callback', 'metrics_channel_context', 'metrics_context', 'mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n\n    var MetricEvent = function () {\n        function MetricEvent(data, others) {\n            var _this5 = this;\n\n            _classCallCheck(this, MetricEvent);\n\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach(function (data) {\n                    _this5.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n\n\n        _createClass(MetricEvent, [{\n            key: 'data',\n            value: function data(_data) {\n                Object.assign(this, okanjo.util.deepClone(_data));\n                return this;\n            }\n\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'event',\n            value: function event(jsEvent) {\n                Metrics.addEventInfo(jsEvent, this);\n                return this;\n            }\n\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'viewport',\n            value: function viewport() {\n                Metrics.addViewportInfo(this);\n                return this;\n            }\n\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'element',\n            value: function element(_element) {\n                Metrics.addElementInfo(_element, this);\n                return this;\n            }\n\n            /**\n             * Adds widget DOM element dimensions / positional data to the event\n             * @param element\n             * @returns {MetricEvent}\n             */\n\n        }, {\n            key: 'widget',\n            value: function widget(element) {\n                Metrics.addWidgetInfo(element, this);\n                return this;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'meta',\n            value: function meta() {\n                for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                    args[_key6] = arguments[_key6];\n                }\n\n                Metrics.addEventMeta.apply(null, [this].concat(args));\n                return this;\n            }\n\n            /**\n             * Sets the object and event type on the event w/o having to use .data\n             * @param object_type\n             * @param event_type\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'type',\n            value: function type(object_type, event_type) {\n                this.object_type = object_type;\n                this.event_type = event_type;\n                return this;\n            }\n\n            /**\n             * Finalizes and sends the event\n             * @param callback\n             */\n\n        }, {\n            key: 'send',\n            value: function send(callback) {\n                okanjo.metrics.trackEvent(this, callback);\n                // DONT RETURN - BREAK THE CHAIN HERE\n            }\n\n            /**\n             * Gets the single-metric tracking url for this event\n             * @return {string}\n             */\n\n        }, {\n            key: 'toUrl',\n            value: function toUrl() {\n                // Copy data w/o modifying it\n                var event = Object.assign({}, this);\n\n                // Extract params\n                var object_type = event.object_type,\n                    event_type = event.event_type;\n\n                delete event.object_type;\n                delete event.event_type;\n\n                // Normalize event data\n                okanjo.metrics._normalizeEvent(event);\n\n                // Get the URL\n                return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type: object_type, event_type: event_type }) + '?' + okanjo.net.request.stringify(event);\n            }\n        }]);\n\n        return MetricEvent;\n    }();\n\n    // Export / initialize\n\n\n    okanjo.metrics = new Metrics();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({ _noProcess: true });\n    setTimeout(function () {\n        okanjo.metrics._processQueue();\n    }, 1000);\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function (window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    var EventEmitter = function () {\n        function EventEmitter() {\n            _classCallCheck(this, EventEmitter);\n\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n\n\n        _createClass(EventEmitter, [{\n            key: 'on',\n            value: function on(event, listener) {\n                if (!this._events[event]) {\n                    this._events[event] = [];\n                }\n\n                this._events[event].push(listener);\n            }\n\n            /**\n             * Removes an event handler for an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: 'removeListener',\n            value: function removeListener(event, listener) {\n\n                if (this._events[event]) {\n                    var idx = this._events[event].indexOf(listener);\n                    if (idx >= 0) {\n                        this._events[event].splice(idx, 1);\n                    }\n                }\n            }\n\n            /**\n             * Emits an event\n             * @param event\n             */\n\n        }, {\n            key: 'emit',\n            value: function emit(event) {\n                var i = void 0,\n                    listeners = void 0,\n                    length = void 0,\n                    args = [].slice.call(arguments, 1);\n\n                if (this._events[event]) {\n                    listeners = this._events[event].slice();\n                    length = listeners.length;\n\n                    for (i = 0; i < length; i++) {\n                        listeners[i].apply(this, args);\n                    }\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Registers an event handler to fire only once on an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: 'once',\n            value: function once(event, listener) {\n                var _arguments = arguments,\n                    _this6 = this;\n\n                var callback = function callback() {\n                    var args = [].slice.call(_arguments, 1);\n                    _this6.removeListener(event, callback);\n                    listener.apply(_this6, args);\n                };\n\n                this.on(event, callback);\n            }\n        }]);\n\n        return EventEmitter;\n    }();\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n    var DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    var DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n\n    var Widget = function (_okanjo$_EventEmitter) {\n        _inherits(Widget, _okanjo$_EventEmitter);\n\n        function Widget(element, options) {\n            _classCallCheck(this, Widget);\n\n            // Verify element was given (we can't load unless we have one)\n            var _this7 = _possibleConstructorReturn(this, (Widget.__proto__ || Object.getPrototypeOf(Widget)).call(this));\n\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: _this7, element: element, options: options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + (typeof options === 'undefined' ? 'undefined' : _typeof(options)), { widget: _this7, element: element, options: options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            _this7.name = 'Widget';\n            _this7.element = element;\n            _this7.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            _this7.config = Object.assign({}, options);\n            return _this7;\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n\n\n        _createClass(Widget, [{\n            key: 'init',\n            value: function init() {\n                // process config attributes\n                this._applyConfiguration();\n\n                this._setCompatibilityOptions();\n\n                // ensure placement key\n                if (!this._ensurePlacementKey()) return;\n\n                // Tell the widget to load\n                this.load();\n            }\n\n            /**\n             * This is for extended widgets, so they may modify the configuration before loading\n             */\n\n        }, {\n            key: '_setCompatibilityOptions',\n            value: function _setCompatibilityOptions() {}\n            // By default, this does nothing. Must be overridden to be useful\n\n\n            //noinspection JSMethodCanBeStatic\n            /**\n             * Widget configuration definitions\n             * @return {{}}\n             */\n\n        }, {\n            key: 'getSettings',\n            value: function getSettings() {\n                // Override this\n                return {};\n            }\n\n            /**\n             * Main widget load function.\n             */\n\n        }, {\n            key: 'load',\n            value: function load() {}\n            // Override this in the widget implementation\n\n\n            /**\n             * Applies data attribute settings and defaults to the widget configuration\n             * @private\n             */\n\n        }, {\n            key: '_applyConfiguration',\n            value: function _applyConfiguration() {\n                var _this8 = this;\n\n                // this.config was set to the options provided in the constructor\n                // so layer data attributes on top\n\n                var data = this.getDataAttributes();\n                var settings = this.getSettings();\n                Object.keys(data).forEach(function (key) {\n                    var normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    var val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        _this8.config[normalizedKey] = val;\n                    }\n                });\n\n                // Apply defaults from the widget settings\n                Object.keys(settings).forEach(function (key) {\n                    if (_this8.config[key] === undefined && settings[key]._default !== undefined) {\n                        _this8.config[key] = settings[key].value(undefined, false);\n                    }\n                });\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets a copy of the configuration, suitable for transmission\n             * @return {{}}\n             */\n\n        }, {\n            key: 'getConfig',\n            value: function getConfig() {\n                var _this9 = this;\n\n                var settings = this.getSettings();\n                var out = {};\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this9.config[origKey];\n                    var key = origKey;\n                    var group = null;\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            /**\n             * Before loading, ensure that a placement key is present or abort\n             * @return {boolean}\n             * @private\n             */\n\n        }, {\n            key: '_ensurePlacementKey',\n            value: function _ensurePlacementKey() {\n\n                // Check if set on widget or globally\n                if (this.config.key) {\n                    return true;\n                } else if (okanjo.key) {\n                    // Copy key from global scope,\n                    this.config.key = okanjo.key;\n                    return true;\n                }\n\n                // No key set, can't load.\n                okanjo.report('No key provided on widget', { widget: this });\n                this.showError('Error: Missing placement key.');\n                return false;\n            }\n\n            /**\n             * Displays an error in the widget element\n             * @param message\n             */\n\n        }, {\n            key: 'showError',\n            value: function showError(message) {\n                this.setMarkup(okanjo.ui.engine.render('okanjo.error', this, { message: message }));\n            }\n\n            /**\n             * Sets the markup of the widget's element\n             * @param markup\n             */\n\n        }, {\n            key: 'setMarkup',\n            value: function setMarkup(markup) {\n                this.element.innerHTML = markup;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the current page URL, sans query string and fragment.\n             * @returns {string} - URL\n             */\n\n        }, {\n            key: 'getDataAttributes',\n\n\n            /**\n             * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n             * @returns {*}\n             */\n            value: function getDataAttributes() {\n                var data = {};\n                Array.from(this.element.attributes).forEach(function (attr) {\n                    var match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                    if (match) {\n                        data[match[1]] = attr.value;\n                    }\n                });\n                return data;\n            }\n        }], [{\n            key: 'getCurrentPageUrl',\n            value: function getCurrentPageUrl() {\n                return window.location.href.replace(/([?#].*)$/, '');\n            }\n        }]);\n\n        return Widget;\n    }(okanjo._EventEmitter);\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n\n\n    Widget.Field = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Field() {\n            _classCallCheck(this, Field);\n\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n\n\n        _createClass(Field, [{\n            key: 'array',\n            value: function array(converter) {\n                this._convert = function (val) {\n                    if (Array.isArray(val)) {\n                        if (converter) {\n                            return val.map(function (v) {\n                                return converter(v);\n                            });\n                        } else {\n                            return val;\n                        }\n                    }\n                    val = val.replace(/\\\\,/g, '\\0');\n                    return val.split(',').map(function (v) {\n                        var res = v.trim().replace('\\0', ',');\n                        if (converter) res = converter(res);\n                        return res;\n                    });\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'string',\n\n\n            /**\n             * Formats the value as a string\n             * @return {Field}\n             */\n            value: function string() {\n                this._convert = function (val) {\n                    if (val === null || val === undefined) return val;else return \"\" + val;\n                };\n                return this;\n            }\n        }, {\n            key: 'bool',\n\n\n            /**\n             * Formats the value as a boolean (takes 1, 0, true, false)\n             * @return {Field}\n             */\n            value: function bool() {\n                this._convert = function (val) {\n                    if (typeof val === \"string\") {\n                        return val === \"1\" || val.toLowerCase() === \"true\";\n                    } else {\n                        return !!val;\n                    }\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'strip',\n\n\n            /**\n             * Indicates the field should not be passed on for transmission\n             * @return {Field}\n             */\n            value: function strip() {\n                this._strip = true;return this;\n            }\n        }, {\n            key: 'int',\n\n\n            /**\n             * Formats the value as a integer (whole) number\n             * @return {Field}\n             */\n            value: function int() {\n                this._convert = function (val) {\n                    return parseInt(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'float',\n\n\n            /**\n             * Formats the value as a floating point number\n             * @return {Field}\n             */\n            value: function float() {\n                this._convert = function (val) {\n                    return parseFloat(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'default',\n\n\n            //noinspection ReservedWordAsName\n            /**\n             * Sets the default value to use if not set\n             * @param val\n             * @return {Field}\n             */\n            value: function _default(val) {\n                this._default = val;\n                return this;\n            }\n\n            /**\n             * Assigns the property to a bucket for hierarchy\n             * @param name\n             * @return {Field}\n             */\n\n        }, {\n            key: 'group',\n            value: function group(name) {\n                this._group = name;\n                return this;\n            }\n\n            /**\n             * Gets the group the field belongs to\n             * @return {*|null}\n             */\n\n        }, {\n            key: 'getGroup',\n            value: function getGroup() {\n                return this._group;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the formatted value of the field\n             * @param val\n             * @param strip\n             * @return {*}\n             */\n\n        }, {\n            key: 'value',\n            value: function value(val) {\n                var strip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                if (this._strip && strip) return undefined;\n                if (val !== undefined && this._convert) {\n                    val = this._convert(val);\n                }\n                return val !== undefined ? val : this._default;\n            }\n        }], [{\n            key: 'array',\n            value: function array(converter) {\n                return new Field().array(converter);\n            }\n        }, {\n            key: 'string',\n            value: function string() {\n                return new Field().string();\n            }\n        }, {\n            key: 'bool',\n            value: function bool() {\n                return new Field().bool();\n            }\n        }, {\n            key: 'strip',\n            value: function strip() {\n                return new Field().strip();\n            }\n        }, {\n            key: 'int',\n            value: function int() {\n                return new Field().int();\n            }\n        }, {\n            key: 'float',\n            value: function float() {\n                return new Field().float();\n            }\n        }]);\n\n        return Field;\n    }();\n\n    // Export\n    return okanjo._Widget = Widget;\n})(window);\n\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    //region Imports and Constants\n\n    var okanjo = window.okanjo;\n    var _okanjo$_Widget$Field = okanjo._Widget.Field,\n        string = _okanjo$_Widget$Field.string,\n        array = _okanjo$_Widget$Field.array,\n        float = _okanjo$_Widget$Field.float,\n        int = _okanjo$_Widget$Field.int,\n        bool = _okanjo$_Widget$Field.bool;\n\n    var Metrics = okanjo.metrics.constructor;\n    var TemplateEngine = okanjo.ui.engine.constructor;\n\n    var FILTERS = 'filters';\n    var DISPLAY = 'display';\n    var ARTICLE_META = 'article_meta';\n\n    var MINIMUM_VIEW_PX = 0.5; // 50% of pixels must be in viewport\n    var MINIMUM_VIEW_TIME = 1000; // for 1 full second\n    var MINIMUM_VIEW_FREQ = 2; // time / freq = interval\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n\n    var Placement = function (_okanjo$_Widget) {\n        _inherits(Placement, _okanjo$_Widget);\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        function Placement(element) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            _classCallCheck(this, Placement);\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n\n            var _this10 = _possibleConstructorReturn(this, (Placement.__proto__ || Object.getPrototypeOf(Placement)).call(this, element, options));\n\n            _this10.name = 'Placement';\n            _this10._metricBase = {}; // placeholder for metrics\n            _this10._response = null;\n\n            // Aggregate view watchers into a single interval fn\n            _this10._viewWatcherIv = null;\n            _this10._viewedWatchers = [];\n\n            // Start loading content\n            if (!options.no_init) _this10.init();\n            return _this10;\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n\n\n        _createClass(Placement, [{\n            key: 'getSettings',\n            value: function getSettings() {\n                return {\n\n                    // What type of response do you want\n                    type: string().group(FILTERS),\n\n                    // What specific products do you want\n                    ids: array().group(FILTERS),\n\n                    // Filter by generic query string\n                    q: string().group(FILTERS),\n\n                    // Filter by relation to content\n                    url: string().group(FILTERS),\n                    url_referrer: string().group(FILTERS).strip(),\n                    url_selectors: string().group(FILTERS),\n                    url_paths: array().group(FILTERS),\n                    not_url_paths: array().group(FILTERS),\n\n                    // Filter by hierarchy\n                    organization_id: string().group(FILTERS),\n                    property_id: string().group(FILTERS),\n                    store_id: string().group(FILTERS),\n\n                    // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                    organization_name: string().group(FILTERS),\n                    property_name: string().group(FILTERS),\n                    store_name: string().group(FILTERS),\n\n                    // Filter by integrations\n                    external_id: string().group(FILTERS),\n                    sku: string().group(FILTERS),\n                    external_store_id: string().group(FILTERS),\n\n                    // Filter by product attributes\n                    condition: string().group(FILTERS),\n                    manufacturer: string().group(FILTERS),\n                    upc: string().group(FILTERS),\n                    isbn: string().group(FILTERS),\n\n                    // Filter by categorization / distribution\n                    tags: array().group(FILTERS),\n                    category: array().group(FILTERS),\n                    pools: array().group(FILTERS),\n\n                    // Filter by price range\n                    min_price: float().group(FILTERS),\n                    max_price: float().group(FILTERS),\n\n                    // Filter by donation ranges\n                    min_donation_percent: float().group(FILTERS),\n                    max_donation_percent: float().group(FILTERS),\n\n                    // Filter by donation recipient\n                    donation_to: string().group(FILTERS),\n\n                    // Sorting\n                    sort_by: string().group(FILTERS),\n                    sort_direction: string().group(FILTERS),\n\n                    // Pagination\n                    skip: int().group(FILTERS),\n                    take: int().group(FILTERS),\n\n                    // Placement Testing\n                    placement_tests_only: bool(),\n\n                    // Display settings\n                    size: string().group(DISPLAY),\n                    template_name: string().group(DISPLAY),\n                    template_layout: string().group(DISPLAY),\n                    template_theme: string().group(DISPLAY),\n                    template_variant: string().group(DISPLAY),\n                    template_cta_style: string().group(DISPLAY),\n                    template_cta_text: string().group(DISPLAY),\n                    template_cta_color: string().group(DISPLAY),\n                    adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                    // Article metadata\n                    url_category: array().group(ARTICLE_META),\n                    url_keywords: array().group(ARTICLE_META),\n\n                    // Functional settings\n                    key: string().strip(), // don't need to resend key on all our requests\n                    no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                    proxy_url: string().strip(),\n                    expandable: bool().strip().default(true),\n                    disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                    disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                    backwards: string().strip(), // internal flag indicating port from a deprecated widget\n                    testing: bool().strip() // metrics flag to indicate testing\n                };\n            }\n\n            /**\n             * Gets the widget configuration formatted using settings, suitable for transmission\n             * @return {{filters: {}, display: {}, backfill: {}, shortfill: {}, article_meta: {}}}\n             */\n\n        }, {\n            key: 'getConfig',\n            value: function getConfig() {\n                var _this11 = this;\n\n                var settings = this.getSettings();\n                var out = { filters: {}, display: {}, backfill: {}, shortfill: {}, article_meta: {} };\n                var backfillPattern = /^backfill_(.+)$/; // backfill_property\n                var shortfillPattern = /^shortfill_(.+)$/; // shortfill_property\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this11.config[origKey];\n                    var key = origKey;\n                    var isBackfill = false;\n                    var isShortfill = false;\n                    var group = null;\n\n                    // Get the property name if it was prefixed with backfill\n                    var matches = backfillPattern.exec(origKey);\n                    if (matches) {\n                        key = matches[1];\n                        isBackfill = true;\n                    } else {\n                        // Get the property name if it was prefixed with shortfill\n                        matches = shortfillPattern.exec(origKey);\n                        if (matches) {\n                            key = matches[1];\n                            isShortfill = true;\n                        }\n                    }\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = out;\n                    if (isBackfill) {\n                        target = out.backfill;\n                    } else if (isShortfill) {\n                        target = out.shortfill;\n                    }\n\n                    // Set the target to the bucket in the settings container\n                    // except shortfill - can only apply settings directly to the bucket\n                    // e.g. backfill_url -> { backfill: { filters: { url: xxx } } }\n                    // e.g. shortfill_url-> { shortfill: { url: xxx } }\n                    if (!isShortfill && group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Core load process\n             */\n\n        }, {\n            key: 'load',\n            value: function load() {\n                var _this12 = this;\n\n                // Set metric base data (stub for all future events emitted by the widget)\n                this._setMetricBase();\n\n                // Find out what we should display here\n                this._fetchContent(function (err) {\n                    if (err) {\n                        // Report the widget load as declined\n                        _this12._reportWidgetLoad(\"fetch failed: \" + err.statusCode /* istanbul ignore next: out of scope */ || err.toString());\n                    } else {\n                        // Merge display settings from response\n                        _this12._mergeResponseSettings();\n\n                        // Merge the referential data from the response\n                        _this12._updateBaseMetaFromResponse();\n\n                        // Handle rendering based on output type\n                        _this12._showContent();\n                    }\n                });\n            }\n\n            //endregion\n\n            //region Internal Helpers\n\n            /**\n             * Initializes the common metric data for events emitted by the placement\n             * @private\n             */\n\n        }, {\n            key: '_setMetricBase',\n            value: function _setMetricBase() {\n                var base = this._metricBase;\n                base.ch = Metrics.Channel.placement;\n                base.cx = this.config.backwards || 'auto';\n                base.key = this.config.key;\n                base.m = base.m || {};\n                base.m.wgid = this.instanceId;\n\n                if (this.config.testing) base.env = Metrics.Environment.testing;\n            }\n\n            /**\n             * Emits the widget impression event\n             * @param declined\n             * @private\n             */\n\n        }, {\n            key: '_reportWidgetLoad',\n            value: function _reportWidgetLoad(declined) {\n                var _this13 = this;\n\n                var res = this._response || {};\n                var data = res.data || { results: [] };\n\n                // If this is declined, mark future events as declined too\n                this._metricBase.m.decl = declined || '0';\n\n                // Attach other main response attributes to all future events\n                this._metricBase.m.res_bf = data.backfilled ? 1 : 0; // whether the response used the back fill flow\n                this._metricBase.m.res_sf = data.shortfilled ? 1 : 0; // whether the response used the short fill flow\n                this._metricBase.m.res_spltfl = data.splitfilled ? 1 : 0; // whether the response used the short fill flow\n                this._metricBase.m.res_total = data.total || 0; // how many total candidate results were available given filters\n                this._metricBase.m.res_type = data.type; // what the given resource type was\n                this._metricBase.m.res_length = data.results.length; // number of resources delivered\n\n                // Track impression\n                okanjo.metrics.create(this._metricBase).type(Metrics.Object.widget, Metrics.Event.impression).meta(this.getConfig()).element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport().widget(this.element).send();\n\n                // Start watching for a viewable impression\n                this._addOnceViewedHandler(this.element, function () {\n                    okanjo.metrics.create(_this13._metricBase).type(Metrics.Object.widget, Metrics.Event.view).meta(_this13.getConfig()).element(_this13.element).viewport().widget(_this13.element).send();\n                });\n            }\n\n            /**\n             * Executes the request for content to fill the placement\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: '_fetchContent',\n            value: function _fetchContent(callback) {\n                var _this14 = this;\n\n                // Build request to api, starting with this placement config params\n                var query = this.getConfig();\n\n                // Extract the key\n                var key = this.config.key;\n\n                // Attach sid and referrer\n                if (okanjo.metrics.sid) query.sid = okanjo.metrics.sid;\n                query.filters.url_referrer = this.config.url_referrer || window.location.href;\n                query.wgid = this.instanceId;\n                query.pgid = okanjo.metrics.pageId;\n\n                // Send it\n                okanjo.net.request.post(okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live') + '?key=' + encodeURIComponent(key), query, function (err, res) {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: _this14 });\n                        _this14.setMarkup(''); // Don't show anything\n                        _this14.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        _this14._response = res;\n\n                        // Hook point for response handling\n                        _this14.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                });\n            }\n\n            /**\n             * Applies response filters and display settings into the widget configuration\n             * @private\n             */\n\n        }, {\n            key: '_mergeResponseSettings',\n            value: function _mergeResponseSettings() {\n                var _this15 = this;\n\n                var res = this._response;\n                var data = res.data || {};\n                var settings = data.settings || {};\n\n                if (settings.filters) {\n                    Object.keys(settings.filters).forEach(function (key) {\n                        _this15.config[key] = settings.filters[key];\n                    });\n                }\n\n                if (settings.display) {\n                    Object.keys(settings.display).forEach(function (key) {\n                        _this15.config[key] = settings.display[key];\n                    });\n                }\n            }\n\n            /**\n             * Applies response data to future metric events\n             * @private\n             */\n\n        }, {\n            key: '_updateBaseMetaFromResponse',\n            value: function _updateBaseMetaFromResponse() {\n                // Update the base metric data with info from the response\n                var data = (this._response || {}).data || {};\n                this._metricBase.m = this._metricBase.m || {};\n                var meta = this._metricBase.m;\n\n                // Article\n                if (data.article) meta.aid = data.article.id;\n\n                if (data.test && data.test.enabled) {\n                    meta.pten = 1;\n                    meta.ptid = data.test.id;\n                    meta.ptseed = data.test.seed;\n                } else {\n                    meta.pten = 0;\n                }\n            }\n\n            /**\n             * Beings the render process based on the response content\n             * @private\n             */\n\n        }, {\n            key: '_showContent',\n            value: function _showContent() {\n                var data = (this._response || {}).data || {};\n\n                // Known content types we can display\n                if (data.type === Placement.ContentTypes.products) {\n                    this._showProducts();\n                } else if (data.type === Placement.ContentTypes.articles) {\n                    this._showArticles();\n                } else if (data.type === Placement.ContentTypes.adx) {\n                    this._showADX();\n                } else {\n                    // Unknown response type!\n\n                    // Report the widget load as declined\n                    var msg = 'Unknown response content type: ' + data.type;\n                    okanjo.report(msg, { placement: this });\n                    this.setMarkup(''); // Don't show anything\n                    this.emit('error', msg);\n                    this._reportWidgetLoad(msg);\n                }\n            }\n\n            /**\n             * Generates the click url using the event, proxy_url, and additional params\n             * @param event\n             * @param url\n             * @param additionalUrlParams\n             * @return {*}\n             * @private\n             */\n\n        }, {\n            key: '_getClickThroughURL',\n            value: function _getClickThroughURL(event, url, additionalUrlParams) {\n                var joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n                // Tack on transfer params\n                additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n                additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n                additionalUrlParams.ok_ch = this._metricBase.ch;\n                additionalUrlParams.ok_cx = this._metricBase.cx;\n                additionalUrlParams._okjr = window.location.href.split(/[?#]/)[0];\n                additionalUrlParams.utm_source = 'okanjo';\n                additionalUrlParams.utm_campaign = 'smartserve';\n                // additionalUrlParams.utm_source = window.location.hostname;\n                additionalUrlParams.utm_medium = 'smartserve';\n                // additionalUrlParams.utm_campaign = 'smartserve';\n\n\n                url += joiner + Object.keys(additionalUrlParams).map(function (key) {\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(additionalUrlParams[key]);\n                }).join('&');\n\n                // Wrap the url if we're proxying\n                if (this.config.proxy_url) {\n                    url = this.config.proxy_url + encodeURIComponent(url);\n                }\n\n                // Set the url on the event\n                event.data({\n                    u: url\n                });\n\n                return event.toUrl();\n            }\n\n            /**\n             * Converts a resource's link into one suitable for tracking, making middle-click safe\n             * @param type\n             * @param resource\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: '_handleResourceMouseDown',\n            value: function _handleResourceMouseDown(type, resource, e) {\n                // Generate a new click id for this event\n                // const clickId = okanjo.util.shortid();\n                var clickId = resource._cid;\n\n                // Start building the event\n                var event = okanjo.metrics.create(this._metricBase, {\n                    id: resource.id\n                }).type(type, Metrics.Event.interaction).meta(this.getConfig()).meta({ cid: clickId }).meta({\n                    bf: resource.backfill ? 1 : 0,\n                    sf: resource.shortfill ? 1 : 0,\n                    spltfl_seg: resource.splitfill_segment || null\n                }).event(e).element(e.currentTarget).viewport().widget(this.element);\n\n                // Pull the proper params out of the resource depending on it's type\n                var trackParam = 'url_track_param';\n                var urlParam = 'url';\n\n                if (type === Metrics.Object.product) {\n                    trackParam = 'buy_url_track_param';\n                    urlParam = 'buy_url';\n                }\n\n                // Attach the campaign tracking identifier\n                var additionalParams = {\n                    ok_cid: clickId\n                };\n                if (resource[trackParam]) additionalParams[resource[trackParam]] = clickId;\n\n                // Update the link with the event data\n                event.data({ ea: Metrics.Action.click });\n                e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n                // Cache this on the product\n                resource._clickId = clickId;\n                resource._event = event;\n                resource._additionalParams = additionalParams;\n            }\n\n            /**\n             * Gets the template to use, accounting for configured preference if available\n             * @param contentType\n             * @param defaultName\n             * @return {string}\n             * @private\n             */\n\n        }, {\n            key: '_getTemplate',\n            value: function _getTemplate(contentType, defaultName) {\n                var templateName = this.config.template_name;\n                if (!templateName || !okanjo.ui.engine.isTemplateRegistered(contentType + '.' + templateName)) {\n                    templateName = defaultName;\n                }\n                return contentType + '.' + templateName;\n            }\n\n            /**\n             * Enforces size/layout/cta restrictions\n             * @private\n             */\n\n        }, {\n            key: '_enforceLayoutOptions',\n            value: function _enforceLayoutOptions() {\n                // Enforce format restrictions\n                if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                    this.config.template_layout = \"list\";\n                    this.config.template_cta_style = \"link\";\n                } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                    this.config.template_layout = \"list\";\n                }\n            }\n\n            /**\n             * Enforces\n             * @private\n             */\n\n        }, {\n            key: '_enforceSlabLayoutOptions',\n            value: function _enforceSlabLayoutOptions() {\n                if (this.config.size === \"medium_rectangle\" || this.config.size === \"billboard\") {\n                    // no list view\n                    this.config.template_layout = \"grid\";\n\n                    // no buttons\n                    if (this.config.template_cta_style === \"button\") {\n                        this.config.template_cta_style = \"link\";\n                    }\n                } else if (this.config.size === \"half_page\") {\n                    this.config.template_layout = \"grid\";\n                } else if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                    this.config.template_layout = \"list\";\n\n                    // no button\n                    if (this.config.template_cta_style === \"button\") {\n                        this.config.template_cta_style = \"link\";\n                    }\n                } else if (this.config.size === \"auto\") {\n                    this.config.template_layout = \"list\";\n                } else if (this.config.size === \"responsive\") {\n                    // no button in responsive mode\n                    if (this.config.template_cta_style === \"button\") {\n                        this.config.template_cta_style = \"link\";\n                    }\n                }\n            }\n\n            /**\n             * Register a custom\n             * @private\n             */\n\n        }, {\n            key: '_registerCustomBranding',\n            value: function _registerCustomBranding() /*prefix, buttonClass*/{\n                var brandColor = this.config.template_cta_color;\n                if (brandColor) {\n                    var brandCSS = void 0,\n                        brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                    brandCSS = '\\n                    .okanjo-block2.' + brandCSSId + ' .okanjo-resource-cta-button, .okanjo-block2.' + brandCSSId + ' .okanjo-resource-buy-button { color: ' + brandColor + ' !important; } \\n                    .okanjo-block2.' + brandCSSId + '.okanjo-cta-style-button .okanjo-resource-cta-button, .okanjo-block2.' + brandCSSId + '.okanjo-cta-style-button .okanjo-resource-buy-button { border-color: ' + brandColor + ' !important; } \\n                    .okanjo-block2.' + brandCSSId + '.okanjo-cta-style-button .okanjo-resource-cta-button:hover, .okanjo-block2.' + brandCSSId + '.okanjo-cta-style-button .okanjo-resource-buy-button:hover { background: ' + brandColor + ' !important; color: #fff !important; } \\n                ';\n\n                    okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                    okanjo.ui.engine.ensureCss(brandCSSId);\n                }\n            }\n\n            /**\n             * When element is in view per viewability constants (50% for 1s) trigger handler once\n             * @param element\n             * @param handler\n             * @private\n             */\n\n        }, {\n            key: '_addOnceViewedHandler',\n            value: function _addOnceViewedHandler(element, handler) {\n                var controller = {\n                    element: element,\n                    successfulCount: 0,\n                    handler: handler\n                };\n\n                // Add our element to the watch list and turn on the watcher if not already on\n                this._viewedWatchers.push(controller);\n                this._toggleViewWatcher(true);\n            }\n\n            /**\n             * Interval function to check viewability of registered elements\n             * @private\n             */\n\n        }, {\n            key: '_checkViewWatchers',\n            value: function _checkViewWatchers() {\n\n                // Check each registered watcher\n                for (var i = 0, controller; i < this._viewedWatchers.length; i++) {\n                    controller = this._viewedWatchers[i];\n\n                    // Check if watcher is complete, then remove it from the list\n                    /* istanbul ignore next: jsdom won't trigger this */\n                    if (okanjo.ui.isElementVisible(controller.element) && okanjo.ui.getPercentageInViewport(controller.element) >= MINIMUM_VIEW_PX) {\n                        controller.successfulCount++;\n                    }\n\n                    // While this could more optimally be contained within the former condition, unit-testing blocks on this\n                    if (controller.successfulCount >= MINIMUM_VIEW_FREQ) {\n                        controller.handler();\n                        this._viewedWatchers.splice(i, 1);\n                        i--;\n                    }\n                }\n\n                // Turn off if nobody is watching\n                if (this._viewedWatchers.length === 0) {\n                    this._toggleViewWatcher(false);\n                }\n            }\n\n            /**\n             * Turns the viewability watcher on and off\n             * @param enabled\n             * @private\n             */\n\n        }, {\n            key: '_toggleViewWatcher',\n            value: function _toggleViewWatcher(enabled) {\n                if (enabled) {\n                    if (this._viewWatcherIv === null) {\n                        this._viewWatcherIv = setInterval(this._checkViewWatchers.bind(this), MINIMUM_VIEW_TIME / MINIMUM_VIEW_FREQ);\n                    }\n                } else {\n                    clearInterval(this._viewWatcherIv);\n                    this._viewWatcherIv = null;\n                }\n            }\n\n            //endregion\n\n            //region Product Handling\n\n            /**\n             * Renders a product response\n             * @private\n             */\n\n        }, {\n            key: '_showProducts',\n            value: function _showProducts() {\n                var _this16 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n                // - render\n\n                // Format products\n                data.results.forEach(function (offer, index) {\n                    // Disable inline buy if configured to do so\n                    if (_this16.config.disable_inline_buy) offer.inline_buy_url = null;\n                    if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                    // Set primary image\n                    offer._image_url = offer.image_urls ? offer.image_urls[0] : '';\n\n                    // Escape buy url (fixme: does not include proxy_url!)\n                    offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                    // Make price tag pretty\n                    offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                    offer._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break it */\n                    if (id && index >= 0) {\n                        var product = _this16._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break it */\n                        if (product) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this16._handleResourceMouseDown.bind(_this16, Metrics.Object.product, product));\n                            a.addEventListener('click', _this16._handleProductClick.bind(_this16, product));\n\n                            // Track impression\n                            okanjo.metrics.create(_this16._metricBase, { id: product.id }).type(Metrics.Object.product, Metrics.Event.impression).meta(_this16.getConfig()).meta({\n                                bf: product.backfill ? 1 : 0,\n                                sf: product.shortfill ? 1 : 0,\n                                spltfl_seg: product.splitfill_segment || null\n                            }).element(a).viewport().widget(_this16.element).send();\n\n                            // Start watching for a viewable impression\n                            _this16._addOnceViewedHandler(a, function () {\n                                okanjo.metrics.create(_this16._metricBase, { id: product.id }).type(Metrics.Object.product, Metrics.Event.view).meta(_this16.getConfig()).meta({\n                                    bf: product.backfill ? 1 : 0,\n                                    sf: product.shortfill ? 1 : 0,\n                                    spltfl_seg: product.splitfill_segment || null\n                                }).element(a).viewport().widget(_this16.element).send();\n                            });\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-resource-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Fit images\n                okanjo.ui.fitImages(this.element);\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the product click process\n             * @param product\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: '_handleProductClick',\n            value: function _handleProductClick(product, e) {\n\n                // Update the event\n                if (!product._event || !product._additionalParams || !product._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.product, product, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = product._event,\n                    additionalParams = product._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Determine what we're doing - native ux or redirect\n                var showNativeBuyUx = !!product.inline_buy_url,\n                    showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile();\n\n                // Show the inline buy experience or redirect\n                if (showPopupNativeBuyUx) {\n                    // Mobile native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    //\n                    // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                    // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                    // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                    //\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ popup: 'true' });\n\n                    // Get the frame url\n                    var url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Open the window or redirect if that failed\n                    this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                    /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                    if (!this._popupFrame) {\n                        // Fallback to just replacing the window with the target, since popups don't work :(\n                        okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                        window.location.href = url;\n                    }\n                } else if (showNativeBuyUx) {\n                    // Regular native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-inline-buy-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto'\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Check whether we're allowed to expand past the bounds of the placement\n                    additionalParams.expandable = this.config.expandable ? 1 : 0;\n                    if (!this.config.expandable) {\n                        var parent = this.element.querySelector('.okanjo-expansion-root');\n                        /* istanbul ignore else: custom templates could break this */\n                        if (parent) {\n                            frame.className += ' okanjo-ad-in-unit';\n                            frame.setAttribute('height', \"100%\");\n                            frame.setAttribute('width', \"100%\");\n\n                            parent.appendChild(frame);\n\n                            var size = okanjo.ui.getElementSize(parent);\n                            additionalParams.frame_height = size.height;\n                            additionalParams.frame_width = size.width;\n                            /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                            if (this.config.size) additionalParams.ad_size = this.config.size;\n                        }\n                    }\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                    // Set the frame url\n                    frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Show the modal if it was not internally expanded\n                    if (!frame.parentNode) {\n                        okanjo.ui.modal.show(frame);\n                    }\n                } else {\n                    // Update the link a second time, just in case the data changed\n                    e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n                }\n            }\n\n            //endregion\n\n            //region Article Handling\n\n            /**\n             * Renders an article response\n             * @private\n             */\n\n        }, {\n            key: '_showArticles',\n            value: function _showArticles() {\n                var _this17 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n                // - render\n\n                // Format articles\n                data.results.forEach(function (article, index) {\n                    // Escape url (fixme: does not include proxy_url!)\n                    article._escaped_url = encodeURIComponent(article.url);\n                    article._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break this */\n                    if (id && index >= 0) {\n                        var article = _this17._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break this */\n                        if (article) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this17._handleResourceMouseDown.bind(_this17, Metrics.Object.article, article));\n                            a.addEventListener('click', _this17._handleArticleClick.bind(_this17, article));\n\n                            // Track impression\n                            okanjo.metrics.create(_this17._metricBase, { id: article.id }).type(Metrics.Object.article, Metrics.Event.impression).meta(_this17.getConfig()).meta({\n                                bf: article.backfill ? 1 : 0,\n                                sf: article.shortfill ? 1 : 0,\n                                spltfl_seg: article.splitfill_segment || null\n                            }).element(a).viewport().widget(_this17.element).send();\n\n                            // Start watching for a viewable impression\n                            _this17._addOnceViewedHandler(a, function () {\n                                okanjo.metrics.create(_this17._metricBase, { id: article.id }).type(Metrics.Object.article, Metrics.Event.view).meta(_this17.getConfig()).meta({\n                                    bf: article.backfill ? 1 : 0,\n                                    sf: article.shortfill ? 1 : 0,\n                                    spltfl_seg: article.splitfill_segment || null\n                                }).element(a).viewport().widget(_this17.element).send();\n                            });\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-resource-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Fit images\n                okanjo.ui.fitImages(this.element);\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the article click process\n             * @param article\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: '_handleArticleClick',\n            value: function _handleArticleClick(article, e) {\n                // Update the event\n                if (!article._event || !article._additionalParams || !article._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.article, article, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = article._event,\n                    additionalParams = article._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n            }\n\n            //endregion\n\n            //region ADX Handling\n\n            /**\n             * Renders a Google DFP/ADX response\n             * @private\n             */\n\n        }, {\n            key: '_showADX',\n            value: function _showADX() {\n                var _this18 = this;\n\n                var data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n                // Get the template we should use to render the google ad\n                var templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n                // Determine what size ad we can place here\n                var size = null;\n                if (this.config.size) {\n                    if (Placement.Sizes[this.config.size]) {\n                        // Defined size, use these known dimensions\n                        size = Placement.Sizes[this.config.size];\n                    } else {\n                        var match = /^([0-9]+)x([0-9]+)$/i.exec(this.config.size);\n                        if (match) {\n                            size = { width: match[1], height: match[2] };\n                        }\n                    }\n                }\n\n                // No given size, we need to guess\n                if (!size) size = Placement.Sizes.default;\n\n                // If we're using okanjo's ad slot, then track the impression\n                // otherwise decline it because we're just passing through to the publishers account\n                var adUnitPath = '/90447967/okanjo:<publisher>';\n                var declineReason = void 0;\n                if (data.settings.display && data.settings.display.adx_unit_path) {\n                    adUnitPath = data.settings.display.adx_unit_path;\n                    declineReason = 'custom_ad_unit';\n                }\n\n                // Pass along what the template needs to know to display the ad\n                var renderContext = {\n                    size: size,\n                    adUnitPath: adUnitPath\n                };\n\n                // Render the container\n                this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n                // Report the impression\n                this._reportWidgetLoad(declineReason);\n\n                // Insert the actual ad into the container\n                var container = this.element.querySelector('.okanjo-adx-container');\n                /* istanbul ignore else: custom templates could break this */\n                if (container) {\n\n                    // Make the frame element\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-adx-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto',\n                        width: size.width,\n                        height: size.height\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Attach to dOM\n                    container.appendChild(frame);\n\n                    // Build a click-through tracking url so we know when an ad is clicked too\n                    var clickUrl = okanjo.metrics.create(this._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction).meta(this.getConfig()).meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    }).element(frame).viewport().widget(this.element).toUrl();\n\n                    // Transfer references to the frame window\n                    // frame.contentWindow.okanjo = okanjo;\n                    // frame.contentWindow.placement = this;\n                    frame.contentWindow.trackImpression = function () {\n                        okanjo.metrics.create(_this18._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.impression).meta(_this18.getConfig()).meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        }).element(frame).viewport().widget(_this18.element).send();\n\n                        // Start watching for a viewable impression\n                        _this18._addOnceViewedHandler(frame, function () {\n                            okanjo.metrics.create(_this18._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.view).meta(_this18.getConfig()).meta({\n                                ta_s: adUnitPath,\n                                ta_w: size.width,\n                                ta_h: size.height\n                            }).element(frame).viewport().widget(_this18.element).send();\n                        });\n                    };\n\n                    // Load Google ad!\n                    frame.contentWindow.document.open();\n                    frame.contentWindow.document.write('<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body>\\n<' + ('script type=\"text/javascript\" src=\"https://www.googletagservices.com/tag/js/gpt.js\">\\n    googletag.pubads().addEventListener(\\'slotRenderEnded\\', function(e) { \\n        trackImpression(e);\\n    });\\n    googletag.pubads()\\n        .definePassback(\"' + adUnitPath.replace(/\"/g, '\\\\\"') + '\", [[' + size.width + ', ' + size.height + ']])\\n        .setClickUrl(\"' + clickUrl + '&u=\")\\n        .display();\\n<') + '/script>\\n</body></html>');\n                    frame.contentWindow.document.close();\n\n                    // TODO future event hooks\n                    // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                    // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                    // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                    // Impression tracking is done from within the iframe. Crazy, right?\n                }\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            //endregion\n\n        }]);\n\n        return Placement;\n    }(okanjo._Widget);\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n\n\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle: { width: 300, height: 250 }, // aka: sidekick\n        leaderboard: { width: 728, height: 90 },\n        large_mobile_banner: { width: 320, height: 100 },\n        half_page: { width: 300, height: 600 }, // aka: filmstrip, sidekick\n        billboard: { width: 970, height: 250 }, // aka: sidekick\n\n        // IAB / Others\n        button_2: { width: 120, height: 60 },\n        micro_bar: { width: 88, height: 31 },\n        portrait: { width: 300, height: 1050 },\n        rectangle: { width: 180, height: 150 },\n        super_leaderboard: { width: 970, height: 90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper: { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard: { width: 320, height: 50 },\n        small_square: { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1: { width: 120, height: 90 },\n        full_banner: { width: 468, height: 60 },\n        half_banner: { width: 234, height: 60 },\n        large_rectangle: { width: 336, height: 280 },\n        pop_under: { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper: { width: 120, height: 600 },\n        square: { width: 250, height: 250 },\n        square_button: { width: 125, height: 125 },\n        vertical_banner: { width: 120, height: 240 },\n        vertical_rectangle: { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n\n    var Product = function (_okanjo$Placement) {\n        _inherits(Product, _okanjo$Placement);\n\n        function Product(element, options) {\n            _classCallCheck(this, Product);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this19 = _possibleConstructorReturn(this, (Product.__proto__ || Object.getPrototypeOf(Product)).call(this, element, options));\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this19 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this19.config.no_init;\n                _this19.init();\n            }\n            return _this19;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Product, [{\n            key: '_setCompatibilityOptions',\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Product';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Set filters based on old \"mode\"\n                if (this.config.mode === 'sense') {\n                    // sense\n                    this.config.url = this.config.url || 'referrer';\n                    this.config.take = this.config.take || 5;\n                } else if (this.config.mode === 'single') {\n                    // single\n                    this.config.url = null;\n                    if (this.config.id) this.config.ids = [this.config.id];\n                    this.config.take = 1;\n                    delete this.config.id;\n                } else {\n                    // browse\n                    this.config.url = null;\n                    this.config.take = this.config.take || 25;\n                }\n                delete this.config.mode;\n\n                // Sold by changed to store name\n                if (this.config.sold_by) {\n                    this.config.store_name = this.config.sold_by;\n                    delete this.config.sold_by;\n                }\n\n                // Selectors is now url_selectors\n                if (this.config.selectors) {\n                    this.config.url_selectors = this.config.selectors;\n                    delete this.config.selectors;\n                }\n\n                // Marketplace_id is no longer a thing, closest analog are properties.\n                if (this.config.marketplace_id) {\n                    this.config.property_id = this.config.marketplace_id;\n                    delete this.config.marketplace_id;\n                }\n\n                // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n                if (this.config.marketplace_status === 'testing') {\n                    this.config.sandbox = true;\n                }\n                delete this.config.marketplace_status;\n\n                // Deprecated\n                delete this.config.suboptimal;\n                delete this.config.text;\n            }\n        }]);\n\n        return Product;\n    }(okanjo.Placement);\n\n    return okanjo.Product = Product;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n\n    var Ad = function (_okanjo$Placement2) {\n        _inherits(Ad, _okanjo$Placement2);\n\n        function Ad(element, options) {\n            _classCallCheck(this, Ad);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this20 = _possibleConstructorReturn(this, (Ad.__proto__ || Object.getPrototypeOf(Ad)).call(this, element, options));\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this20 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this20.config.no_init;\n                _this20.init();\n            }\n            return _this20;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Ad, [{\n            key: '_setCompatibilityOptions',\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Ad';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Id / single mode is now ids\n                this.config.url = null;\n                if (this.config.id) {\n                    this.config.ids = [this.config.id];\n                } else {\n                    okanjo.warn('Ad widget should have parameter `id` set.');\n                }\n                this.config.take = 1;\n                delete this.config.id;\n\n                // Content is automatically determined whether the placement element contains children\n                delete this.config.content;\n            }\n        }]);\n\n        return Ad;\n    }(okanjo.Placement);\n\n    return okanjo.Ad = Ad;\n})(window);\n/* jshint ignore:start */\n\n(function () {\n\n    /*!\n     * mustache.js - Logic-less {{mustache}} templates with JavaScript\n     * http://github.com/janl/mustache.js\n     */\n\n    /*global define: false Mustache: true*/\n\n    (function defineMustache(global, factory) {\n        if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && exports && typeof exports.nodeName !== 'string') {\n            factory(exports); // CommonJS\n        } else if (typeof define === 'function' && define.amd) {\n            define(['exports'], factory); // AMD\n        } else {\n            global.Mustache = {};\n            factory(global.Mustache); // script, wsh, asp\n        }\n    })(this, function mustacheFactory(mustache) {\n\n        var objectToString = Object.prototype.toString;\n        var isArray = Array.isArray || function isArrayPolyfill(object) {\n            return objectToString.call(object) === '[object Array]';\n        };\n\n        function isFunction(object) {\n            return typeof object === 'function';\n        }\n\n        /**\n         * More correct typeof string handling array\n         * which normally returns typeof 'object'\n         */\n        function typeStr(obj) {\n            return isArray(obj) ? 'array' : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n        }\n\n        function escapeRegExp(string) {\n            return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        /**\n         * Null safe way of checking whether or not an object,\n         * including its prototype, has a given property\n         */\n        function hasProperty(obj, propName) {\n            return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && propName in obj;\n        }\n\n        // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n        // See https://github.com/janl/mustache.js/issues/189\n        var regExpTest = RegExp.prototype.test;\n        function testRegExp(re, string) {\n            return regExpTest.call(re, string);\n        }\n\n        var nonSpaceRe = /\\S/;\n        function isWhitespace(string) {\n            return !testRegExp(nonSpaceRe, string);\n        }\n\n        var entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n\n        function escapeHtml(string) {\n            return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n                return entityMap[s];\n            });\n        }\n\n        var whiteRe = /\\s*/;\n        var spaceRe = /\\s+/;\n        var equalsRe = /\\s*=/;\n        var curlyRe = /\\s*\\}/;\n        var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n        /**\n         * Breaks up the given `template` string into a tree of tokens. If the `tags`\n         * argument is given here it must be an array with two string values: the\n         * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n         * course, the default is to use mustaches (i.e. mustache.tags).\n         *\n         * A token is an array with at least 4 elements. The first element is the\n         * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n         * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n         * all text that appears outside a symbol this element is \"text\".\n         *\n         * The second element of a token is its \"value\". For mustache tags this is\n         * whatever else was inside the tag besides the opening symbol. For text tokens\n         * this is the text itself.\n         *\n         * The third and fourth elements of the token are the start and end indices,\n         * respectively, of the token in the original template.\n         *\n         * Tokens that are the root node of a subtree contain two more elements: 1) an\n         * array of tokens in the subtree and 2) the index in the original template at\n         * which the closing tag for that section begins.\n         */\n        function parseTemplate(template, tags) {\n            if (!template) return [];\n\n            var sections = []; // Stack to hold section tokens\n            var tokens = []; // Buffer to hold the tokens\n            var spaces = []; // Indices of whitespace tokens on the current line\n            var hasTag = false; // Is there a {{tag}} on the current line?\n            var nonSpace = false; // Is there a non-space char on the current line?\n\n            // Strips all whitespace tokens array for the current line\n            // if there was a {{#tag}} on it and otherwise only space.\n            function stripSpace() {\n                if (hasTag && !nonSpace) {\n                    while (spaces.length) {\n                        delete tokens[spaces.pop()];\n                    }\n                } else {\n                    spaces = [];\n                }\n\n                hasTag = false;\n                nonSpace = false;\n            }\n\n            var openingTagRe, closingTagRe, closingCurlyRe;\n            function compileTags(tagsToCompile) {\n                if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n                if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n\n                openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n                closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n                closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n            }\n\n            compileTags(tags || mustache.tags);\n\n            var scanner = new Scanner(template);\n\n            var start, type, value, chr, token, openSection;\n            while (!scanner.eos()) {\n                start = scanner.pos;\n\n                // Match any text between tags.\n                value = scanner.scanUntil(openingTagRe);\n\n                if (value) {\n                    for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n                        chr = value.charAt(i);\n\n                        if (isWhitespace(chr)) {\n                            spaces.push(tokens.length);\n                        } else {\n                            nonSpace = true;\n                        }\n\n                        tokens.push(['text', chr, start, start + 1]);\n                        start += 1;\n\n                        // Check for whitespace on the current line.\n                        if (chr === '\\n') stripSpace();\n                    }\n                }\n\n                // Match the opening tag.\n                if (!scanner.scan(openingTagRe)) break;\n\n                hasTag = true;\n\n                // Get the tag type.\n                type = scanner.scan(tagRe) || 'name';\n                scanner.scan(whiteRe);\n\n                // Get the tag value.\n                if (type === '=') {\n                    value = scanner.scanUntil(equalsRe);\n                    scanner.scan(equalsRe);\n                    scanner.scanUntil(closingTagRe);\n                } else if (type === '{') {\n                    value = scanner.scanUntil(closingCurlyRe);\n                    scanner.scan(curlyRe);\n                    scanner.scanUntil(closingTagRe);\n                    type = '&';\n                } else {\n                    value = scanner.scanUntil(closingTagRe);\n                }\n\n                // Match the closing tag.\n                if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n                token = [type, value, start, scanner.pos];\n                tokens.push(token);\n\n                if (type === '#' || type === '^') {\n                    sections.push(token);\n                } else if (type === '/') {\n                    // Check section nesting.\n                    openSection = sections.pop();\n\n                    if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n                    if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n                } else if (type === 'name' || type === '{' || type === '&') {\n                    nonSpace = true;\n                } else if (type === '=') {\n                    // Set the tags for the next time around.\n                    compileTags(value);\n                }\n            }\n\n            // Make sure there are no open sections when we're done.\n            openSection = sections.pop();\n\n            if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n            return nestTokens(squashTokens(tokens));\n        }\n\n        /**\n         * Combines the values of consecutive text tokens in the given `tokens` array\n         * to a single token.\n         */\n        function squashTokens(tokens) {\n            var squashedTokens = [];\n\n            var token, lastToken;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                if (token) {\n                    if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n                        lastToken[1] += token[1];\n                        lastToken[3] = token[3];\n                    } else {\n                        squashedTokens.push(token);\n                        lastToken = token;\n                    }\n                }\n            }\n\n            return squashedTokens;\n        }\n\n        /**\n         * Forms the given array of `tokens` into a nested tree structure where\n         * tokens that represent a section have two additional items: 1) an array of\n         * all tokens that appear in that section and 2) the index in the original\n         * template that represents the end of that section.\n         */\n        function nestTokens(tokens) {\n            var nestedTokens = [];\n            var collector = nestedTokens;\n            var sections = [];\n\n            var token, section;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                switch (token[0]) {\n                    case '#':\n                    case '^':\n                        collector.push(token);\n                        sections.push(token);\n                        collector = token[4] = [];\n                        break;\n                    case '/':\n                        section = sections.pop();\n                        section[5] = token[2];\n                        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n                        break;\n                    default:\n                        collector.push(token);\n                }\n            }\n\n            return nestedTokens;\n        }\n\n        /**\n         * A simple string scanner that is used by the template parser to find\n         * tokens in template strings.\n         */\n        function Scanner(string) {\n            this.string = string;\n            this.tail = string;\n            this.pos = 0;\n        }\n\n        /**\n         * Returns `true` if the tail is empty (end of string).\n         */\n        Scanner.prototype.eos = function eos() {\n            return this.tail === '';\n        };\n\n        /**\n         * Tries to match the given regular expression at the current position.\n         * Returns the matched text if it can match, the empty string otherwise.\n         */\n        Scanner.prototype.scan = function scan(re) {\n            var match = this.tail.match(re);\n\n            if (!match || match.index !== 0) return '';\n\n            var string = match[0];\n\n            this.tail = this.tail.substring(string.length);\n            this.pos += string.length;\n\n            return string;\n        };\n\n        /**\n         * Skips all text until the given regular expression can be matched. Returns\n         * the skipped string, which is the entire tail if no match can be made.\n         */\n        Scanner.prototype.scanUntil = function scanUntil(re) {\n            var index = this.tail.search(re),\n                match;\n\n            switch (index) {\n                case -1:\n                    match = this.tail;\n                    this.tail = '';\n                    break;\n                case 0:\n                    match = '';\n                    break;\n                default:\n                    match = this.tail.substring(0, index);\n                    this.tail = this.tail.substring(index);\n            }\n\n            this.pos += match.length;\n\n            return match;\n        };\n\n        /**\n         * Represents a rendering context by wrapping a view object and\n         * maintaining a reference to the parent context.\n         */\n        function Context(view, parentContext) {\n            this.view = view;\n            this.cache = { '.': this.view };\n            this.parent = parentContext;\n        }\n\n        /**\n         * Creates a new context using the given view with this context\n         * as the parent.\n         */\n        Context.prototype.push = function push(view) {\n            return new Context(view, this);\n        };\n\n        /**\n         * Returns the value of the given name in this context, traversing\n         * up the context hierarchy if the value is absent in this context's view.\n         */\n        Context.prototype.lookup = function lookup(name) {\n            var cache = this.cache;\n\n            var value;\n            if (cache.hasOwnProperty(name)) {\n                value = cache[name];\n            } else {\n                var context = this,\n                    names,\n                    index,\n                    lookupHit = false;\n\n                while (context) {\n                    if (name.indexOf('.') > 0) {\n                        value = context.view;\n                        names = name.split('.');\n                        index = 0;\n\n                        /**\n                         * Using the dot notion path in `name`, we descend through the\n                         * nested objects.\n                         *\n                         * To be certain that the lookup has been successful, we have to\n                         * check if the last object in the path actually has the property\n                         * we are looking for. We store the result in `lookupHit`.\n                         *\n                         * This is specially necessary for when the value has been set to\n                         * `undefined` and we want to avoid looking up parent contexts.\n                         **/\n                        while (value != null && index < names.length) {\n                            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);\n\n                            value = value[names[index++]];\n                        }\n                    } else {\n                        value = context.view[name];\n                        lookupHit = hasProperty(context.view, name);\n                    }\n\n                    if (lookupHit) break;\n\n                    context = context.parent;\n                }\n\n                cache[name] = value;\n            }\n\n            if (isFunction(value)) value = value.call(this.view);\n\n            return value;\n        };\n\n        /**\n         * A Writer knows how to take a stream of tokens and render them to a\n         * string, given a context. It also maintains a cache of templates to\n         * avoid the need to parse the same template twice.\n         */\n        function Writer() {\n            this.cache = {};\n        }\n\n        /**\n         * Clears all cached templates in this writer.\n         */\n        Writer.prototype.clearCache = function clearCache() {\n            this.cache = {};\n        };\n\n        /**\n         * Parses and caches the given `template` and returns the array of tokens\n         * that is generated from the parse.\n         */\n        Writer.prototype.parse = function parse(template, tags) {\n            var cache = this.cache;\n            var tokens = cache[template];\n\n            if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);\n\n            return tokens;\n        };\n\n        /**\n         * High-level method that is used to render the given `template` with\n         * the given `view`.\n         *\n         * The optional `partials` argument may be an object that contains the\n         * names and templates of partials that are used in the template. It may\n         * also be a function that is used to load partial templates on the fly\n         * that takes a single argument: the name of the partial.\n         */\n        Writer.prototype.render = function render(template, view, partials) {\n            var tokens = this.parse(template);\n            var context = view instanceof Context ? view : new Context(view);\n            return this.renderTokens(tokens, context, partials, template);\n        };\n\n        /**\n         * Low-level method that renders the given array of `tokens` using\n         * the given `context` and `partials`.\n         *\n         * Note: The `originalTemplate` is only ever used to extract the portion\n         * of the original template that was contained in a higher-order section.\n         * If the template doesn't use higher-order sections, this argument may\n         * be omitted.\n         */\n        Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {\n            var buffer = '';\n\n            var token, symbol, value;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                value = undefined;\n                token = tokens[i];\n                symbol = token[0];\n\n                if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);\n\n                if (value !== undefined) buffer += value;\n            }\n\n            return buffer;\n        };\n\n        Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {\n            var self = this;\n            var buffer = '';\n            var value = context.lookup(token[1]);\n\n            // This function is used to render an arbitrary template\n            // in the current context by higher-order sections.\n            function subRender(template) {\n                return self.render(template, context, partials);\n            }\n\n            if (!value) return;\n\n            if (isArray(value)) {\n                for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n                    buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n                }\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' || typeof value === 'string' || typeof value === 'number') {\n                buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n            } else if (isFunction(value)) {\n                if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n                // Extract the portion of the original template that the section contains.\n                value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n                if (value != null) buffer += value;\n            } else {\n                buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n            }\n            return buffer;\n        };\n\n        Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {\n            var value = context.lookup(token[1]);\n\n            // Use JavaScript's definition of falsy. Include empty arrays.\n            // See https://github.com/janl/mustache.js/issues/186\n            if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);\n        };\n\n        Writer.prototype.renderPartial = function renderPartial(token, context, partials) {\n            if (!partials) return;\n\n            var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n            if (value != null) return this.renderTokens(this.parse(value), context, partials, value);\n        };\n\n        Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return value;\n        };\n\n        Writer.prototype.escapedValue = function escapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return mustache.escape(value);\n        };\n\n        Writer.prototype.rawValue = function rawValue(token) {\n            return token[1];\n        };\n\n        mustache.name = 'mustache.js';\n        mustache.version = '2.3.2';\n        mustache.tags = ['{{', '}}'];\n\n        // All high-level mustache.* functions use this writer.\n        var defaultWriter = new Writer();\n\n        /**\n         * Clears all cached templates in the default writer.\n         */\n        mustache.clearCache = function clearCache() {\n            return defaultWriter.clearCache();\n        };\n\n        /**\n         * Parses and caches the given template in the default writer and returns the\n         * array of tokens it contains. Doing this ahead of time avoids the need to\n         * parse templates on the fly as they are rendered.\n         */\n        mustache.parse = function parse(template, tags) {\n            return defaultWriter.parse(template, tags);\n        };\n\n        /**\n         * Renders the `template` with the given `view` and `partials` using the\n         * default writer.\n         */\n        mustache.render = function render(template, view, partials) {\n            if (typeof template !== 'string') {\n                throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n            }\n\n            return defaultWriter.render(template, view, partials);\n        };\n\n        // This is here for backwards compatibility with 0.4.x.,\n        /*eslint-disable */ // eslint wants camel cased function name\n        mustache.to_html = function to_html(template, view, partials, send) {\n            /*eslint-enable*/\n\n            var result = mustache.render(template, view, partials);\n\n            if (isFunction(send)) {\n                send(result);\n            } else {\n                return result;\n            }\n        };\n\n        // Export the escaping function so that the user may override it.\n        // See https://github.com/janl/mustache.js/issues/244\n        mustache.escape = escapeHtml;\n\n        // Export these mainly for testing, but also for advanced usage.\n        mustache.Scanner = Scanner;\n        mustache.Context = Context;\n        mustache.Writer = Writer;\n\n        return mustache;\n    });\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */\nreturn okanjo;\n}));\n","// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n    Array.from = (function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function (fn) {\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function (value) {\n            var number = Number(value);\n            if (isNaN(number)) { return 0; }\n            if (number === 0 || !isFinite(number)) { return number; }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function (value) {\n            var len = toInteger(value);\n            return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike/*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T;\n            if (typeof mapFn !== 'undefined') {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < len… (also steps a - h)\n            var kValue;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }());\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.find\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return kValue.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return undefined.\n            return undefined;\n        }\n    });\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nif (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n        value: function(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return k.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return k;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return -1.\n            return -1;\n        }\n    });\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n        value: function(searchElement, fromIndex) {\n\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}","// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || window;\n        for (var i = 0; i < this.length; i++) {\n            callback.call(thisArg, this[i], i, this);\n        }\n    };\n}","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign != 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, \"assign\", {\n        value: function assign(target, varArgs) { // .length of function is 2\n            'use strict';\n            if (target == null) { // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) { // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        },\n        writable: true,\n        configurable: true\n    });\n}","\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nconst okanjo = (function(window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    const SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    const CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    const AGENT = window.navigator.userAgent;\n    const ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    const MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    const NOOP = () => {};\n    const Console = window.console;\n\n    // Place to pull defaults, if already set\n    const settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    const okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"%%OKANJO_VERSION\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: (...args) => {\n            let err = args.find((arg) => arg instanceof Error);\n            if (!err) {\n                let messageIndex = args.findIndex((arg) => typeof arg === \"string\");\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                let stack = (new Error()).stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter((a) => a !== err);\n            }\n\n            Console.error(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: (message, ...args) => {\n            const err = new Error(message);\n\n            Console.warn(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: (selector, parent) => {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: (route, params, env) => {\n            if (params) {\n                Object.keys(params).forEach((key) => {\n                    route = route.replace(`:${key}`, params[key]+\"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: (val) => val === null || val === undefined || (typeof val === \"string\" && val.trim().length === 0),\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: () => {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: (includeHashArguments) => {\n\n            const split = (query) => {\n                query = query || \"\";\n                const params = {};\n                const parts = query.split('&');\n                parts.forEach((part) => {\n                    const eqIndex = part.indexOf('=');\n                    let key, value;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            const queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            const hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach((key) => queryArgs[key] = hashArgs[key]);\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = (mixed, out) => {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map((val) => okanjo.util.deepClone(val)));\n        } else if (typeof mixed === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach((key) => {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = (input, options = {}) => {\n        const output = {};\n\n        if (input !== undefined && input !== null) {\n            Object\n                .keys(input)\n                .forEach((key) => {\n                    // Convert object ids to hex strings\n                    if (input[key] instanceof Date) {\n                        if (options.dateToIso) {\n                            output[key] = input[key].toISOString(); // convert to iso\n                        } else {\n                            output[key] = input[key]; // as-is\n                        }\n                    } else if (typeof input[key] === 'object' && input[key] !== null) {\n                        // Allow ignoring arrays if desired\n                        if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                            output[key] = input[key];\n                        } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                            output[key] = input[key].join(',');\n                        } else {\n                            // Make child objects flat too (always returns object so Object.keys is safe)\n                            const childObject = okanjo.util.flatten(input[key], options);\n                            Object\n                                .keys(childObject)\n                                .forEach((childKey) => {\n                                    output[key + '_' + childKey] = childObject[childKey];\n                                })\n                            ;\n                        }\n                    } else {\n                        // Copy value references\n                        output[key] = input[key];\n                    }\n                })\n            ;\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = (function(clusterWorkerId) {\n\n        const shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n\n            crypto = window.crypto || window.msCrypto || (typeof require === \"function\" && require('crypto')),\n\n            randomByte = () => {\n                /* istanbul ignore next: platform diffs out of scope */\n                if (crypto && crypto.randomBytes) {\n                    return crypto.randomBytes(1)[0] & 0x30;\n                } else if (!crypto || !crypto.getRandomValues) {\n                    return Math.floor(Math.random() * 256) & 0x30;\n                }\n                /* istanbul ignore next: platform diffs out of scope */\n                const dest = new Uint8Array(1);\n                /* istanbul ignore next: platform diffs out of scope */\n                crypto.getRandomValues(dest);\n                /* istanbul ignore next: platform diffs out of scope */\n                return dest[0] & 0x30;\n            },\n\n            encode = (number) => {\n                let loopCounter = 0,\n                    done,\n                    str = '';\n\n                while (!done) {\n                    str = str + shuffled[ ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() ];\n                    done = number < (Math.pow(16, loopCounter + 1 ) );\n                    loopCounter++;\n                }\n                return str;\n            },\n\n            // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n            // This number should be updated every year or so to keep the generated id short.\n            // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n            REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        let counter,\n            previousSeconds;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function() {\n            let str = '',\n                seconds = Math.floor(((new Date()).getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    })();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: () => {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: (element, includeMargin) => {\n            const size = {\n                height: element.offsetHeight,\n                width : element.offsetWidth\n            };\n            const style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: () => {\n            const body = document.querySelector('body');\n            const html = document.documentElement;\n\n            return {\n                w: Math.max(\n                    body.scrollWidth,\n                    body.offsetWidth,\n                    html.clientWidth,\n                    html.scrollWidth,\n                    html.offsetWidth\n                ),\n\n                h: Math.max(\n                    body.scrollHeight,\n                    body.offsetHeight,\n                    html.clientHeight,\n                    html.scrollHeight,\n                    html.offsetHeight\n                )\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: () => {\n            const element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */: document.body;\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            const inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            const isMobileZoom = (inWidth && width > inWidth) || (inHeight && height > inHeight);\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: (event) => {\n            const ex = event.pageX;\n            const ey = event.pageY;\n            const body = document.body;\n            const el = document.documentElement;\n            const scrollLeft = 'scrollLeft';\n            const scrollTop = 'scrollTop';\n            const type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: (element) => {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            const err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                let rect = element.getBoundingClientRect();\n                let body = document.body.getBoundingClientRect();\n                // let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    // x1: rect.left + pos.x,\n                    // y1: rect.top + pos.y,\n                    // x2: rect.right + pos.x,\n                    // y2: rect.bottom + pos.y\n\n                    // This might fix\n                    x1: rect.left - body.left,\n                    y1: rect.top - body.top,\n                    x2: rect.right - body.left,\n                    y2: rect.bottom - body.top,\n\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: (e, s, v) => {\n            let iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x+v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y+v.vh),\n\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea,\n                elementArea\n            };\n        },\n\n        /**\n         * Checks whether the element is actually displayed on the DOM\n         * @param element\n         * @return {boolean}\n         */\n        isElementVisible: (element) => {\n            /* istanbul ignore next: jsdom won't trigger this */\n            return element.offsetWidth > 0 && element.offsetHeight > 0;\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: (element) => {\n            let e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n            let { intersectionArea, elementArea } = okanjo.ui._getIntersection(e,s,v);\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function(element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        const parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        let text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000, // Safety switch to bust out of the loop in the event something goes terribly wrong\n            replacer = (match) => {\n                /* istanbul ignore next: n/a to jsdom */\n                replacedText = match.substr(0, match.length-3) + replacedText;\n                /* istanbul ignore next: n/a to jsdom */\n                return '...';\n            };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && (safety-- > 0)) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            let content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class','okanjo-ellipses');\n            span.setAttribute('class','okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length-3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length-3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n\n    };\n\n    /**\n     * Locates images with the class okanjo-fit and ensures that they get filled.\n     * This is basically a object-fit hacky workaround\n     * @param element\n     */\n    okanjo.ui.fitImages = function(element) {\n        // Detect objectFit support\n        /* istanbul ignore else: n/a to jsdom */\n        if ('objectFit' in document.documentElement.style === false) {\n            // Find images to fit\n            element.querySelectorAll('img.okanjo-fit').forEach((img) => {\n\n                // Hide the image\n                img.style.display = 'none';\n\n                // Update the parent w/ the background\n                let parent = img.parentNode;\n                parent.style.backgroundSize = 'cover';\n                parent.style.backgroundImage = 'url('+img.src+')';\n                parent.style.backgroundposition = 'center center';\n            });\n        }\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n\n})(window, document);","\"use strict\";\n\n(function(window) {\n\n    const JSON_TEST = /^application\\/json/;\n    const okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        const req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        let calledBack = false;\n\n        // Normalized done handler\n        const done = function(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function(e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function(e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    let res;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST','PUT','PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    const encode = (val) => {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent(''+val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    const getKey = (key, keyPrefix) => {\n        if (keyPrefix) {\n            return `${keyPrefix}[${encode(key)}]`;\n        } else {\n            return encode(key)\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = (obj, keyPrefix) => {\n        let pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach((v) => pairs.push(getKey(key, keyPrefix) + '=' + encode(v))); // Does not do that PHP garbage with key[]=val\n            } else if (typeof value === \"object\" && value !== null) {\n                // Recurse\n                let res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: (cookieName, value, expireDays) => {\n            const expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            const expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            const path = \" Path=/\";\n            const secure = window.location.protocol === 'https:' ? ' Secure;' : '';\n            // const secure = ' Secure;';\n            const cookieValue = `${encodeURI(value)};${expires}${secure} SameSite=None;${path}`;\n            // console.log('setting cookie', cookieName, cookieValue)\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: (cookieName) => {\n            let output = null;\n            document.cookie\n                .split(\";\")\n                .find((cookie) => {\n                    let nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                    let value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                    if (nameTest === cookieName) {\n                        output = decodeURI(value);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                })\n            ;\n            return output;\n        }\n    };\n\n})(window, document);","\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n    class TemplateEngine {\n\n        constructor() {\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n        registerTemplate(name, template, beforeRender, options) {\n\n            if (typeof template === \"object\") {\n                //noinspection JSValidateTypes\n                if (template.nodeType === undefined) {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                } else {\n                    template = template.innerHTML;\n                    okanjo.lib.Mustache.parse(template);\n                }\n            } else if (typeof template !== \"string\") {\n                throw new Error('Parameter template must be a string or a DOM element');\n            }\n\n            // Shift options if only have 3 params\n            if (arguments.length === 3 && typeof beforeRender === \"object\") {\n                options = beforeRender;\n                beforeRender = null;\n            } else {\n                options = options || {};\n            }\n\n            if (beforeRender && typeof beforeRender !== \"function\") {\n                throw new Error('Parameter beforeRender must be a function');\n            }\n\n            // Assign the template\n            this._templates[name] = {\n                markup: template,\n                options,\n                beforeRender\n            };\n        }\n\n        /**\n         * Registers a CSS payload for use\n         * @param name\n         * @param css\n         * @param options\n         */\n        registerCss(name, css, options) {\n            options = options || {};\n\n            if (typeof css === \"object\") {\n                //noinspection JSValidateTypes\n                if (css.nodeType === undefined) {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n            } else if (typeof css !== \"string\") {\n                throw new Error('Parameter css must be a string or a DOM element');\n            }\n\n            this._css[name] = {\n                markup: css,\n                options: options\n            };\n        }\n\n        /**\n         * Checks whether a template is registered\n         * @param name\n         * @return {boolean}\n         */\n        isTemplateRegistered(name) {\n            return !!this._templates[name];\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Checks whether a CSS payload is registered\n         * @param name\n         * @return {boolean}\n         */\n        isCssRegistered(name) {\n            return !!this._css[name];\n        }\n\n        /**\n         * Ensures that a CSS payload has been added to the DOM\n         * @param name\n         */\n        ensureCss(name) {\n            if (this._css[name]) {\n                //noinspection JSValidateTypes\n                const css = this._css[name],\n                    id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                // Check for css element on page, if we have an ID to look for\n                if (id) {\n                    const element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                    if (!element) {\n                        const head = document.head,\n                            style = document.createElement('style');\n\n                        style.id = id;\n                        style.setAttribute('type', 'text/css');\n\n                        /* istanbul ignore else: old ie */\n                        if (style.hasOwnProperty) { // old ie\n                            style.innerHTML = css.markup;\n                        } else {\n                            style.styleSheet.cssText = css.markup;\n                        }\n\n                        if (head) {\n                            head.appendChild(style);\n                        } else {\n                            // NO HEAD, just prepend to body then\n                            const body = document.body;\n                            if (body) {\n                                body.appendChild(style);\n                            } else {\n                                // And if this doesn't work, just give up\n                                okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                            }\n                        }\n                    }\n                }\n            } else {\n                okanjo.report('Attempted to add CSS template \"'+name+'\" to the DOM, however it does not appear to be registered?');\n            }\n        }\n\n        /**\n         * Renders a template and returns the markup\n         * @param templateName\n         * @param context\n         * @param model\n         * @return {string}\n         */\n        render(templateName, context, model) {\n\n            model = model || {};\n            const template = this._templates[templateName];\n\n            // If there's a data controller closure set, and if so, run the data through there\n            if (template.beforeRender) {\n                model = template.beforeRender.call(context, model);\n            }\n\n            // Attach globals\n            model.okanjo = okanjo;\n            model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//,''); // Url w/o scheme to prevent mixed-content warnings\n            model.now = function() { return (new Date()).getTime(); };\n            model.classDetects = this.classDetects;\n\n            //noinspection JSUnresolvedVariable\n            if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                model.classDetects += \" \" + model.blockClasses.join(' ');\n                delete model.blockClasses;\n            }\n\n            // Add CSS unless we are told not to\n            if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                template.options.css.forEach((css) => this.ensureCss(css));\n                delete model.css;\n            }\n\n            // Render the template and return the result\n            return okanjo.lib.Mustache.render(template.markup, model);\n        }\n\n    }\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n    TemplateEngine.formatCurrency = (value, decimals=2, decimalSeparator='.', thousandsSeparator=',') => {\n        const s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        let j = i.length;\n        j = (j) > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    /*\n\n     div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n\n     */\n\n    const okanjo = window.okanjo;\n    const IS_MOBILE = okanjo.util.isMobile();\n\n    let initialized = false,\n        // scrollY = null,\n\n        // Selectors\n        $html, $body, $modalContainer, $modalWindow, $modalSkin, $modalOuter, $modalInner, $modalClose, $modalFrame,\n\n        createElements = function() {\n\n            // Page elements\n            //noinspection JSUnresolvedFunction\n            $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n            //noinspection JSUnresolvedFunction\n            $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n            // Modal elements\n            $modalContainer = document.createElement('div');\n            $modalWindow = document.createElement('div');\n            $modalSkin = document.createElement('div');\n            $modalOuter = document.createElement('div');\n            $modalInner = document.createElement('div');\n            $modalClose = document.createElement('div');\n            $modalFrame = document.createElement('iframe');\n\n            $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n            $modalWindow.setAttribute('class', 'okanjo-modal-window');\n            $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n            $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n            $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n            $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n            $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n            $modalFrame.setAttribute('frameborder', '0');\n            $modalFrame.setAttribute('vspace', '0');\n            $modalFrame.setAttribute('hspace', '0');\n            $modalFrame.setAttribute('webkitallowfullscreen', '');\n            $modalFrame.setAttribute('mozallowfullscreen', '');\n            $modalFrame.setAttribute('allowfullscreen', '');\n            $modalFrame.setAttribute('scrolling', 'auto');\n\n            $modalClose.innerHTML = '×';\n\n            // Create the modal element tree\n            $modalInner.appendChild($modalFrame);\n            $modalOuter.appendChild($modalInner);\n            $modalSkin.appendChild($modalOuter);\n            $modalWindow.appendChild($modalSkin);\n            $modalWindow.appendChild($modalClose);\n            $modalContainer.appendChild($modalWindow);\n\n            // Add the modal stuff to the body\n            $body.appendChild($modalContainer);\n        },\n\n        addListener = function(el, event, handler) {\n            /* istanbul ignore else: old browsers */\n            if (el.addEventListener) {\n                el.addEventListener(event, handler, false);\n            } else {\n                el.attachEvent(\"on\" + event, handler);\n            }\n        },\n\n        getWindowHeight = function() {\n            return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n        },\n\n        handleReposition = function() {\n            // scrollY = okanjo.ui.getScrollPosition().y;\n            //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n            $modalWindow.style.height = (getWindowHeight() - 80) + \"px\";\n        },\n\n        bindEvents = function() {\n\n            // If the device orientation changes, adjust the modal view port\n            addListener(window, 'orientationchange', function() {\n                for (let t = 0; t < 2; t++) {\n                    setTimeout(handleReposition, 1000 * t + 10);\n                }\n            });\n\n            // If the window changes size, also adjust the modal view port\n            addListener(window, 'resize', function() {\n                setTimeout(handleReposition, 100);\n            });\n\n            // Click the overlay to close the modal\n            addListener($modalContainer, 'click', closeModal);\n\n            // If you click in the modal, don't close it!\n            addListener($modalWindow, 'click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Click the close button to close it\n            addListener($modalClose, 'click', function(e) {\n\n                // Don't close it twice\n                e.preventDefault();\n                e.stopPropagation();\n\n                closeModal();\n            });\n\n        },\n\n        //removeListener = function(el, event, handler) {\n        //    if (el.removeEventListener) {\n        //        el.removeEventListener(event, handler);\n        //    } else {\n        //        el.detachEvent(\"on\" + event, handler);\n        //    }\n        //},\n\n        addClass = function(el, name) {\n            el.className += \" \" + name;\n        },\n\n        removeClass = function(el, name) {\n            el.className = el.className.replace(new RegExp(' *?'+name), '');\n        },\n\n        openModal = function() {\n\n            // scrollY = document.body.scrollTop;\n\n            removeClass($modalContainer, 'okanjo-modal-hidden');\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            handleReposition();\n\n            addClass($html, \"okanjo-modal-active\");\n\n            if (!IS_MOBILE) {\n                addClass($html, \"okanjo-modal-margin-fix\");\n            }\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n            }, 10);\n\n            // Click the overlay to close the modal\n            //addListener($body, 'click', closeModal);\n\n        },\n\n        closeModal = function() {\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n                addClass($modalContainer, \"okanjo-modal-hidden\");\n\n                removeClass($html, \"okanjo-modal-active\");\n                if (!IS_MOBILE) {\n                    removeClass($html, \"okanjo-modal-margin-fix\");\n                }\n            }, 210);\n\n            // Click the overlay to close the modal\n            //removeListener($body, 'click', closeModal);\n        },\n\n        /**\n         * Insert an element or markup into the modal\n         * @param content\n         */\n        setContent = function(content) {\n\n            // Remove existing content\n            $modalInner.innerHTML = \"\";\n\n            // Insert new content\n            if (typeof content === \"string\") {\n                $modalInner.innerHTML = content;\n            } else {\n                $modalInner.appendChild(content);\n            }\n        };\n\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n    class Metrics {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n        _getStoredQueue() {\n            if (window.localStorage[Metrics.Params.queue]) {\n                try {\n                    let queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                    if (Array.isArray(queue)) {\n                        return queue;\n                    } else {\n                        okanjo.report('Stored queue is not a queue', {queue});\n                        return [];\n                    }\n                } catch (e) {\n                    okanjo.report('Failed to load metric queue from storage', {err: e});\n                    return [];\n                }\n            } else {\n                // not stored\n                return [];\n            }\n        }\n\n        /**\n         * Updates the queue stored in storage, in the event we can't complete our submissions\n         * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n         * @private\n         */\n        _saveQueue(delay) {\n            if (delay) {\n                if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                this._saveQueueTimeout = setTimeout(() => {\n                    this._saveQueue(false);\n                    this._saveQueueTimeout = null;\n                }, 100);\n            } else {\n                window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n            }\n        }\n\n        /**\n         * Extract contextual pass-through data from the URL, if present\n         * @private\n         */\n        _checkUrlForReferral() {\n            const pageArgs = okanjo.util.getPageArguments(true),\n                urlSid = pageArgs[Metrics.Params.name],\n                localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name), // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                sourceChannel = pageArgs[Metrics.Params.channel];\n\n            // If for some reason, both are set, record the incident as a possible correlation\n            if (urlSid && localSid && urlSid !== localSid) {\n                this.trackEvent({\n                    object_type: Metrics.Object.metric_session,\n                    event_type: Metrics.Event.correlation,\n                    id: urlSid+\"_\"+localSid,\n                    ch: this.defaultChannel,\n                    _noProcess: true\n                });\n            }\n\n            // Update local values\n            this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n            this.sourceCh = sourceChannel || null;\n            this.sourceCx = sourceContext || null;\n        }\n\n        /**\n         * Submits an individual event metric\n         * @param event\n         * @param callback\n         */\n        trackEvent(event, callback) {\n            // Ensure the event contains the required fields\n            if (!event.object_type || !event.event_type) {\n                okanjo.report('Invalid metric to track (missing object_type or event_type)', {event});\n                return;\n            }\n\n            // Queue the event for publishing\n            this._push(event, callback);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Submits a page view metric\n         * @param event\n         * @param callback\n         */\n        trackPageView(event, callback) {\n            event = event || {};\n            event.object_type = Metrics.Object.page;\n            event.event_type = Metrics.Event.view;\n            event.id = event.id || window.location.href;\n            event.ch = event.ch || this.defaultChannel;\n\n            // Queue the event for publishing\n            this.trackEvent(event, callback);\n        }\n\n        /**\n         * Adds an event to the queue\n         * @param event\n         * @param callback\n         * @private\n         */\n        _push(event, callback) {\n            this._queue.push({ event, callback });\n\n            // Save the queue\n            this._saveQueue(true);\n\n            // Start burning down the queue, unless the event says not to\n            if (event._noProcess) {\n                delete event._noProcess;\n            } else {\n                this._processQueue();\n            }\n        }\n\n        /**\n         * Burn down the queue\n         * @private\n         */\n        _processQueue() {\n            // If the queue is not already being processed, and there's stuff to process, continue sending them\n            if (!this._processTimeout && this._queue.length > 0) {\n                this._processTimeout = setTimeout(() => {\n\n                    // Pull the items we're going to batch out of the queue\n                    const items = this._queue.splice(0, 255);\n                    this._saveQueue(false);\n\n                    // Track the item\n                    this._batchSend(items, (err, res) => {\n                        // TODO: If there was an error, consider splicing the batch back into the queue\n\n                        // Update / Set the metric sid on the publisher\n                        /* istanbul ignore else: server barks */\n                        if (res && res.data && res.data.sid) this._updateSid(res.data.sid);\n\n                        // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                        this._processTimeout = null;\n                        this._processQueue();\n\n                        // Fire the event callbacks if there are any\n                        items.forEach((item) => {\n                            item.callback && item.callback(err, res);\n                        });\n                    });\n\n                }, 0); // break event loop, maybe\n            }\n        }\n\n        /**\n         * Sends a bunch of queued metric events\n         * @param items\n         * @param callback\n         * @private\n         */\n        _batchSend(items, callback) {\n\n            // Normalize event data\n            const events = items.map((item) => {\n                this._normalizeEvent(item.event);\n\n                // Strip duplicated data from event batch\n                delete item.event.sid;\n                delete item.event.win;\n\n                return item.event;\n            });\n\n            const payload = {\n                events,\n                win: window.location.href\n            };\n\n            const route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n            // Set sid if present\n            if (this.sid) {\n                payload.sid = this.sid;\n            }\n\n            // Send it\n            okanjo.net.request.post(\n                route,\n                payload,\n                (err, res) => {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err, res, items, route });\n                    }\n                    callback && callback(err, res);\n                }\n            );\n        }\n\n        /**\n         * Normaizes events so that they contain consistent data values\n         * @param event\n         * @private\n         */\n        _normalizeEvent(event) {\n\n            // Ensure meta is ready to receive values\n            event.m = event.m || {};\n\n            // Set key\n            event.key = event.key || event.m.key || okanjo.key || undefined;\n\n            // Set session\n            if (this.sid) event.sid = this.sid;\n\n            // Clone the metadata, since it might be a direct reference to a widget property\n            // Deleting properties on the meta object could be very destructive\n            event.m = Object.assign({}, event.m); // event.m should be flat\n\n            // Strip meta keys that should be excluded\n            Object.keys(Metrics.Meta.exclude).forEach((key) => delete event.m[key]);\n\n            // Set referral channel / context\n            if (this.sourceCh) { event.m.ref_ch = this.sourceCh; }\n            if (this.sourceCx) { event.m.ref_cx = this.sourceCx; }\n\n            // Set page group id\n            event.m.pgid = this.pageId;\n\n            // Set okanjo version\n            event.m.ok_ver = okanjo.version;\n\n            // Finalize metadata\n            event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n            // Ensure metadata strings won't exceed the imposed limit\n            Object.keys(event.m).forEach((key) => {\n                if (typeof event.m[key] === \"string\") {\n                    event.m[key] = event.m[key].substr(0, 255);\n                }\n            });\n\n            // Set page source reference\n            if (document.referrer) {\n                event.ref = document.referrer;\n            }\n\n             // Set the window location\n            event.win = window.location.href;\n        }\n\n        /**\n         * Updates the stored session identifier\n         * @param sid\n         * @private\n         */\n        _updateSid(sid) {\n            if (!this.sid && sid) {\n                this.sid = sid;\n                window.localStorage[Metrics.Params.name] = sid;\n                okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @param event\n         * @return {*|{}}\n         */\n        static addElementInfo(element, event) {\n            const page = okanjo.ui.getPageSize(),\n                size = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.pw = page.w;\n            event.m.ph = page.h;\n            event.m.x1 = size.x1;\n            event.m.y1 = size.y1;\n            event.m.x2 = size.x2;\n            event.m.y2 = size.y2;\n\n            return event;\n        }\n\n        static addWidgetInfo(element, event) {\n            const containerSize = okanjo.ui.getElementPosition(element);\n            const innerSize = okanjo.ui.getElementPosition(element.childNodes[0]);\n\n            event = event || {};\n            event.m = event.m || {};\n\n            // placement div size\n            event.m.wox1 = containerSize.x1;\n            event.m.woy1 = containerSize.y1;\n            event.m.wox2 = containerSize.x2;\n            event.m.woy2 = containerSize.y2;\n\n            // inner size (might be centered or something)\n            event.m.wix1 = innerSize.x1;\n            event.m.wiy1 = innerSize.y1;\n            event.m.wix2 = innerSize.x2;\n            event.m.wiy2 = innerSize.y2;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @param event\n         * @return {*|{}}\n         */\n        static addViewportInfo(event) {\n            const vp = okanjo.ui.getViewportSize(),\n                pos = okanjo.ui.getScrollPosition();\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.vx1 = pos.x;\n            event.m.vy1 = pos.y;\n            event.m.vx2 = pos.x+vp.vw;\n            event.m.vy2 = pos.y+vp.vh;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @param event\n         * @return {*|{}}\n         */\n        static addEventInfo(jsEvent, event) {\n            const pos = okanjo.ui.getEventPosition(jsEvent);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.et = pos.et;\n            event.m.ex = pos.ex;\n            event.m.ey = pos.ey;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param event\n         * @param args\n         * @return {*|{}}\n         */\n        static addEventMeta(event, ...args) {\n            event = event || {};\n            event.m = event.m || {};\n            event.m = Object.assign.apply(Object, [event.m].concat(args));\n            \n            return event;\n        }\n\n        /**\n         * Helper to create a new fluent event structure\n         * @param data\n         * @param args\n         * @return {MetricEvent}\n         */\n        static create(data, ...args) {\n            // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n            return new MetricEvent(data, args);\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Helper to create a new fluent event structure\n         * @param args\n         * @return {*}\n         */\n        create(...args) {\n            return Metrics.create.apply(null, args);\n        }\n\n    }\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key','callback','metrics_channel_context','metrics_context','mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n    class MetricEvent {\n        constructor(data, others) {\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach((data) => {\n                    this.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n        data(data) {\n            Object.assign(this, okanjo.util.deepClone(data));\n            return this;\n        }\n\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @return {MetricEvent}\n         */\n        event(jsEvent) {\n            Metrics.addEventInfo(jsEvent, this);\n            return this;\n        }\n\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @return {MetricEvent}\n         */\n        viewport() {\n            Metrics.addViewportInfo(this);\n            return this;\n        }\n\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @return {MetricEvent}\n         */\n        element(element) {\n            Metrics.addElementInfo(element, this);\n            return this;\n        }\n\n        /**\n         * Adds widget DOM element dimensions / positional data to the event\n         * @param element\n         * @returns {MetricEvent}\n         */\n        widget(element) {\n            Metrics.addWidgetInfo(element, this);\n            return this;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param args\n         * @return {MetricEvent}\n         */\n        meta(...args) {\n            Metrics.addEventMeta.apply(null, [this].concat(args));\n            return this;\n        }\n\n        /**\n         * Sets the object and event type on the event w/o having to use .data\n         * @param object_type\n         * @param event_type\n         * @return {MetricEvent}\n         */\n        type(object_type, event_type) {\n            this.object_type = object_type;\n            this.event_type = event_type;\n            return this;\n        }\n\n        /**\n         * Finalizes and sends the event\n         * @param callback\n         */\n        send(callback) {\n            okanjo.metrics.trackEvent(this, callback);\n            // DONT RETURN - BREAK THE CHAIN HERE\n        }\n\n        /**\n         * Gets the single-metric tracking url for this event\n         * @return {string}\n         */\n        toUrl() {\n            // Copy data w/o modifying it\n            const event = Object.assign({}, this);\n\n            // Extract params\n            const {\n                object_type,\n                event_type\n            } = event;\n            delete event.object_type;\n            delete event.event_type;\n\n            // Normalize event data\n            okanjo.metrics._normalizeEvent(event);\n\n            // Get the URL\n            return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type, event_type }) + '?' +\n                okanjo.net.request.stringify(event);\n        }\n    }\n\n    // Export / initialize\n    okanjo.metrics = new Metrics();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({_noProcess:true});\n    setTimeout(() => {\n        okanjo.metrics._processQueue();\n    }, 1000);\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function(window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    class EventEmitter {\n\n        constructor() {\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n        on(event, listener) {\n            if (!this._events[event]) {\n                this._events[event] = [];\n            }\n\n            this._events[event].push(listener);\n        }\n\n        /**\n         * Removes an event handler for an event\n         * @param event\n         * @param listener\n         */\n        removeListener(event, listener) {\n\n            if (this._events[event]) {\n                let idx = this._events[event].indexOf(listener);\n                if (idx >= 0) {\n                    this._events[event].splice(idx, 1);\n                }\n            }\n        }\n\n        /**\n         * Emits an event\n         * @param event\n         */\n        emit(event) {\n            let i, listeners, length, args = [].slice.call(arguments, 1);\n\n            if (this._events[event]) {\n                listeners = this._events[event].slice();\n                length = listeners.length;\n\n                for (i = 0; i < length; i++) {\n                    listeners[i].apply(this, args);\n                }\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Registers an event handler to fire only once on an event\n         * @param event\n         * @param listener\n         */\n        once(event, listener) {\n\n            const callback = () => {\n                let args = [].slice.call(arguments, 1);\n                this.removeListener(event, callback);\n                listener.apply(this, args);\n            };\n\n            this.on(event, callback);\n        }\n\n    }\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n    const DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    const DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n    class Widget extends okanjo._EventEmitter {\n\n        constructor(element, options) {\n            super();\n\n            // Verify element was given (we can't load unless we have one)\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: this, element, options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && typeof options !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + typeof options, { widget: this, element, options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            this.name = 'Widget';\n            this.element = element;\n            this.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            this.config = Object.assign({}, options);\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n        init() {\n            // process config attributes\n            this._applyConfiguration();\n\n            this._setCompatibilityOptions();\n\n            // ensure placement key\n            if (!this._ensurePlacementKey()) return;\n\n            // Tell the widget to load\n            this.load();\n        }\n\n        /**\n         * This is for extended widgets, so they may modify the configuration before loading\n         */\n        _setCompatibilityOptions() {\n            // By default, this does nothing. Must be overridden to be useful\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Widget configuration definitions\n         * @return {{}}\n         */\n        getSettings() {\n            // Override this\n            return {};\n        }\n\n        /**\n         * Main widget load function.\n         */\n        load() {\n            // Override this in the widget implementation\n        }\n\n        /**\n         * Applies data attribute settings and defaults to the widget configuration\n         * @private\n         */\n        _applyConfiguration() {\n\n            // this.config was set to the options provided in the constructor\n            // so layer data attributes on top\n\n            const data = this.getDataAttributes();\n            const settings = this.getSettings();\n            Object\n                .keys(data)\n                .forEach((key) => {\n                    let normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    let val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        this.config[normalizedKey] = val;\n                    }\n                })\n            ;\n\n            // Apply defaults from the widget settings\n            Object.keys(settings).forEach((key) => {\n                if (this.config[key] === undefined && settings[key]._default !== undefined) {\n                    this.config[key] = settings[key].value(undefined, false);\n                }\n            });\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets a copy of the configuration, suitable for transmission\n         * @return {{}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = {};\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let group = null;\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        /**\n         * Before loading, ensure that a placement key is present or abort\n         * @return {boolean}\n         * @private\n         */\n        _ensurePlacementKey() {\n\n            // Check if set on widget or globally\n            if (this.config.key) {\n                return true;\n            } else if (okanjo.key) {\n                // Copy key from global scope,\n                this.config.key = okanjo.key;\n                return true;\n            }\n\n            // No key set, can't load.\n            okanjo.report('No key provided on widget', { widget: this });\n            this.showError('Error: Missing placement key.');\n            return false;\n        }\n\n        /**\n         * Displays an error in the widget element\n         * @param message\n         */\n        showError(message) {\n            this.setMarkup(okanjo.ui.engine.render(\n                'okanjo.error',\n                this,\n                { message }\n            ));\n        }\n\n        /**\n         * Sets the markup of the widget's element\n         * @param markup\n         */\n        setMarkup(markup) {\n            this.element.innerHTML = markup;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the current page URL, sans query string and fragment.\n         * @returns {string} - URL\n         */\n        static getCurrentPageUrl() {\n            return window.location.href.replace(/([?#].*)$/, '');\n        }\n\n        /**\n         * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n         * @returns {*}\n         */\n        getDataAttributes() {\n            const data = {};\n                Array\n                    .from(this.element.attributes)\n                    .forEach((attr) => {\n                        const match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                        if (match) {\n                            data[match[1]] = attr.value;\n                        }\n                    });\n            return data;\n        }\n\n    }\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n    Widget.Field = class Field {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n        array(converter) {\n            this._convert = (val) => {\n                if (Array.isArray(val)) {\n                    if (converter) {\n                        return val.map((v) => converter(v))\n                    } else {\n                        return val;\n                    }\n                }\n                val = val.replace(/\\\\,/g, '\\0');\n                return val.split(',').map((v) => {\n                    let res = v.trim().replace('\\0', ',');\n                    if (converter) res = converter(res);\n                    return res;\n                });\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static array(converter) { return (new Field()).array(converter); }\n\n        /**\n         * Formats the value as a string\n         * @return {Field}\n         */\n        string() {\n            this._convert = (val) => {\n                if (val === null || val === undefined) return val;\n                else return \"\"+val;\n            };\n            return this;\n        }\n        static string() { return (new Field()).string(); }\n\n        /**\n         * Formats the value as a boolean (takes 1, 0, true, false)\n         * @return {Field}\n         */\n        bool() {\n            this._convert = (val) => {\n                if (typeof val === \"string\") {\n                    return (val === \"1\" || val.toLowerCase() === \"true\");\n                } else {\n                    return !!val;\n                }\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static bool() { return (new Field()).bool(); }\n\n        /**\n         * Indicates the field should not be passed on for transmission\n         * @return {Field}\n         */\n        strip() { this._strip = true; return this; }\n        static strip() { return (new Field()).strip(); }\n\n        /**\n         * Formats the value as a integer (whole) number\n         * @return {Field}\n         */\n        int() { this._convert = (val) => parseInt(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static int() { return (new Field()).int(); }\n\n        /**\n         * Formats the value as a floating point number\n         * @return {Field}\n         */\n        float() { this._convert = (val) => parseFloat(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static float() { return (new Field()).float(); }\n\n        //noinspection ReservedWordAsName\n        /**\n         * Sets the default value to use if not set\n         * @param val\n         * @return {Field}\n         */\n        default(val) {\n            this._default = val;\n            return this;\n        }\n\n        /**\n         * Assigns the property to a bucket for hierarchy\n         * @param name\n         * @return {Field}\n         */\n        group(name) {\n            this._group = name;\n            return this;\n        }\n\n        /**\n         * Gets the group the field belongs to\n         * @return {*|null}\n         */\n        getGroup() {\n            return this._group;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the formatted value of the field\n         * @param val\n         * @param strip\n         * @return {*}\n         */\n        value(val, strip=true) {\n            if (this._strip && strip) return undefined;\n            if (val !== undefined && this._convert) {\n                val = this._convert(val);\n            }\n            return val !== undefined ? val : this._default;\n        }\n\n    };\n\n    // Export\n    return okanjo._Widget = Widget;\n\n})(window);\n\n\n\n","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    //region Imports and Constants\n\n    const okanjo = window.okanjo;\n    const { string, array, float, int, bool } = okanjo._Widget.Field;\n    const Metrics = okanjo.metrics.constructor;\n    const TemplateEngine = okanjo.ui.engine.constructor;\n\n    const FILTERS = 'filters';\n    const DISPLAY = 'display';\n    const ARTICLE_META = 'article_meta';\n\n    const MINIMUM_VIEW_PX = 0.5;    // 50% of pixels must be in viewport\n    const MINIMUM_VIEW_TIME = 1000; // for 1 full second\n    const MINIMUM_VIEW_FREQ = 2;    // time / freq = interval\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n    class Placement extends okanjo._Widget {\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        constructor(element, options = {}) {\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n            super(element, options);\n\n            this.name = 'Placement';\n            this._metricBase = {}; // placeholder for metrics\n            this._response = null;\n\n            // Aggregate view watchers into a single interval fn\n            this._viewWatcherIv = null;\n            this._viewedWatchers = [];\n\n            // Start loading content\n            if (!options.no_init) this.init();\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n        getSettings() {\n            return {\n\n                // What type of response do you want\n                type: string().group(FILTERS),\n\n                // What specific products do you want\n                ids: array().group(FILTERS),\n\n                // Filter by generic query string\n                q: string().group(FILTERS),\n\n                // Filter by relation to content\n                url: string().group(FILTERS),\n                url_referrer: string().group(FILTERS).strip(),\n                url_selectors: string().group(FILTERS),\n                url_paths: array().group(FILTERS),\n                not_url_paths: array().group(FILTERS),\n\n                // Filter by hierarchy\n                organization_id: string().group(FILTERS),\n                property_id: string().group(FILTERS),\n                store_id: string().group(FILTERS),\n\n                // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                organization_name: string().group(FILTERS),\n                property_name: string().group(FILTERS),\n                store_name: string().group(FILTERS),\n\n                // Filter by integrations\n                external_id: string().group(FILTERS),\n                sku: string().group(FILTERS),\n                external_store_id: string().group(FILTERS),\n\n                // Filter by product attributes\n                condition: string().group(FILTERS),\n                manufacturer: string().group(FILTERS),\n                upc: string().group(FILTERS),\n                isbn: string().group(FILTERS),\n\n                // Filter by categorization / distribution\n                tags: array().group(FILTERS),\n                category: array().group(FILTERS),\n                pools: array().group(FILTERS),\n\n                // Filter by price range\n                min_price: float().group(FILTERS),\n                max_price: float().group(FILTERS),\n\n                // Filter by donation ranges\n                min_donation_percent: float().group(FILTERS),\n                max_donation_percent: float().group(FILTERS),\n\n                // Filter by donation recipient\n                donation_to: string().group(FILTERS),\n\n                // Sorting\n                sort_by: string().group(FILTERS),\n                sort_direction: string().group(FILTERS),\n\n                // Pagination\n                skip: int().group(FILTERS),\n                take: int().group(FILTERS),\n\n                // Placement Testing\n                placement_tests_only: bool(),\n\n                // Display settings\n                size: string().group(DISPLAY),\n                template_name: string().group(DISPLAY),\n                template_layout: string().group(DISPLAY),\n                template_theme: string().group(DISPLAY),\n                template_variant: string().group(DISPLAY),\n                template_cta_style: string().group(DISPLAY),\n                template_cta_text: string().group(DISPLAY),\n                template_cta_color: string().group(DISPLAY),\n                adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                // Article metadata\n                url_category: array().group(ARTICLE_META),\n                url_keywords: array().group(ARTICLE_META),\n\n                // Functional settings\n                key: string().strip(), // don't need to resend key on all our requests\n                no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                proxy_url: string().strip(),\n                expandable: bool().strip().default(true),\n                disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                backwards: string().strip(), // internal flag indicating port from a deprecated widget\n                testing: bool().strip() // metrics flag to indicate testing\n            };\n        }\n\n        /**\n         * Gets the widget configuration formatted using settings, suitable for transmission\n         * @return {{filters: {}, display: {}, backfill: {}, shortfill: {}, article_meta: {}}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = { filters: {}, display: {}, backfill: {}, shortfill: {}, article_meta: {} };\n            const backfillPattern = /^backfill_(.+)$/; // backfill_property\n            const shortfillPattern = /^shortfill_(.+)$/; // shortfill_property\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let isBackfill = false;\n                let isShortfill = false;\n                let group = null;\n\n                // Get the property name if it was prefixed with backfill\n                let matches = backfillPattern.exec(origKey);\n                if (matches) {\n                    key = matches[1];\n                    isBackfill = true;\n                } else {\n                    // Get the property name if it was prefixed with shortfill\n                    matches = shortfillPattern.exec(origKey);\n                    if (matches) {\n                        key = matches[1];\n                        isShortfill = true;\n                    }\n                }\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (isBackfill) {\n                    target = out.backfill;\n                } else if (isShortfill) {\n                    target = out.shortfill;\n                }\n\n                // Set the target to the bucket in the settings container\n                // except shortfill - can only apply settings directly to the bucket\n                // e.g. backfill_url -> { backfill: { filters: { url: xxx } } }\n                // e.g. shortfill_url-> { shortfill: { url: xxx } }\n                if (!isShortfill && group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Core load process\n         */\n        load() {\n            // Set metric base data (stub for all future events emitted by the widget)\n            this._setMetricBase();\n\n            // Find out what we should display here\n            this._fetchContent((err) => {\n                if (err) {\n                    // Report the widget load as declined\n                    this._reportWidgetLoad(\"fetch failed: \" + err.statusCode /* istanbul ignore next: out of scope */ || err.toString());\n                } else {\n                    // Merge display settings from response\n                    this._mergeResponseSettings();\n\n                    // Merge the referential data from the response\n                    this._updateBaseMetaFromResponse();\n\n                    // Handle rendering based on output type\n                    this._showContent();\n                }\n            });\n        }\n\n        //endregion\n\n        //region Internal Helpers\n\n        /**\n         * Initializes the common metric data for events emitted by the placement\n         * @private\n         */\n        _setMetricBase() {\n            const base = this._metricBase;\n            base.ch = Metrics.Channel.placement;\n            base.cx = this.config.backwards || 'auto';\n            base.key = this.config.key;\n            base.m = base.m || {};\n            base.m.wgid = this.instanceId;\n\n            if (this.config.testing) base.env = Metrics.Environment.testing;\n        }\n\n        /**\n         * Emits the widget impression event\n         * @param declined\n         * @private\n         */\n        _reportWidgetLoad(declined) {\n\n            const res = this._response || {};\n            const data = res.data || { results: [] };\n\n            // If this is declined, mark future events as declined too\n            this._metricBase.m.decl = declined || '0';\n\n            // Attach other main response attributes to all future events\n            this._metricBase.m.res_bf = data.backfilled ? 1 : 0; // whether the response used the back fill flow\n            this._metricBase.m.res_sf = data.shortfilled ? 1 : 0; // whether the response used the short fill flow\n            this._metricBase.m.res_spltfl = data.splitfilled ? 1 : 0; // whether the response used the short fill flow\n            this._metricBase.m.res_total = data.total || 0; // how many total candidate results were available given filters\n            this._metricBase.m.res_type = data.type; // what the given resource type was\n            this._metricBase.m.res_length = data.results.length; // number of resources delivered\n\n            // Track impression\n            okanjo.metrics.create(this._metricBase)\n                .type(Metrics.Object.widget, Metrics.Event.impression)\n                .meta(this.getConfig())\n                .element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport()\n                .widget(this.element)\n                .send();\n\n            // Start watching for a viewable impression\n            this._addOnceViewedHandler(this.element, () => {\n                okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.widget, Metrics.Event.view)\n                    .meta(this.getConfig())\n                    .element(this.element)\n                    .viewport()\n                    .widget(this.element)\n                    .send();\n            });\n        }\n\n        /**\n         * Executes the request for content to fill the placement\n         * @param callback\n         * @private\n         */\n        _fetchContent(callback) {\n            // Build request to api, starting with this placement config params\n            const query = this.getConfig();\n\n            // Extract the key\n            const key = this.config.key;\n\n            // Attach sid and referrer\n            if (okanjo.metrics.sid) query.sid = okanjo.metrics.sid;\n            query.filters.url_referrer = this.config.url_referrer || window.location.href;\n            query.wgid = this.instanceId;\n            query.pgid = okanjo.metrics.pageId;\n\n            // Send it\n            okanjo.net.request.post(\n                `${okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live')}?key=${encodeURIComponent(key)}`,\n                query,\n                (err, res) => {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: this });\n                        this.setMarkup(''); // Don't show anything\n                        this.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        this._response = res;\n\n                        // Hook point for response handling\n                        this.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                }\n            );\n        }\n\n        /**\n         * Applies response filters and display settings into the widget configuration\n         * @private\n         */\n        _mergeResponseSettings() {\n            const res = this._response;\n            const data = res.data || {};\n            const settings = data.settings || {};\n\n            if (settings.filters) {\n                Object.keys(settings.filters).forEach((key) => {\n                    this.config[key] = settings.filters[key];\n                });\n            }\n\n            if (settings.display) {\n                Object.keys(settings.display).forEach((key) => {\n                    this.config[key] = settings.display[key];\n                });\n            }\n        }\n\n        /**\n         * Applies response data to future metric events\n         * @private\n         */\n        _updateBaseMetaFromResponse() {\n            // Update the base metric data with info from the response\n            const data = (this._response|| {}).data || {};\n            this._metricBase.m = this._metricBase.m || {};\n            const meta = this._metricBase.m;\n\n            // Article\n            if (data.article) meta.aid = data.article.id;\n\n            if (data.test && data.test.enabled) {\n                meta.pten = 1;\n                meta.ptid = data.test.id;\n                meta.ptseed = data.test.seed;\n            } else {\n                meta.pten = 0;\n            }\n        }\n\n        /**\n         * Beings the render process based on the response content\n         * @private\n         */\n        _showContent() {\n            const data = (this._response|| {}).data || {};\n\n            // Known content types we can display\n            if (data.type === Placement.ContentTypes.products) {\n                this._showProducts();\n            } else if (data.type === Placement.ContentTypes.articles) {\n                this._showArticles();\n            } else if (data.type === Placement.ContentTypes.adx) {\n                this._showADX();\n            } else {\n                // Unknown response type!\n\n                // Report the widget load as declined\n                const msg = 'Unknown response content type: ' + data.type;\n                okanjo.report(msg, { placement: this });\n                this.setMarkup(''); // Don't show anything\n                this.emit('error', msg);\n                this._reportWidgetLoad(msg);\n            }\n        }\n\n        /**\n         * Generates the click url using the event, proxy_url, and additional params\n         * @param event\n         * @param url\n         * @param additionalUrlParams\n         * @return {*}\n         * @private\n         */\n        _getClickThroughURL(event, url, additionalUrlParams) {\n            const joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n            // Tack on transfer params\n            additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n            additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n            additionalUrlParams.ok_ch = this._metricBase.ch;\n            additionalUrlParams.ok_cx = this._metricBase.cx;\n            additionalUrlParams._okjr = window.location.href.split(/[?#]/)[0];\n            additionalUrlParams.utm_source = 'okanjo';\n            additionalUrlParams.utm_campaign = 'smartserve';\n            // additionalUrlParams.utm_source = window.location.hostname;\n            additionalUrlParams.utm_medium = 'smartserve';\n            // additionalUrlParams.utm_campaign = 'smartserve';\n\n\n            url += joiner + Object.keys(additionalUrlParams)\n                    .map((key) => encodeURIComponent(key)+'='+encodeURIComponent(additionalUrlParams[key]))\n                    .join('&');\n\n            // Wrap the url if we're proxying\n            if (this.config.proxy_url) {\n                url = this.config.proxy_url + encodeURIComponent(url);\n            }\n\n            // Set the url on the event\n            event.data({\n                u: url\n            });\n\n            return event.toUrl();\n        }\n\n        /**\n         * Converts a resource's link into one suitable for tracking, making middle-click safe\n         * @param type\n         * @param resource\n         * @param e\n         * @private\n         */\n        _handleResourceMouseDown(type, resource, e) {\n            // Generate a new click id for this event\n            // const clickId = okanjo.util.shortid();\n            const clickId = resource._cid;\n\n            // Start building the event\n            const event = okanjo.metrics.create(this._metricBase, {\n                id: resource.id\n            })\n                .type(type, Metrics.Event.interaction)\n                .meta(this.getConfig())\n                .meta({ cid: clickId })\n                .meta({\n                    bf: resource.backfill ? 1 : 0,\n                    sf: resource.shortfill ? 1 : 0,\n                    spltfl_seg: resource.splitfill_segment || null\n                })\n                .event(e)\n                .element(e.currentTarget)\n                .viewport()\n                .widget(this.element);\n\n            // Pull the proper params out of the resource depending on it's type\n            let trackParam = 'url_track_param';\n            let urlParam = 'url';\n\n            if (type === Metrics.Object.product) {\n                trackParam = 'buy_url_track_param';\n                urlParam = 'buy_url';\n            }\n\n            // Attach the campaign tracking identifier\n            const additionalParams = {\n                ok_cid: clickId\n            };\n            if (resource[trackParam]) additionalParams[resource[trackParam]] = clickId;\n\n            // Update the link with the event data\n            event.data({ ea: Metrics.Action.click });\n            e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n            // Cache this on the product\n            resource._clickId = clickId;\n            resource._event = event;\n            resource._additionalParams = additionalParams;\n        }\n\n        /**\n         * Gets the template to use, accounting for configured preference if available\n         * @param contentType\n         * @param defaultName\n         * @return {string}\n         * @private\n         */\n        _getTemplate(contentType, defaultName) {\n            let templateName = this.config.template_name;\n            if (!templateName ||\n                !okanjo.ui.engine.isTemplateRegistered(`${contentType}.${templateName}`)) {\n                templateName = defaultName;\n            }\n            return `${contentType}.${templateName}`;\n        }\n\n        /**\n         * Enforces size/layout/cta restrictions\n         * @private\n         */\n        _enforceLayoutOptions() {\n            // Enforce format restrictions\n            if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n                this.config.template_cta_style = \"link\";\n            } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            }\n        }\n\n        /**\n         * Enforces\n         * @private\n         */\n        _enforceSlabLayoutOptions() {\n            if (this.config.size === \"medium_rectangle\" || this.config.size === \"billboard\") {\n                // no list view\n                this.config.template_layout = \"grid\";\n\n                // no buttons\n                if (this.config.template_cta_style === \"button\") {\n                    this.config.template_cta_style = \"link\";\n                }\n            } else if (this.config.size === \"half_page\") {\n                this.config.template_layout = \"grid\";\n            } else if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n\n                // no button\n                if (this.config.template_cta_style === \"button\") {\n                    this.config.template_cta_style = \"link\";\n                }\n            } else if (this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            } else if (this.config.size === \"responsive\") {\n                // no button in responsive mode\n                if (this.config.template_cta_style === \"button\") {\n                    this.config.template_cta_style = \"link\";\n                }\n            }\n        }\n\n        /**\n         * Register a custom\n         * @private\n         */\n        _registerCustomBranding(/*prefix, buttonClass*/) {\n            const brandColor = this.config.template_cta_color;\n            if (brandColor) {\n                let brandCSS,\n                    brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                brandCSS = `\n                    .okanjo-block2.${brandCSSId} .okanjo-resource-cta-button, .okanjo-block2.${brandCSSId} .okanjo-resource-buy-button { color: ${brandColor} !important; } \n                    .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-cta-button, .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-buy-button { border-color: ${brandColor} !important; } \n                    .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-cta-button:hover, .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-buy-button:hover { background: ${brandColor} !important; color: #fff !important; } \n                `;\n\n                okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                okanjo.ui.engine.ensureCss(brandCSSId);\n            }\n        }\n\n        /**\n         * When element is in view per viewability constants (50% for 1s) trigger handler once\n         * @param element\n         * @param handler\n         * @private\n         */\n        _addOnceViewedHandler(element, handler) {\n            let controller = {\n                element,\n                successfulCount: 0,\n                handler\n            };\n\n            // Add our element to the watch list and turn on the watcher if not already on\n            this._viewedWatchers.push(controller);\n            this._toggleViewWatcher(true);\n        }\n\n        /**\n         * Interval function to check viewability of registered elements\n         * @private\n         */\n        _checkViewWatchers() {\n\n            // Check each registered watcher\n            for (let i = 0, controller; i < this._viewedWatchers.length; i++) {\n                controller = this._viewedWatchers[i];\n\n                // Check if watcher is complete, then remove it from the list\n                /* istanbul ignore next: jsdom won't trigger this */\n                if (okanjo.ui.isElementVisible(controller.element) &&\n                    okanjo.ui.getPercentageInViewport(controller.element) >= MINIMUM_VIEW_PX) {\n                    controller.successfulCount++;\n                }\n\n                // While this could more optimally be contained within the former condition, unit-testing blocks on this\n                if (controller.successfulCount >= MINIMUM_VIEW_FREQ) {\n                    controller.handler();\n                    this._viewedWatchers.splice(i, 1);\n                    i--;\n                }\n            }\n\n            // Turn off if nobody is watching\n            if (this._viewedWatchers.length === 0) {\n                this._toggleViewWatcher(false);\n            }\n        }\n\n        /**\n         * Turns the viewability watcher on and off\n         * @param enabled\n         * @private\n         */\n        _toggleViewWatcher(enabled) {\n            if (enabled) {\n                if (this._viewWatcherIv === null) {\n                    this._viewWatcherIv = setInterval(this._checkViewWatchers.bind(this), MINIMUM_VIEW_TIME / MINIMUM_VIEW_FREQ);\n                }\n            } else {\n                clearInterval(this._viewWatcherIv);\n                this._viewWatcherIv = null;\n            }\n        }\n\n        //endregion\n\n        //region Product Handling\n\n        /**\n         * Renders a product response\n         * @private\n         */\n        _showProducts() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n            // - render\n\n            // Format products\n            data.results.forEach((offer, index) => {\n                // Disable inline buy if configured to do so\n                if (this.config.disable_inline_buy) offer.inline_buy_url = null;\n                if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                // Set primary image\n                offer._image_url = offer.image_urls ? offer.image_urls[0] : '' ;\n\n                // Escape buy url (fixme: does not include proxy_url!)\n                offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                // Make price tag pretty\n                offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                offer._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break it */\n                if (id && index >= 0) {\n                    const product = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break it */\n                    if (product) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.product, product));\n                        a.addEventListener('click', this._handleProductClick.bind(this, product));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: product.id })\n                            .type(Metrics.Object.product, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({\n                                bf: product.backfill ? 1 : 0,\n                                sf: product.shortfill ? 1 : 0,\n                                spltfl_seg: product.splitfill_segment || null\n                            })\n                            .element(a)\n                            .viewport()\n                            .widget(this.element)\n                            .send();\n\n                        // Start watching for a viewable impression\n                        this._addOnceViewedHandler(a, () => {\n                            okanjo.metrics.create(this._metricBase, { id: product.id })\n                                .type(Metrics.Object.product, Metrics.Event.view)\n                                .meta(this.getConfig())\n                                .meta({\n                                    bf: product.backfill ? 1 : 0,\n                                    sf: product.shortfill ? 1 : 0,\n                                    spltfl_seg: product.splitfill_segment || null\n                                })\n                                .element(a)\n                                .viewport()\n                                .widget(this.element)\n                                .send();\n                        });\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Fit images\n            okanjo.ui.fitImages(this.element);\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the product click process\n         * @param product\n         * @param e\n         * @private\n         */\n        _handleProductClick(product, e) {\n\n            // Update the event\n            if (!product._event || !product._additionalParams || !product._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.product, product, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = product;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Determine what we're doing - native ux or redirect\n            const showNativeBuyUx = !!product.inline_buy_url,\n                showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile()\n            ;\n\n            // Show the inline buy experience or redirect\n            if (showPopupNativeBuyUx) {\n                // Mobile native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                //\n                // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                //\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ popup: 'true' });\n\n                // Get the frame url\n                let url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Open the window or redirect if that failed\n                this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                if (!this._popupFrame) {\n                    // Fallback to just replacing the window with the target, since popups don't work :(\n                    okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                    window.location.href = url;\n                }\n\n            } else if (showNativeBuyUx) {\n                // Regular native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-inline-buy-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto'\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Check whether we're allowed to expand past the bounds of the placement\n                additionalParams.expandable = this.config.expandable ? 1: 0;\n                if (!this.config.expandable) {\n                    const parent = this.element.querySelector('.okanjo-expansion-root');\n                    /* istanbul ignore else: custom templates could break this */\n                    if (parent) {\n                        frame.className += ' okanjo-ad-in-unit';\n                        frame.setAttribute('height', \"100%\");\n                        frame.setAttribute('width', \"100%\");\n\n                        parent.appendChild(frame);\n\n                        const size = okanjo.ui.getElementSize(parent);\n                        additionalParams.frame_height = size.height;\n                        additionalParams.frame_width = size.width;\n                        /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                        if (this.config.size) additionalParams.ad_size = this.config.size;\n                    }\n                }\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                // Set the frame url\n                frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Show the modal if it was not internally expanded\n                if (!frame.parentNode) {\n                    okanjo.ui.modal.show(frame);\n                }\n\n            } else {\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n            }\n        }\n\n        //endregion\n\n        //region Article Handling\n\n        /**\n         * Renders an article response\n         * @private\n         */\n        _showArticles() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n            // - render\n\n            // Format articles\n            data.results.forEach((article, index) => {\n                // Escape url (fixme: does not include proxy_url!)\n                article._escaped_url = encodeURIComponent(article.url);\n                article._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break this */\n                if (id && index >= 0) {\n                    const article = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break this */\n                    if (article) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.article, article));\n                        a.addEventListener('click', this._handleArticleClick.bind(this, article));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: article.id })\n                            .type(Metrics.Object.article, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({\n                                bf: article.backfill ? 1 : 0,\n                                sf: article.shortfill ? 1 : 0,\n                                spltfl_seg: article.splitfill_segment || null\n                            })\n                            .element(a)\n                            .viewport()\n                            .widget(this.element)\n                            .send();\n\n                        // Start watching for a viewable impression\n                        this._addOnceViewedHandler(a, () => {\n                            okanjo.metrics.create(this._metricBase, { id: article.id })\n                                .type(Metrics.Object.article, Metrics.Event.view)\n                                .meta(this.getConfig())\n                                .meta({\n                                    bf: article.backfill ? 1 : 0,\n                                    sf: article.shortfill ? 1 : 0,\n                                    spltfl_seg: article.splitfill_segment || null\n                                })\n                                .element(a)\n                                .viewport()\n                                .widget(this.element)\n                                .send();\n                        });\n\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Fit images\n            okanjo.ui.fitImages(this.element);\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the article click process\n         * @param article\n         * @param e\n         * @private\n         */\n        _handleArticleClick(article, e) {\n            // Update the event\n            if (!article._event || !article._additionalParams || !article._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.article, article, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = article;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Update the link a second time, just in case the data changed\n            e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n        }\n\n        //endregion\n\n        //region ADX Handling\n\n        /**\n         * Renders a Google DFP/ADX response\n         * @private\n         */\n        _showADX() {\n            const data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n            // Get the template we should use to render the google ad\n            const templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n            // Determine what size ad we can place here\n            let size = null;\n            if (this.config.size) {\n                if (Placement.Sizes[this.config.size]) {\n                    // Defined size, use these known dimensions\n                    size = Placement.Sizes[this.config.size];\n                } else {\n                    let match = (/^([0-9]+)x([0-9]+)$/i).exec(this.config.size);\n                    if (match) {\n                        size = { width: match[1], height: match[2] }\n                    }\n                }\n            }\n\n            // No given size, we need to guess\n            if (!size) size = Placement.Sizes.default;\n\n            // If we're using okanjo's ad slot, then track the impression\n            // otherwise decline it because we're just passing through to the publishers account\n            let adUnitPath = '/90447967/okanjo:<publisher>';\n            let declineReason;\n            if (data.settings.display && data.settings.display.adx_unit_path) {\n                adUnitPath = data.settings.display.adx_unit_path;\n                declineReason = 'custom_ad_unit';\n            }\n\n            // Pass along what the template needs to know to display the ad\n            const renderContext = {\n                size,\n                adUnitPath\n            };\n\n            // Render the container\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n            // Report the impression\n            this._reportWidgetLoad(declineReason);\n\n            // Insert the actual ad into the container\n            const container = this.element.querySelector('.okanjo-adx-container');\n            /* istanbul ignore else: custom templates could break this */\n            if (container) {\n\n                // Make the frame element\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-adx-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto',\n                    width: size.width,\n                    height: size.height\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Attach to dOM\n                container.appendChild(frame);\n\n                // Build a click-through tracking url so we know when an ad is clicked too\n                let clickUrl = okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction)\n                    .meta(this.getConfig())\n                    .meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    })\n                    .element(frame)\n                    .viewport()\n                    .widget(this.element)\n                    .toUrl();\n\n                // Transfer references to the frame window\n                // frame.contentWindow.okanjo = okanjo;\n                // frame.contentWindow.placement = this;\n                frame.contentWindow.trackImpression = () => {\n                    okanjo.metrics.create(this._metricBase)\n                        .type(Metrics.Object.thirdparty_ad, Metrics.Event.impression)\n                        .meta(this.getConfig())\n                        .meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        })\n                        .element(frame)\n                        .viewport()\n                        .widget(this.element)\n                        .send()\n                    ;\n\n                    // Start watching for a viewable impression\n                    this._addOnceViewedHandler(frame, () => {\n                        okanjo.metrics.create(this._metricBase)\n                            .type(Metrics.Object.thirdparty_ad, Metrics.Event.view)\n                            .meta(this.getConfig())\n                            .meta({\n                                ta_s: adUnitPath,\n                                ta_w: size.width,\n                                ta_h: size.height\n                            })\n                            .element(frame)\n                            .viewport()\n                            .widget(this.element)\n                            .send()\n                        ;\n                    });\n                };\n\n                // Load Google ad!\n                frame.contentWindow.document.open();\n                frame.contentWindow.document.write(\n`<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body>\n<`+`script type=\"text/javascript\" src=\"https://www.googletagservices.com/tag/js/gpt.js\">\n    googletag.pubads().addEventListener('slotRenderEnded', function(e) { \n        trackImpression(e);\n    });\n    googletag.pubads()\n        .definePassback(\"${adUnitPath.replace(/\"/g, '\\\\\"')}\", [[${size.width}, ${size.height}]])\n        .setClickUrl(\"${clickUrl}&u=\")\n        .display();\n<`+`/script>\n</body></html>`);\n                frame.contentWindow.document.close();\n\n                // TODO future event hooks\n                // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                // Impression tracking is done from within the iframe. Crazy, right?\n            }\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        //endregion\n    }\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle:       { width: 300, height: 250 }, // aka: sidekick\n        leaderboard:            { width: 728, height:  90 },\n        large_mobile_banner:    { width: 320, height: 100 },\n        half_page:              { width: 300, height: 600 }, // aka: filmstrip, sidekick\n        billboard:              { width: 970, height: 250 }, // aka: sidekick\n\n        // IAB / Others\n        button_2:               { width: 120, height:  60 },\n        micro_bar:              { width:  88, height:  31 },\n        portrait:               { width: 300, height:1050 },\n        rectangle:              { width: 180, height: 150 },\n        super_leaderboard:      { width: 970, height:  90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper:        { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard:     { width: 320, height:  50 },\n        small_square:           { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1:               { width: 120, height:  90 },\n        full_banner:            { width: 468, height:  60 },\n        half_banner:            { width: 234, height:  60 },\n        large_rectangle:        { width: 336, height: 280 },\n        pop_under:              { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper:             { width: 120, height: 600 },\n        square:                 { width: 250, height: 250 },\n        square_button:          { width: 125, height: 125 },\n        vertical_banner:        { width: 120, height: 240 },\n        vertical_rectangle:     { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n    class Product extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Product';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Set filters based on old \"mode\"\n            if (this.config.mode === 'sense') {\n                // sense\n                this.config.url = this.config.url || 'referrer';\n                this.config.take = this.config.take || 5;\n            } else if (this.config.mode === 'single') {\n                // single\n                this.config.url = null;\n                if (this.config.id) this.config.ids = [this.config.id];\n                this.config.take = 1;\n                delete this.config.id;\n            } else {\n                // browse\n                this.config.url = null;\n                this.config.take = this.config.take || 25;\n            }\n            delete this.config.mode;\n\n            // Sold by changed to store name\n            if (this.config.sold_by) {\n                this.config.store_name = this.config.sold_by;\n                delete this.config.sold_by;\n            }\n\n            // Selectors is now url_selectors\n            if (this.config.selectors) {\n                this.config.url_selectors = this.config.selectors;\n                delete this.config.selectors;\n            }\n\n            // Marketplace_id is no longer a thing, closest analog are properties.\n            if (this.config.marketplace_id) {\n                this.config.property_id = this.config.marketplace_id;\n                delete this.config.marketplace_id\n            }\n\n            // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n            if (this.config.marketplace_status === 'testing') {\n                this.config.sandbox = true;\n            }\n            delete this.config.marketplace_status;\n\n            // Deprecated\n            delete this.config.suboptimal;\n            delete this.config.text;\n        }\n\n    }\n\n    return okanjo.Product = Product;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n    class Ad extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Ad';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Id / single mode is now ids\n            this.config.url = null;\n            if (this.config.id) {\n                this.config.ids = [this.config.id];\n            } else {\n                okanjo.warn('Ad widget should have parameter `id` set.');\n            }\n            this.config.take = 1;\n            delete this.config.id;\n\n            // Content is automatically determined whether the placement element contains children\n            delete this.config.content;\n        }\n\n    }\n\n    return okanjo.Ad = Ad;\n\n})(window);","/* jshint ignore:start */\n\n(function() {\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.2';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n\n\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */"],"sourceRoot":"./"}