{"version":3,"sources":["okanjo.js","Okanjo.js","Request.js","Cookie.js","TemplateEngine.js","Modal.js","Metrics.js","EventEmitter.js","Widget.js","Placement.js","Product.js","Ad.js","vendor.js"],"names":["root","factory","define","amd","exports","module","okanjo","this","_possibleConstructorReturn","self","call","ReferenceError","CSS1_COMPATIBLE","document","compatMode","superClass","TypeError","subClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","ELLIPSIFY_PATTERN","Constructor","instance","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_typeof","Symbol","iterator","obj","NOOP","window","SUPPORTS_PAGE_OFFSET","undefined","pageXOffset","AGENT","navigator","userAgent","MOBILE_PATTERN","Console","console","settings","metrics","report","_len","arguments","args","Array","_key","err","Error","messageIndex","find","arg","stack","split","shift","push","reportStack","join","filter","a","splice","error","version","warn","apply","concat","message","_len2","_key2","selector","parent","qwery","querySelector","querySelectorAll","net","endpoint","sandboxEndpoint","routes","ads","getRoute","route","params","env","request","keys","forEach","replace","util","isEmpty","test","val","trim","getPageArguments","query","eqIndex","includeHashArguments","decodeURIComponent","parts","part","indexOf","queryArgs","hashArgs","substring","location","search","hash","Math","max","mixed","out","map","deepClone","options","output","input","isArray","Date","dateToIso","childObject","ignoreArrays","flatten","childKey","shortid","clusterWorkerId","shuffled","crypto","msCrypto","require","getRandomValues","randomBytes","encode","number","loopCounter","random","dest","Uint8Array","str","done","randomByte","pow","REDUCE_TIME","seconds","counter","previousSeconds","floor","getTime","ui","getScrollPosition","x","documentElement","scrollLeft","body","getElementSize","element","scrollTop","includeMargin","size","height","offsetHeight","width","offsetWidth","style","currentStyle","getComputedStyle","parseInt","marginTop","marginBottom","getPageSize","marginLeft","marginRight","html","getViewportSize","scrollWidth","clientWidth","clientHeight","scrollHeight","vh","isMobileZoom","inWidth","innerWidth","inHeight","innerHeight","getEventPosition","ex","et","event","ey","el","type","name","getElementPosition","clientX","clientY","x1","y1","x2","rect","getBoundingClientRect","y2","bottom","contains","exception","left","pos","top","y","right","e","replacedText","container","substr","parentNode","targetHeight","useTextContent","textContent","text","innerText","safety","replacer","match","span","createElement","content","setAttribute","innerHTML","appendChild","method","url","payload","callback","res","ActiveXObject","calledBack","req","timeout","ontimeout","attributes","statusCode","onreadystatechange","status","data","JSON_TEST","getResponseHeader","parse","responseText","xhr","toUpperCase","open","withCredentials","includes","setRequestHeader","post","send","get","bind","encodeURIComponent","getKey","keyPrefix","stringify","pairs","v","expireDate","setDate","set","cookieName","expireDays","getDate","expires","toUTCString","path","encodeURI","cookie","cookieValue","nameTest","decodeURI","TemplateEngine","_classCallCheck","_templates","_css","classDetects","template","beforeRender","nodeType","lib","Mustache","markup","css","head","id","styleSheet","cssText","hasOwnProperty","templateName","context","model","_this","okanjoMetricUrl","now","blockClasses","ensureCss","render","formatCurrency","decimals","decimalSeparator","s","abs","toFixed","j","thousandsSeparator","slice","engine","$modalContainer","$modalWindow","isMobile","$modalOuter","$html","$body","$modalSkin","$modalInner","$modalClose","$modalFrame","addListener","addEventListener","attachEvent","getWindowHeight","handler","setTimeout","handleReposition","t","closeModal","stopPropagation","preventDefault","removeClass","addClass","className","RegExp","openModal","IS_MOBILE","setContent","initialized","show","createElements","bindEvents","modal","hide","Metrics","sourceCh","_getStoredQueue","sourceCx","pageId","defaultChannel","Channel","external","sid","_checkUrlForReferral","queue","_createClass","Params","JSON","localStorage","delay","_this2","_saveQueueTimeout","clearTimeout","_saveQueue","_queue","object_type","metric_session","event_type","Event","correlation","urlSid","_noProcess","sourceChannel","pageArgs","channel","localSid","trackEvent","sourceContext","ch","_push","page","view","href","_processQueue","_this3","_processTimeout","items","_batchSend","_updateSid","item","events","_this4","_normalizeEvent","metrics_batch","m","exclude","assign","Meta","ok_ver","referrer","ref","ttl","_len3","_key3","pw","w","ph","h","vp","vx1","vy1","vx2","vw","vy2","jsEvent","_len4","_key4","_len5","_key5","MetricEvent","impression","interaction","Action","click","inline_click","article","thirdparty_ad","cart","order","order_item","user","widget","product","store","cause","marketplace","placement","live","testing","store_widget","Environment","others","_data","addEventInfo","addViewportInfo","_element","addElementInfo","_len6","_key6","addEventMeta","EventEmitter","_events","listener","idx","listeners","_arguments","_this5","removeListener","_EventEmitter","on","DATA_REPLACE_PATTERN","Widget","DATA_ATTRIBUTE_PATTERN","getPrototypeOf","_this6","instanceId","config","_inherits","_applyConfiguration","_setCompatibilityOptions","_ensurePlacementKey","load","_this7","normalizedKey","_default","_this8","group","origKey","getGroup","showError","setMarkup","from","attr","exec","Field","_convert","_strip","_group","converter","toLowerCase","parseFloat","strip","bool","int","float","FILTERS","_Widget","DISPLAY","string","ARTICLE_META","array","_okanjo$_Widget$Field","Placement","_metricBase","_this9","_response","no_init","init","_okanjo$_Widget","q","url_referrer","ids","store_id","organization_name","property_name","store_name","external_id","sku","external_store_id","condition","manufacturer","upc","tags","category","min_price","max_price","isbn","max_donation_percent","pools","sort_by","min_donation_percent","skip","donation_to","template_theme","template_cta_style","adx_unit_path","url_category","url_keywords","template_layout","proxy_url","expandable","default","disable_inline_buy","disable_popup","backwards","_this10","getSettings","matches","backfillPattern","backfill","article_meta","isBackfill","_this11","_setMetricBase","_fetchContent","_reportWidgetLoad","_mergeResponseSettings","_updateBaseMetaFromResponse","_showContent","base","cx","wgid","declined","decl","meta","getConfig","viewport","emit","msid","pgid","sandbox","_this12","_this13","display","filters","ptseed","pten","aid","ptid","seed","msg","ContentTypes","products","articles","adx","_showADX","additionalUrlParams","ok_ch","ok_cx","u","toUrl","resource","clickId","urlParam","cid","currentTarget","ok_cid","trackParam","ea","_event","additionalParams","_getClickThroughURL","_clickId","_additionalParams","contentType","defaultName","template_name","isTemplateRegistered","prefix","buttonClass","brandColor","template_cta_color","brandCSS","brandCSSId","registerCss","_this14","results","_getTemplate","DefaultTemplates","offer","index","_price_formatted","price","_index","_escaped_inline_buy_url","inline_buy_url","_image_url","image_urls","_escaped_buy_url","buy_url","getAttribute","_handleResourceMouseDown","ellipsify","_handleProductClick","bf","showNativeBuyUx","showPopupNativeBuyUx","popup","_popupFrame","vspace","allowfullscreen","frame","class","hspace","webkitallowfullscreen","mozallowfullscreen","scrolling","frame_height","src","ad_size","_this15","_handleArticleClick","_this16","Sizes","adUnitPath","renderContext","frameborder","ta_w","ta_h","ta_s","contentWindow","write","clickUrl","close","button_2","rectangle","super_leaderboard","wide_skyscraper","half_page","small_square","micro_bar","button_1","full_banner","half_banner","large_rectangle","skyscraper","square","vertical_rectangle","three_to_one_rectangle","square_button","vertical_banner","medium_rectangle","Product","_okanjo$Placement","_this17","mode","take","sold_by","url_selectors","marketplace_id","selectors","marketplace_status","property_id","suboptimal","Ad","_okanjo$Placement2","_this18","global","objectToString","toString","nodeName","isFunction","object","mustache","typeStr","escapeRegExp","hasProperty","propName","nonSpaceRe","testRegExp","re","regExpTest","isWhitespace","tagRe","String","entityMap","parseTemplate","nonSpace","hasTag","spaces","closingTagRe","closingCurlyRe","openingTagRe","compileTags","tagsToCompile","spaceRe","start","scanner","stripSpace","sections","tokens","chr","token","openSection","valueLength","scanUntil","charAt","equalsRe","scan","curlyRe","pop","squashedTokens","lastToken","numTokens","nestedTokens","nestTokens","section","collector","Scanner","tail","Context","parentContext","cache",".","Writer","&","escapeHtml","<",">","\"","'","/","whiteRe","eos","lookupHit","names","partials","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","lookup","escape","clearCache","defaultWriter","to_html","result"],"mappings":"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","file":"okanjo.min.js","sourcesContent":["/*! okanjo-js v1.0.0 | (c) 2013 Okanjo Partners Inc | https://okanjo.com/ */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.okanjo = factory();\n  }\n}(this, function() {\n\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar okanjo = function (window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    var SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    var CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    var AGENT = window.navigator.userAgent;\n    var ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    var MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    var NOOP = function NOOP() {};\n    var Console = window.console;\n\n    // Place to pull defaults, if already set\n    var settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    var okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"1.0.0\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: function report() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var err = args.find(function (arg) {\n                return arg instanceof Error;\n            });\n            if (!err) {\n                var messageIndex = args.findIndex(function (arg) {\n                    return typeof arg === \"string\";\n                });\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                var stack = new Error().stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter(function (a) {\n                    return a !== err;\n                });\n            }\n\n            Console.error(\"[Okanjo v\" + okanjo.version + \"]: \" + err.stack);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: function warn(message) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            var err = new Error(message);\n\n            Console.warn(\"[Okanjo v\" + okanjo.version + \"]: \" + err.stack);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: function qwery(selector, parent) {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/ads',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: function getRoute(route, params, env) {\n            if (params) {\n                Object.keys(params).forEach(function (key) {\n                    route = route.replace(\":\" + key, params[key] + \"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: function isEmpty(val) {\n            return val === null || val === undefined || typeof val === \"string\" && val.trim().length === 0;\n        },\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: function isMobile() {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: function getPageArguments(includeHashArguments) {\n\n            var split = function split(query) {\n                query = query || \"\";\n                var params = {};\n                var parts = query.split('&');\n                parts.forEach(function (part) {\n                    var eqIndex = part.indexOf('=');\n                    var key = void 0,\n                        value = void 0;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            var queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            var hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach(function (key) {\n                return queryArgs[key] = hashArgs[key];\n            });\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = function (mixed, out) {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map(function (val) {\n                return okanjo.util.deepClone(val);\n            }));\n        } else if ((typeof mixed === \"undefined\" ? \"undefined\" : _typeof(mixed)) === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach(function (key) {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = function (input) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var output = {};\n\n        if (input !== undefined && input !== null) {\n            Object.keys(input).forEach(function (key) {\n                // Convert object ids to hex strings\n                if (input[key] instanceof Date) {\n                    if (options.dateToIso) {\n                        output[key] = input[key].toISOString(); // convert to iso\n                    } else {\n                        output[key] = input[key]; // as-is\n                    }\n                } else if (_typeof(input[key]) === 'object' && input[key] !== null) {\n                    // Allow ignoring arrays if desired\n                    if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                        output[key] = input[key];\n                    } else {\n                        // Make child objects flat too (always returns object so Object.keys is safe)\n                        var childObject = okanjo.util.flatten(input[key], options);\n                        Object.keys(childObject).forEach(function (childKey) {\n                            output[key + '_' + childKey] = childObject[childKey];\n                        });\n                    }\n                } else {\n                    // Copy value references\n                    output[key] = input[key];\n                }\n            });\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = function (clusterWorkerId) {\n\n        var shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n            crypto = window.crypto || window.msCrypto || typeof require === \"function\" && require('crypto'),\n            randomByte = function randomByte() {\n            /* istanbul ignore next: platform diffs out of scope */\n            if (crypto && crypto.randomBytes) {\n                return crypto.randomBytes(1)[0] & 0x30;\n            } else if (!crypto || !crypto.getRandomValues) {\n                return Math.floor(Math.random() * 256) & 0x30;\n            }\n            /* istanbul ignore next: platform diffs out of scope */\n            var dest = new Uint8Array(1);\n            /* istanbul ignore next: platform diffs out of scope */\n            crypto.getRandomValues(dest);\n            /* istanbul ignore next: platform diffs out of scope */\n            return dest[0] & 0x30;\n        },\n            encode = function encode(number) {\n            var loopCounter = 0,\n                done = void 0,\n                str = '';\n\n            while (!done) {\n                str = str + shuffled[number >> 4 * loopCounter & 0x0f | randomByte()];\n                done = number < Math.pow(16, loopCounter + 1);\n                loopCounter++;\n            }\n            return str;\n        },\n\n\n        // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n        // This number should be updated every year or so to keep the generated id short.\n        // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n        REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        var counter = void 0,\n            previousSeconds = void 0;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function () {\n            var str = '',\n                seconds = Math.floor((new Date().getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    }();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: function getScrollPosition() {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: function getElementSize(element, includeMargin) {\n            var size = {\n                height: element.offsetHeight,\n                width: element.offsetWidth\n            };\n            var style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: function getPageSize() {\n            var body = document.querySelector('body');\n            var html = document.documentElement;\n\n            return {\n                w: Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth),\n\n                h: Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight)\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: function getViewportSize() {\n            var element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */ : document.body;\n            var width = element.clientWidth;\n            var height = element.clientHeight;\n            var inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            var inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            var isMobileZoom = inWidth && width > inWidth || inHeight && height > inHeight;\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: function getEventPosition(event) {\n            var ex = event.pageX;\n            var ey = event.pageY;\n            var body = document.body;\n            var el = document.documentElement;\n            var scrollLeft = 'scrollLeft';\n            var scrollTop = 'scrollTop';\n            var type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: function getElementPosition(element) {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            var err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                var rect = element.getBoundingClientRect();\n                var pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    x1: rect.left + pos.x,\n                    y1: rect.top + pos.y,\n                    x2: rect.right + pos.x,\n                    y2: rect.bottom + pos.y\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element: element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0\n                };\n            }\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function (element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        var parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        var text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000,\n            // Safety switch to bust out of the loop in the event something goes terribly wrong\n        replacer = function replacer(match) {\n            /* istanbul ignore next: n/a to jsdom */\n            replacedText = match.substr(0, match.length - 3) + replacedText;\n            /* istanbul ignore next: n/a to jsdom */\n            return '...';\n        };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && safety-- > 0) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            var content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class', 'okanjo-ellipses');\n            span.setAttribute('class', 'okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length - 3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length - 3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n}(window, document);\n\"use strict\";\n\n(function (window) {\n\n    var JSON_TEST = /^application\\/json/;\n    var okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        var req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        var calledBack = false;\n\n        // Normalized done handler\n        var done = function done(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function (e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function (e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    var res = void 0;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    var encode = function encode(val) {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent('' + val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    var getKey = function getKey(key, keyPrefix) {\n        if (keyPrefix) {\n            return keyPrefix + \"[\" + encode(key) + \"]\";\n        } else {\n            return encode(key);\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = function (obj, keyPrefix) {\n        var pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (v) {\n                    return pairs.push(getKey(key, keyPrefix) + '=' + encode(v));\n                }); // Does not do that PHP garbage with key[]=val\n            } else if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\" && value !== null) {\n                // Recurse\n                var res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: function set(cookieName, value, expireDays) {\n            var expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            var expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            var path = \" Path=/\";\n            var cookieValue = encodeURI(value) + \";\" + expires + path;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: function get(cookieName) {\n            var output = null;\n            document.cookie.split(\";\").find(function (cookie) {\n                var nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                var value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                if (nameTest === cookieName) {\n                    output = decodeURI(value);\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            return output;\n        }\n    };\n})(window, document);\n\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n\n    var TemplateEngine = function () {\n        function TemplateEngine() {\n            _classCallCheck(this, TemplateEngine);\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n\n\n        _createClass(TemplateEngine, [{\n            key: \"registerTemplate\",\n            value: function registerTemplate(name, template, beforeRender, options) {\n\n                if ((typeof template === \"undefined\" ? \"undefined\" : _typeof(template)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (template.nodeType === undefined) {\n                        throw new Error('Parameter template must be a string or a DOM element');\n                    } else {\n                        template = template.innerHTML;\n                        okanjo.lib.Mustache.parse(template);\n                    }\n                } else if (typeof template !== \"string\") {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                }\n\n                // Shift options if only have 3 params\n                if (arguments.length === 3 && (typeof beforeRender === \"undefined\" ? \"undefined\" : _typeof(beforeRender)) === \"object\") {\n                    options = beforeRender;\n                    beforeRender = null;\n                } else {\n                    options = options || {};\n                }\n\n                if (beforeRender && typeof beforeRender !== \"function\") {\n                    throw new Error('Parameter beforeRender must be a function');\n                }\n\n                // Assign the template\n                this._templates[name] = {\n                    markup: template,\n                    options: options,\n                    beforeRender: beforeRender\n                };\n            }\n\n            /**\n             * Registers a CSS payload for use\n             * @param name\n             * @param css\n             * @param options\n             */\n\n        }, {\n            key: \"registerCss\",\n            value: function registerCss(name, css, options) {\n                options = options || {};\n\n                if ((typeof css === \"undefined\" ? \"undefined\" : _typeof(css)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (css.nodeType === undefined) {\n                        throw new Error('Parameter css must be a string or a DOM element');\n                    }\n                } else if (typeof css !== \"string\") {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n\n                this._css[name] = {\n                    markup: css,\n                    options: options\n                };\n            }\n\n            /**\n             * Checks whether a template is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: \"isTemplateRegistered\",\n            value: function isTemplateRegistered(name) {\n                return !!this._templates[name];\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Checks whether a CSS payload is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: \"isCssRegistered\",\n            value: function isCssRegistered(name) {\n                return !!this._css[name];\n            }\n\n            /**\n             * Ensures that a CSS payload has been added to the DOM\n             * @param name\n             */\n\n        }, {\n            key: \"ensureCss\",\n            value: function ensureCss(name) {\n                if (this._css[name]) {\n                    //noinspection JSValidateTypes\n                    var css = this._css[name],\n                        id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                    // Check for css element on page, if we have an ID to look for\n                    if (id) {\n                        var element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                        if (!element) {\n                            var head = document.head,\n                                style = document.createElement('style');\n\n                            style.id = id;\n                            style.setAttribute('type', 'text/css');\n\n                            /* istanbul ignore else: old ie */\n                            if (style.hasOwnProperty) {\n                                // old ie\n                                style.innerHTML = css.markup;\n                            } else {\n                                style.styleSheet.cssText = css.markup;\n                            }\n\n                            if (head) {\n                                head.appendChild(style);\n                            } else {\n                                // NO HEAD, just prepend to body then\n                                var body = document.body;\n                                if (body) {\n                                    body.appendChild(style);\n                                } else {\n                                    // And if this doesn't work, just give up\n                                    okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    okanjo.report('Attempted to add CSS template \"' + name + '\" to the DOM, however it does not appear to be registered?');\n                }\n            }\n\n            /**\n             * Renders a template and returns the markup\n             * @param templateName\n             * @param context\n             * @param model\n             * @return {string}\n             */\n\n        }, {\n            key: \"render\",\n            value: function render(templateName, context, model) {\n                var _this = this;\n\n                model = model || {};\n                var template = this._templates[templateName];\n\n                // If there's a data controller closure set, and if so, run the data through there\n                if (template.beforeRender) {\n                    model = template.beforeRender.call(context, model);\n                }\n\n                // Attach globals\n                model.okanjo = okanjo;\n                model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//, ''); // Url w/o scheme to prevent mixed-content warnings\n                model.now = function () {\n                    return new Date().getTime();\n                };\n                model.classDetects = this.classDetects;\n\n                //noinspection JSUnresolvedVariable\n                if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                    model.classDetects += \" \" + model.blockClasses.join(' ');\n                    delete model.blockClasses;\n                }\n\n                // Add CSS unless we are told not to\n                if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                    template.options.css.forEach(function (css) {\n                        return _this.ensureCss(css);\n                    });\n                    delete model.css;\n                }\n\n                // Render the template and return the result\n                return okanjo.lib.Mustache.render(template.markup, model);\n            }\n        }]);\n\n        return TemplateEngine;\n    }();\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n\n\n    TemplateEngine.formatCurrency = function (value) {\n        var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n        var decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n        var thousandsSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ',';\n\n        var s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        var j = i.length;\n        j = j > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    /*\n      div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n      */\n\n    var okanjo = window.okanjo;\n    var IS_MOBILE = okanjo.util.isMobile();\n\n    var initialized = false,\n\n    // scrollY = null,\n\n    // Selectors\n    $html = void 0,\n        $body = void 0,\n        $modalContainer = void 0,\n        $modalWindow = void 0,\n        $modalSkin = void 0,\n        $modalOuter = void 0,\n        $modalInner = void 0,\n        $modalClose = void 0,\n        $modalFrame = void 0,\n        createElements = function createElements() {\n\n        // Page elements\n        //noinspection JSUnresolvedFunction\n        $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n        //noinspection JSUnresolvedFunction\n        $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n        // Modal elements\n        $modalContainer = document.createElement('div');\n        $modalWindow = document.createElement('div');\n        $modalSkin = document.createElement('div');\n        $modalOuter = document.createElement('div');\n        $modalInner = document.createElement('div');\n        $modalClose = document.createElement('div');\n        $modalFrame = document.createElement('iframe');\n\n        $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n        $modalWindow.setAttribute('class', 'okanjo-modal-window');\n        $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n        $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n        $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n        $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n        $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n        $modalFrame.setAttribute('frameborder', '0');\n        $modalFrame.setAttribute('vspace', '0');\n        $modalFrame.setAttribute('hspace', '0');\n        $modalFrame.setAttribute('webkitallowfullscreen', '');\n        $modalFrame.setAttribute('mozallowfullscreen', '');\n        $modalFrame.setAttribute('allowfullscreen', '');\n        $modalFrame.setAttribute('scrolling', 'auto');\n\n        $modalClose.innerHTML = '×';\n\n        // Create the modal element tree\n        $modalInner.appendChild($modalFrame);\n        $modalOuter.appendChild($modalInner);\n        $modalSkin.appendChild($modalOuter);\n        $modalWindow.appendChild($modalSkin);\n        $modalWindow.appendChild($modalClose);\n        $modalContainer.appendChild($modalWindow);\n\n        // Add the modal stuff to the body\n        $body.appendChild($modalContainer);\n    },\n        addListener = function addListener(el, event, handler) {\n        /* istanbul ignore else: old browsers */\n        if (el.addEventListener) {\n            el.addEventListener(event, handler, false);\n        } else {\n            el.attachEvent(\"on\" + event, handler);\n        }\n    },\n        getWindowHeight = function getWindowHeight() {\n        return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n    },\n        handleReposition = function handleReposition() {\n        // scrollY = okanjo.ui.getScrollPosition().y;\n        //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n        $modalWindow.style.height = getWindowHeight() - 80 + \"px\";\n    },\n        bindEvents = function bindEvents() {\n\n        // If the device orientation changes, adjust the modal view port\n        addListener(window, 'orientationchange', function () {\n            for (var t = 0; t < 2; t++) {\n                setTimeout(handleReposition, 1000 * t + 10);\n            }\n        });\n\n        // If the window changes size, also adjust the modal view port\n        addListener(window, 'resize', function () {\n            setTimeout(handleReposition, 100);\n        });\n\n        // Click the overlay to close the modal\n        addListener($modalContainer, 'click', closeModal);\n\n        // If you click in the modal, don't close it!\n        addListener($modalWindow, 'click', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        // Click the close button to close it\n        addListener($modalClose, 'click', function (e) {\n\n            // Don't close it twice\n            e.preventDefault();\n            e.stopPropagation();\n\n            closeModal();\n        });\n    },\n\n\n    //removeListener = function(el, event, handler) {\n    //    if (el.removeEventListener) {\n    //        el.removeEventListener(event, handler);\n    //    } else {\n    //        el.detachEvent(\"on\" + event, handler);\n    //    }\n    //},\n\n    addClass = function addClass(el, name) {\n        el.className += \" \" + name;\n    },\n        removeClass = function removeClass(el, name) {\n        el.className = el.className.replace(new RegExp(' *?' + name), '');\n    },\n        openModal = function openModal() {\n\n        // scrollY = document.body.scrollTop;\n\n        removeClass($modalContainer, 'okanjo-modal-hidden');\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        handleReposition();\n\n        addClass($html, \"okanjo-modal-active\");\n\n        if (!IS_MOBILE) {\n            addClass($html, \"okanjo-modal-margin-fix\");\n        }\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n        }, 10);\n\n        // Click the overlay to close the modal\n        //addListener($body, 'click', closeModal);\n    },\n        closeModal = function closeModal() {\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n            addClass($modalContainer, \"okanjo-modal-hidden\");\n\n            removeClass($html, \"okanjo-modal-active\");\n            if (!IS_MOBILE) {\n                removeClass($html, \"okanjo-modal-margin-fix\");\n            }\n        }, 210);\n\n        // Click the overlay to close the modal\n        //removeListener($body, 'click', closeModal);\n    },\n\n\n    /**\n     * Insert an element or markup into the modal\n     * @param content\n     */\n    setContent = function setContent(content) {\n\n        // Remove existing content\n        $modalInner.innerHTML = \"\";\n\n        // Insert new content\n        if (typeof content === \"string\") {\n            $modalInner.innerHTML = content;\n        } else {\n            $modalInner.appendChild(content);\n        }\n    };\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function show(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function hide() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n\n    var Metrics = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Metrics() {\n            _classCallCheck(this, Metrics);\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n\n\n        _createClass(Metrics, [{\n            key: \"_getStoredQueue\",\n            value: function _getStoredQueue() {\n                if (window.localStorage[Metrics.Params.queue]) {\n                    try {\n                        var queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                        if (Array.isArray(queue)) {\n                            return queue;\n                        } else {\n                            okanjo.report('Stored queue is not a queue', { queue: queue });\n                            return [];\n                        }\n                    } catch (e) {\n                        okanjo.report('Failed to load metric queue from storage', { err: e });\n                        return [];\n                    }\n                } else {\n                    // not stored\n                    return [];\n                }\n            }\n\n            /**\n             * Updates the queue stored in storage, in the event we can't complete our submissions\n             * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n             * @private\n             */\n\n        }, {\n            key: \"_saveQueue\",\n            value: function _saveQueue(delay) {\n                var _this2 = this;\n\n                if (delay) {\n                    if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                    this._saveQueueTimeout = setTimeout(function () {\n                        _this2._saveQueue(false);\n                        _this2._saveQueueTimeout = null;\n                    }, 100);\n                } else {\n                    window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n                }\n            }\n\n            /**\n             * Extract contextual pass-through data from the URL, if present\n             * @private\n             */\n\n        }, {\n            key: \"_checkUrlForReferral\",\n            value: function _checkUrlForReferral() {\n                var pageArgs = okanjo.util.getPageArguments(true),\n                    urlSid = pageArgs[Metrics.Params.name],\n                    localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name),\n                    // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                    sourceChannel = pageArgs[Metrics.Params.channel];\n\n                // If for some reason, both are set, record the incident as a possible correlation\n                if (urlSid && localSid && urlSid !== localSid) {\n                    this.trackEvent({\n                        object_type: Metrics.Object.metric_session,\n                        event_type: Metrics.Event.correlation,\n                        id: urlSid + \"_\" + localSid,\n                        ch: this.defaultChannel,\n                        _noProcess: true\n                    });\n                }\n\n                // Update local values\n                this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n                this.sourceCh = sourceChannel || null;\n                this.sourceCx = sourceContext || null;\n            }\n\n            /**\n             * Submits an individual event metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: \"trackEvent\",\n            value: function trackEvent(event, callback) {\n                // Ensure the event contains the required fields\n                if (!event.object_type || !event.event_type) {\n                    okanjo.report('Invalid metric to track (missing object_type or event_type)', { event: event });\n                    return;\n                }\n\n                // Queue the event for publishing\n                this._push(event, callback);\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Submits a page view metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: \"trackPageView\",\n            value: function trackPageView(event, callback) {\n                event = event || {};\n                event.object_type = Metrics.Object.page;\n                event.event_type = Metrics.Event.view;\n                event.id = event.id || window.location.href;\n                event.ch = event.ch || this.defaultChannel;\n\n                // Queue the event for publishing\n                this.trackEvent(event, callback);\n            }\n\n            /**\n             * Adds an event to the queue\n             * @param event\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_push\",\n            value: function _push(event, callback) {\n                this._queue.push({ event: event, callback: callback });\n\n                // Save the queue\n                this._saveQueue(true);\n\n                // Start burning down the queue, unless the event says not to\n                if (event._noProcess) {\n                    delete event._noProcess;\n                } else {\n                    this._processQueue();\n                }\n            }\n\n            /**\n             * Burn down the queue\n             * @private\n             */\n\n        }, {\n            key: \"_processQueue\",\n            value: function _processQueue() {\n                var _this3 = this;\n\n                // If the queue is not already being processed, and there's stuff to process, continue sending them\n                if (!this._processTimeout && this._queue.length > 0) {\n                    this._processTimeout = setTimeout(function () {\n\n                        // Pull the items we're going to batch out of the queue\n                        var items = _this3._queue.splice(0, 255);\n                        _this3._saveQueue(false);\n\n                        // Track the item\n                        _this3._batchSend(items, function (err, res) {\n                            // TODO: If there was an error, consider splicing the batch back into the queue\n\n                            // Update / Set the metric sid on the publisher\n                            /* istanbul ignore else: server barks */\n                            if (res && res.data && res.data.sid) _this3._updateSid(res.data.sid);\n\n                            // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                            _this3._processTimeout = null;\n                            _this3._processQueue();\n\n                            // Fire the event callbacks if there are any\n                            items.forEach(function (item) {\n                                item.callback && item.callback(err, res);\n                            });\n                        });\n                    }, 0); // break event loop, maybe\n                }\n            }\n\n            /**\n             * Sends a bunch of queued metric events\n             * @param items\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_batchSend\",\n            value: function _batchSend(items, callback) {\n                var _this4 = this;\n\n                // Normalize event data\n                var events = items.map(function (item) {\n                    _this4._normalizeEvent(item.event);\n                    return item.event;\n                });\n\n                var payload = {\n                    events: events\n                };\n\n                var route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n                // Set sid if present\n                if (this.sid) {\n                    payload.sid = this.sid;\n                }\n\n                // Send it\n                okanjo.net.request.post(route, payload, function (err, res) {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err: err, res: res, items: items, route: route });\n                    }\n                    callback && callback(err, res);\n                });\n            }\n\n            /**\n             * Normaizes events so that they contain consistent data values\n             * @param event\n             * @private\n             */\n\n        }, {\n            key: \"_normalizeEvent\",\n            value: function _normalizeEvent(event) {\n\n                // Ensure meta is ready to receive values\n                event.m = event.m || {};\n\n                // Set key\n                event.key = event.key || event.m.key || okanjo.key || undefined;\n\n                // Set session\n                if (this.sid) event.sid = this.sid;\n\n                // Clone the metadata, since it might be a direct reference to a widget property\n                // Deleting properties on the meta object could be very destructive\n                event.m = Object.assign({}, event.m); // event.m should be flat\n\n                // Strip meta keys that should be excluded\n                Object.keys(Metrics.Meta.exclude).forEach(function (key) {\n                    return delete event.m[key];\n                });\n\n                // Set referral channel / context\n                if (this.sourceCh) {\n                    event.m.ref_ch = this.sourceCh;\n                }\n                if (this.sourceCx) {\n                    event.m.ref_cx = this.sourceCx;\n                }\n\n                // Set page group id\n                event.m.pgid = this.pageId;\n\n                // Set okanjo version\n                event.m.ok_ver = okanjo.version;\n\n                // Finalize metadata\n                event.m = okanjo.util.flatten(event.m);\n\n                // Set page source reference\n                if (document.referrer) {\n                    event.ref = document.referrer;\n                }\n            }\n\n            /**\n             * Updates the stored session identifier\n             * @param sid\n             * @private\n             */\n\n        }, {\n            key: \"_updateSid\",\n            value: function _updateSid(sid) {\n                if (!this.sid && sid) {\n                    this.sid = sid;\n                    window.localStorage[Metrics.Params.name] = sid;\n                    okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"create\",\n\n\n            //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n            /**\n             * Helper to create a new fluent event structure\n             * @param args\n             * @return {*}\n             */\n            value: function create() {\n                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                    args[_key3] = arguments[_key3];\n                }\n\n                return Metrics.create.apply(null, args);\n            }\n        }], [{\n            key: \"addElementInfo\",\n            value: function addElementInfo(element, event) {\n                var page = okanjo.ui.getPageSize(),\n                    size = okanjo.ui.getElementPosition(element);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.pw = page.w;\n                event.m.ph = page.h;\n                event.m.x1 = size.x1;\n                event.m.y1 = size.y1;\n                event.m.x2 = size.x2;\n                event.m.y2 = size.y2;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addViewportInfo\",\n            value: function addViewportInfo(event) {\n                var vp = okanjo.ui.getViewportSize(),\n                    pos = okanjo.ui.getScrollPosition();\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.vx1 = pos.x;\n                event.m.vy1 = pos.y;\n                event.m.vx2 = pos.x + vp.vw;\n                event.m.vy2 = pos.y + vp.vh;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addEventInfo\",\n            value: function addEventInfo(jsEvent, event) {\n                var pos = okanjo.ui.getEventPosition(jsEvent);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.et = pos.et;\n                event.m.ex = pos.ex;\n                event.m.ey = pos.ey;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param event\n             * @param args\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addEventMeta\",\n            value: function addEventMeta(event) {\n                event = event || {};\n                event.m = event.m || {};\n\n                for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                    args[_key4 - 1] = arguments[_key4];\n                }\n\n                event.m = Object.assign.apply(Object, [event.m].concat(args));\n\n                return event;\n            }\n\n            /**\n             * Helper to create a new fluent event structure\n             * @param data\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"create\",\n            value: function create(data) {\n                for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                    args[_key5 - 1] = arguments[_key5];\n                }\n\n                // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n                return new MetricEvent(data, args);\n            }\n        }]);\n\n        return Metrics;\n    }();\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n\n\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key', 'callback', 'metrics_channel_context', 'metrics_context', 'mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n\n    var MetricEvent = function () {\n        function MetricEvent(data, others) {\n            _classCallCheck(this, MetricEvent);\n\n            // Merge the data and other data sets into this object\n            data = data || {};\n            // others = others || []; // the only way to create this right now is via .create ^\n            Object.assign.apply(Object, [this, data].concat(others));\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n\n\n        _createClass(MetricEvent, [{\n            key: \"data\",\n            value: function data(_data) {\n                Object.assign(this, _data);\n                return this;\n            }\n\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"event\",\n            value: function event(jsEvent) {\n                Metrics.addEventInfo(jsEvent, this);\n                return this;\n            }\n\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"viewport\",\n            value: function viewport() {\n                Metrics.addViewportInfo(this);\n                return this;\n            }\n\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"element\",\n            value: function element(_element) {\n                Metrics.addElementInfo(_element, this);\n                return this;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"meta\",\n            value: function meta() {\n                for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                    args[_key6] = arguments[_key6];\n                }\n\n                Metrics.addEventMeta.apply(null, [this].concat(args));\n                return this;\n            }\n\n            /**\n             * Sets the object and event type on the event w/o having to use .data\n             * @param object_type\n             * @param event_type\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"type\",\n            value: function type(object_type, event_type) {\n                this.object_type = object_type;\n                this.event_type = event_type;\n                return this;\n            }\n\n            /**\n             * Finalizes and sends the event\n             * @param callback\n             */\n\n        }, {\n            key: \"send\",\n            value: function send(callback) {\n                okanjo.metrics.trackEvent(this, callback);\n                // DONT RETURN - BREAK THE CHAIN HERE\n            }\n\n            /**\n             * Gets the single-metric tracking url for this event\n             * @return {string}\n             */\n\n        }, {\n            key: \"toUrl\",\n            value: function toUrl() {\n                // Copy data w/o modifying it\n                var event = Object.assign({}, this);\n\n                // Extract params\n                var object_type = event.object_type,\n                    event_type = event.event_type;\n\n                delete event.object_type;\n                delete event.event_type;\n\n                // Normalize event data\n                okanjo.metrics._normalizeEvent(event);\n\n                // Get the URL\n                return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type: object_type, event_type: event_type }) + '?' + okanjo.net.request.stringify(event);\n            }\n        }]);\n\n        return MetricEvent;\n    }();\n\n    // Export / initialize\n\n\n    okanjo.metrics = new Metrics();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function (window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    var EventEmitter = function () {\n        function EventEmitter() {\n            _classCallCheck(this, EventEmitter);\n\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n\n\n        _createClass(EventEmitter, [{\n            key: \"on\",\n            value: function on(event, listener) {\n                if (!this._events[event]) {\n                    this._events[event] = [];\n                }\n\n                this._events[event].push(listener);\n            }\n\n            /**\n             * Removes an event handler for an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: \"removeListener\",\n            value: function removeListener(event, listener) {\n\n                if (this._events[event]) {\n                    var idx = this._events[event].indexOf(listener);\n                    if (idx >= 0) {\n                        this._events[event].splice(idx, 1);\n                    }\n                }\n            }\n\n            /**\n             * Emits an event\n             * @param event\n             */\n\n        }, {\n            key: \"emit\",\n            value: function emit(event) {\n                var i = void 0,\n                    listeners = void 0,\n                    length = void 0,\n                    args = [].slice.call(arguments, 1);\n\n                if (this._events[event]) {\n                    listeners = this._events[event].slice();\n                    length = listeners.length;\n\n                    for (i = 0; i < length; i++) {\n                        listeners[i].apply(this, args);\n                    }\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Registers an event handler to fire only once on an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: \"once\",\n            value: function once(event, listener) {\n                var _arguments = arguments,\n                    _this5 = this;\n\n                var callback = function callback() {\n                    var args = [].slice.call(_arguments, 1);\n                    _this5.removeListener(event, callback);\n                    listener.apply(_this5, args);\n                };\n\n                this.on(event, callback);\n            }\n        }]);\n\n        return EventEmitter;\n    }();\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n    var DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    var DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n\n    var Widget = function (_okanjo$_EventEmitter) {\n        _inherits(Widget, _okanjo$_EventEmitter);\n\n        function Widget(element, options) {\n            _classCallCheck(this, Widget);\n\n            // Verify element was given (we can't load unless we have one)\n            var _this6 = _possibleConstructorReturn(this, (Widget.__proto__ || Object.getPrototypeOf(Widget)).call(this));\n\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: _this6, element: element, options: options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)), { widget: _this6, element: element, options: options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            _this6.name = 'Widget';\n            _this6.element = element;\n            _this6.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            _this6.config = Object.assign({}, options);\n            return _this6;\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n\n\n        _createClass(Widget, [{\n            key: \"init\",\n            value: function init() {\n                // process config attributes\n                this._applyConfiguration();\n\n                this._setCompatibilityOptions();\n\n                // ensure placement key\n                if (!this._ensurePlacementKey()) return;\n\n                // Tell the widget to load\n                this.load();\n            }\n\n            /**\n             * This is for extended widgets, so they may modify the configuration before loading\n             */\n\n        }, {\n            key: \"_setCompatibilityOptions\",\n            value: function _setCompatibilityOptions() {}\n            // By default, this does nothing. Must be overridden to be useful\n\n\n            //noinspection JSMethodCanBeStatic\n            /**\n             * Widget configuration definitions\n             * @return {{}}\n             */\n\n        }, {\n            key: \"getSettings\",\n            value: function getSettings() {\n                // Override this\n                return {};\n            }\n\n            /**\n             * Main widget load function.\n             */\n\n        }, {\n            key: \"load\",\n            value: function load() {}\n            // Override this in the widget implementation\n\n\n            /**\n             * Applies data attribute settings and defaults to the widget configuration\n             * @private\n             */\n\n        }, {\n            key: \"_applyConfiguration\",\n            value: function _applyConfiguration() {\n                var _this7 = this;\n\n                // this.config was set to the options provided in the constructor\n                // so layer data attributes on top\n\n                var data = this.getDataAttributes();\n                var settings = this.getSettings();\n                Object.keys(data).forEach(function (key) {\n                    var normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    var val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        _this7.config[normalizedKey] = val;\n                    }\n                });\n\n                // Apply defaults from the widget settings\n                Object.keys(settings).forEach(function (key) {\n                    if (_this7.config[key] === undefined && settings[key]._default !== undefined) {\n                        _this7.config[key] = settings[key].value(undefined, false);\n                    }\n                });\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets a copy of the configuration, suitable for transmission\n             * @return {{}}\n             */\n\n        }, {\n            key: \"getConfig\",\n            value: function getConfig() {\n                var _this8 = this;\n\n                var settings = this.getSettings();\n                var out = {};\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this8.config[origKey];\n                    var key = origKey;\n                    var group = null;\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            /**\n             * Before loading, ensure that a placement key is present or abort\n             * @return {boolean}\n             * @private\n             */\n\n        }, {\n            key: \"_ensurePlacementKey\",\n            value: function _ensurePlacementKey() {\n\n                // Check if set on widget or globally\n                if (this.config.key) {\n                    return true;\n                } else if (okanjo.key) {\n                    // Copy key from global scope,\n                    this.config.key = okanjo.key;\n                    return true;\n                }\n\n                // No key set, can't load.\n                okanjo.report('No key provided on widget', { widget: this });\n                this.showError('Error: Missing placement key.');\n                return false;\n            }\n\n            /**\n             * Displays an error in the widget element\n             * @param message\n             */\n\n        }, {\n            key: \"showError\",\n            value: function showError(message) {\n                this.setMarkup(okanjo.ui.engine.render('okanjo.error', this, { message: message }));\n            }\n\n            /**\n             * Sets the markup of the widget's element\n             * @param markup\n             */\n\n        }, {\n            key: \"setMarkup\",\n            value: function setMarkup(markup) {\n                this.element.innerHTML = markup;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the current page URL, sans query string and fragment.\n             * @returns {string} - URL\n             */\n\n        }, {\n            key: \"getDataAttributes\",\n\n\n            /**\n             * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n             * @returns {*}\n             */\n            value: function getDataAttributes() {\n                var data = {};\n                Array.from(this.element.attributes).forEach(function (attr) {\n                    var match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                    if (match) {\n                        data[match[1]] = attr.value;\n                    }\n                });\n                return data;\n            }\n        }], [{\n            key: \"getCurrentPageUrl\",\n            value: function getCurrentPageUrl() {\n                return window.location.href.replace(/([?#].*)$/, '');\n            }\n        }]);\n\n        return Widget;\n    }(okanjo._EventEmitter);\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n\n\n    Widget.Field = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Field() {\n            _classCallCheck(this, Field);\n\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n\n\n        _createClass(Field, [{\n            key: \"array\",\n            value: function array(converter) {\n                this._convert = function (val) {\n                    if (Array.isArray(val)) {\n                        if (converter) {\n                            return val.map(function (v) {\n                                return converter(v);\n                            });\n                        } else {\n                            return val;\n                        }\n                    }\n                    val = val.replace(/\\\\,/g, '\\0');\n                    return val.split(',').map(function (v) {\n                        var res = v.trim().replace('\\0', ',');\n                        if (converter) res = converter(res);\n                        return res;\n                    });\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"string\",\n\n\n            /**\n             * Formats the value as a string\n             * @return {Field}\n             */\n            value: function string() {\n                this._convert = function (val) {\n                    if (val === null || val === undefined) return val;else return \"\" + val;\n                };\n                return this;\n            }\n        }, {\n            key: \"bool\",\n\n\n            /**\n             * Formats the value as a boolean (takes 1, 0, true, false)\n             * @return {Field}\n             */\n            value: function bool() {\n                this._convert = function (val) {\n                    if (typeof val === \"string\") {\n                        return val === \"1\" || val.toLowerCase() === \"true\";\n                    } else {\n                        return !!val;\n                    }\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"strip\",\n\n\n            /**\n             * Indicates the field should not be passed on for transmission\n             * @return {Field}\n             */\n            value: function strip() {\n                this._strip = true;return this;\n            }\n        }, {\n            key: \"int\",\n\n\n            /**\n             * Formats the value as a integer (whole) number\n             * @return {Field}\n             */\n            value: function int() {\n                this._convert = function (val) {\n                    return parseInt(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"float\",\n\n\n            /**\n             * Formats the value as a floating point number\n             * @return {Field}\n             */\n            value: function float() {\n                this._convert = function (val) {\n                    return parseFloat(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: \"default\",\n\n\n            //noinspection ReservedWordAsName\n            /**\n             * Sets the default value to use if not set\n             * @param val\n             * @return {Field}\n             */\n            value: function _default(val) {\n                this._default = val;\n                return this;\n            }\n\n            /**\n             * Assigns the property to a bucket for hierarchy\n             * @param name\n             * @return {Field}\n             */\n\n        }, {\n            key: \"group\",\n            value: function group(name) {\n                this._group = name;\n                return this;\n            }\n\n            /**\n             * Gets the group the field belongs to\n             * @return {*|null}\n             */\n\n        }, {\n            key: \"getGroup\",\n            value: function getGroup() {\n                return this._group;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the formatted value of the field\n             * @param val\n             * @param strip\n             * @return {*}\n             */\n\n        }, {\n            key: \"value\",\n            value: function value(val) {\n                var strip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                if (this._strip && strip) return undefined;\n                if (val !== undefined && this._convert) {\n                    val = this._convert(val);\n                }\n                return val !== undefined ? val : this._default;\n            }\n        }], [{\n            key: \"array\",\n            value: function array(converter) {\n                return new Field().array(converter);\n            }\n        }, {\n            key: \"string\",\n            value: function string() {\n                return new Field().string();\n            }\n        }, {\n            key: \"bool\",\n            value: function bool() {\n                return new Field().bool();\n            }\n        }, {\n            key: \"strip\",\n            value: function strip() {\n                return new Field().strip();\n            }\n        }, {\n            key: \"int\",\n            value: function int() {\n                return new Field().int();\n            }\n        }, {\n            key: \"float\",\n            value: function float() {\n                return new Field().float();\n            }\n        }]);\n\n        return Field;\n    }();\n\n    // Export\n    return okanjo._Widget = Widget;\n})(window);\n\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    //region Imports and Constants\n\n    var okanjo = window.okanjo;\n    var _okanjo$_Widget$Field = okanjo._Widget.Field,\n        string = _okanjo$_Widget$Field.string,\n        array = _okanjo$_Widget$Field.array,\n        float = _okanjo$_Widget$Field.float,\n        int = _okanjo$_Widget$Field.int,\n        bool = _okanjo$_Widget$Field.bool;\n\n    var Metrics = okanjo.metrics.constructor;\n    var TemplateEngine = okanjo.ui.engine.constructor;\n\n    var FILTERS = 'filters';\n    var DISPLAY = 'display';\n    var ARTICLE_META = 'article_meta';\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n\n    var Placement = function (_okanjo$_Widget) {\n        _inherits(Placement, _okanjo$_Widget);\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        function Placement(element) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            _classCallCheck(this, Placement);\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n\n            var _this9 = _possibleConstructorReturn(this, (Placement.__proto__ || Object.getPrototypeOf(Placement)).call(this, element, options));\n\n            _this9.name = 'Placement';\n            _this9._metricBase = {}; // placeholder for metrics\n            _this9._response = null;\n\n            // Start loading content\n            if (!options.no_init) _this9.init();\n            return _this9;\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n\n\n        _createClass(Placement, [{\n            key: \"getSettings\",\n            value: function getSettings() {\n                return {\n\n                    // What type of response do you want\n                    type: string().group(FILTERS),\n\n                    // What specific products do you want\n                    ids: array().group(FILTERS),\n\n                    // Filter by generic query string\n                    q: string().group(FILTERS),\n\n                    // Filter by relation to content\n                    url: string().group(FILTERS),\n                    url_referrer: string().group(FILTERS),\n                    url_selectors: string().group(FILTERS),\n\n                    // Filter by hierarchy\n                    organization_id: string().group(FILTERS),\n                    property_id: string().group(FILTERS),\n                    store_id: string().group(FILTERS),\n\n                    // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                    organization_name: string().group(FILTERS),\n                    property_name: string().group(FILTERS),\n                    store_name: string().group(FILTERS),\n\n                    // Filter by integrations\n                    external_id: string().group(FILTERS),\n                    sku: string().group(FILTERS),\n                    external_store_id: string().group(FILTERS),\n\n                    // Filter by product attributes\n                    condition: string().group(FILTERS),\n                    manufacturer: string().group(FILTERS),\n                    upc: string().group(FILTERS),\n                    isbn: string().group(FILTERS),\n\n                    // Filter by categorization / distribution\n                    tags: array().group(FILTERS),\n                    category: array().group(FILTERS),\n                    pools: array().group(FILTERS),\n\n                    // Filter by price range\n                    min_price: float().group(FILTERS),\n                    max_price: float().group(FILTERS),\n\n                    // Filter by donation ranges\n                    min_donation_percent: float().group(FILTERS),\n                    max_donation_percent: float().group(FILTERS),\n\n                    // Filter by donation recipient\n                    donation_to: string().group(FILTERS),\n\n                    // Sorting\n                    sort_by: string().group(FILTERS),\n                    sort_direction: string().group(FILTERS),\n\n                    // Pagination\n                    skip: int().group(FILTERS),\n                    take: int().group(FILTERS),\n\n                    // Placement Testing\n                    placement_tests_only: bool(),\n\n                    // Display settings\n                    size: string().group(DISPLAY),\n                    template_name: string().group(DISPLAY),\n                    template_layout: string().group(DISPLAY),\n                    template_theme: string().group(DISPLAY),\n                    template_cta_style: string().group(DISPLAY),\n                    template_cta_text: string().group(DISPLAY),\n                    template_cta_color: string().group(DISPLAY),\n                    adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                    // Article metadata\n                    url_category: array().group(ARTICLE_META),\n                    url_keywords: array().group(ARTICLE_META),\n\n                    // Functional settings\n                    no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                    proxy_url: string().strip(),\n                    expandable: bool().strip().default(true),\n                    disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                    disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                    backwards: string().strip() // internal flag indicating port from a deprecated widget\n                };\n            }\n\n            /**\n             * Gets the widget configuration formatted using settings, suitable for transmission\n             * @return {{filters: {}, display: {}, backfill: {}, article_meta: {}}}\n             */\n\n        }, {\n            key: \"getConfig\",\n            value: function getConfig() {\n                var _this10 = this;\n\n                var settings = this.getSettings();\n                var out = { filters: {}, display: {}, backfill: {}, article_meta: {} };\n                var backfillPattern = /^backfill_(.+)$/; // backfill_property\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this10.config[origKey];\n                    var key = origKey;\n                    var isBackfill = false;\n                    var group = null;\n\n                    // Get the property name if it was prefixed with backfill\n                    var matches = backfillPattern.exec(origKey);\n                    if (matches) {\n                        key = matches[1];\n                        isBackfill = true;\n                    }\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = isBackfill ? out.backfill : out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Core load process\n             */\n\n        }, {\n            key: \"load\",\n            value: function load() {\n                var _this11 = this;\n\n                // Set metric base data (stub for all future events emitted by the widget)\n                this._setMetricBase();\n\n                // Find out what we should display here\n                this._fetchContent(function (err) {\n                    if (err) {\n                        // Report the widget load as declined\n                        _this11._reportWidgetLoad(err);\n                    } else {\n                        // Merge display settings from response\n                        _this11._mergeResponseSettings();\n\n                        // Merge the referential data from the response\n                        _this11._updateBaseMetaFromResponse();\n\n                        // Handle rendering based on output type\n                        _this11._showContent();\n                    }\n                });\n            }\n\n            //endregion\n\n            //region Internal Helpers\n\n            /**\n             * Initializes the common metric data for events emitted by the placement\n             * @private\n             */\n\n        }, {\n            key: \"_setMetricBase\",\n            value: function _setMetricBase() {\n                var base = this._metricBase;\n                base.ch = Metrics.Channel.placement;\n                base.cx = this.config.backwards || 'auto';\n                base.key = this.config.key;\n                base.m = base.m || {};\n                base.m.wgid = this.instanceId;\n            }\n\n            /**\n             * Emits the widget impression event\n             * @param declined\n             * @private\n             */\n\n        }, {\n            key: \"_reportWidgetLoad\",\n            value: function _reportWidgetLoad(declined) {\n\n                // If this is declined, mark future events as declined too\n                this._metricBase.m.decl = declined || '0';\n\n                // Track impression\n                okanjo.metrics.create(this._metricBase).type(Metrics.Object.widget, Metrics.Event.impression).meta(this.getConfig()).element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport().send();\n            }\n\n            /**\n             * Executes the request for content to fill the placement\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_fetchContent\",\n            value: function _fetchContent(callback) {\n                var _this12 = this;\n\n                // Build request to api, starting with this placement config params\n                var query = this.getConfig();\n\n                // Extract the key\n                var key = query.key;\n                delete query.key;\n\n                // Attach sid and referrer\n                if (okanjo.metrics.sid) query.sid = okanjo.metrics.msid;\n                query.filters.url_referrer = window.location.href;\n                query.wgid = this.instanceId;\n                query.pgid = okanjo.metrics.pageId;\n\n                // Send it\n                okanjo.net.request.post(okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live') + \"?key=\" + encodeURIComponent(key), query, function (err, res) {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: _this12 });\n                        _this12.setMarkup(''); // Don't show anything\n                        _this12.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        _this12._response = res;\n\n                        // Hook point for response handling\n                        _this12.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                });\n            }\n\n            /**\n             * Applies response filters and display settings into the widget configuration\n             * @private\n             */\n\n        }, {\n            key: \"_mergeResponseSettings\",\n            value: function _mergeResponseSettings() {\n                var _this13 = this;\n\n                var res = this._response;\n                var data = res.data || {};\n                var settings = data.settings || {};\n\n                if (settings.filters) {\n                    Object.keys(settings.filters).forEach(function (key) {\n                        _this13.config[key] = settings.filters[key];\n                    });\n                }\n\n                if (settings.display) {\n                    Object.keys(settings.display).forEach(function (key) {\n                        _this13.config[key] = settings.display[key];\n                    });\n                }\n            }\n\n            /**\n             * Applies response data to future metric events\n             * @private\n             */\n\n        }, {\n            key: \"_updateBaseMetaFromResponse\",\n            value: function _updateBaseMetaFromResponse() {\n                // Update the base metric data with info from the response\n                var data = (this._response || {}).data || {};\n                this._metricBase.m = this._metricBase.m || {};\n                var meta = this._metricBase.m;\n\n                // Article\n                if (data.article) meta.aid = data.article.id;\n\n                if (data.test) {\n                    meta.pten = 1;\n                    meta.ptid = data.test.id;\n                    meta.ptseed = data.test.seed;\n                } else {\n                    meta.pten = 0;\n                }\n            }\n\n            /**\n             * Beings the render process based on the response content\n             * @private\n             */\n\n        }, {\n            key: \"_showContent\",\n            value: function _showContent() {\n                var data = (this._response || {}).data || {};\n\n                // Known content types we can display\n                if (data.type === Placement.ContentTypes.products) {\n                    this._showProducts();\n                } else if (data.type === Placement.ContentTypes.articles) {\n                    this._showArticles();\n                } else if (data.type === Placement.ContentTypes.adx) {\n                    this._showADX();\n                } else {\n                    // Unknown response type!\n\n                    // Report the widget load as declined\n                    var msg = 'Unknown response content type: ' + data.type;\n                    okanjo.report(msg, { placement: this });\n                    this.setMarkup(''); // Don't show anything\n                    this.emit('error', msg);\n                    this._reportWidgetLoad(msg);\n                }\n            }\n\n            /**\n             * Generates the click url using the event, proxy_url, and additional params\n             * @param event\n             * @param url\n             * @param additionalUrlParams\n             * @return {*}\n             * @private\n             */\n\n        }, {\n            key: \"_getClickThroughURL\",\n            value: function _getClickThroughURL(event, url, additionalUrlParams) {\n                var joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n                // Tack on transfer params\n                additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n                additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n                additionalUrlParams.ok_ch = this._metricBase.ch;\n                additionalUrlParams.ok_cx = this._metricBase.cx;\n\n                url += joiner + Object.keys(additionalUrlParams).map(function (key) {\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(additionalUrlParams[key]);\n                }).join('&');\n\n                // Wrap the url if we're proxying\n                if (this.config.proxy_url) {\n                    url = this.config.proxy_url + encodeURIComponent(url);\n                }\n\n                // Set the url on the event\n                event.data({\n                    u: url\n                });\n\n                return event.toUrl();\n            }\n\n            /**\n             * Converts a resource's link into one suitable for tracking, making middle-click safe\n             * @param type\n             * @param resource\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: \"_handleResourceMouseDown\",\n            value: function _handleResourceMouseDown(type, resource, e) {\n                // Generate a new click id for this event\n                var clickId = okanjo.util.shortid();\n\n                // Start building the event\n                var event = okanjo.metrics.create(this._metricBase, {\n                    id: resource.id\n                }).type(type, Metrics.Event.interaction).meta(this.getConfig()).meta({ cid: clickId }).event(e).element(e.currentTarget).viewport();\n\n                // Pull the proper params out of the resource depending on it's type\n                var trackParam = 'url_track_param';\n                var urlParam = 'url';\n\n                if (type === Metrics.Object.product) {\n                    trackParam = 'buy_url_track_param';\n                    urlParam = 'buy_url';\n                }\n\n                // Attach the campaign tracking identifier\n                var additionalParams = {\n                    ok_cid: clickId\n                };\n                if (resource[trackParam]) additionalParams[resource[trackParam]] = (okanjo.metrics.sid || 'unknown') + ':' + clickId;\n\n                // Update the link with the event data\n                event.data({ ea: Metrics.Action.click });\n                e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n                // Cache this on the product\n                resource._clickId = clickId;\n                resource._event = event;\n                resource._additionalParams = additionalParams;\n            }\n\n            /**\n             * Gets the template to use, accounting for configured preference if available\n             * @param contentType\n             * @param defaultName\n             * @return {string}\n             * @private\n             */\n\n        }, {\n            key: \"_getTemplate\",\n            value: function _getTemplate(contentType, defaultName) {\n                var templateName = this.config.template_name;\n                if (!templateName || !okanjo.ui.engine.isTemplateRegistered(contentType + \".\" + templateName)) {\n                    templateName = defaultName;\n                }\n                return contentType + \".\" + templateName;\n            }\n\n            /**\n             * Enforces size/layout/cta restrictions\n             * @private\n             */\n\n        }, {\n            key: \"_enforceLayoutOptions\",\n            value: function _enforceLayoutOptions() {\n                // Enforce format restrictions\n                if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                    this.config.template_layout = \"list\";\n                    this.config.template_cta_style = \"link\";\n                } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                    this.config.template_layout = \"list\";\n                }\n            }\n\n            /**\n             * Register a custom\n             * @private\n             */\n\n        }, {\n            key: \"_registerCustomBranding\",\n            value: function _registerCustomBranding(prefix, buttonClass) {\n                var brandColor = this.config.template_cta_color;\n                if (brandColor) {\n                    var brandCSS = void 0,\n                        brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                    brandCSS = \"\\n                    \" + prefix + \"-block2.\" + brandCSSId + \" \" + prefix + \"-\" + buttonClass + \" { color: \" + brandColor + \";} \\n                    \" + prefix + \"-block2.\" + brandCSSId + \".okanjo-cta-style-button \" + prefix + \"-\" + buttonClass + \" { border: 1px solid \" + brandColor + \"; } \\n                    \" + prefix + \"-block2.\" + brandCSSId + \".okanjo-cta-style-button \" + prefix + \"-\" + buttonClass + \":hover { background: \" + brandColor + \"; } \\n                \";\n\n                    okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                    okanjo.ui.engine.ensureCss(brandCSSId);\n                }\n            }\n\n            //endregion\n\n            //region Product Handling\n\n            /**\n             * Renders a product response\n             * @private\n             */\n\n        }, {\n            key: \"_showProducts\",\n            value: function _showProducts() {\n                var _this14 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // - render\n\n                // Format products\n                data.results.forEach(function (offer, index) {\n                    // Disable inline buy if configured to do so\n                    if (_this14.config.disable_inline_buy) offer.inline_buy_url = null;\n                    if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                    // Set primary image\n                    offer._image_url = offer.image_urls ? offer.image_urls[0] : '';\n\n                    // Escape buy url (fixme: does not include proxy_url!)\n                    offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                    // Make price tag pretty\n                    offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                    offer._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break it */\n                    if (id && index >= 0) {\n                        var product = _this14._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break it */\n                        if (product) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this14._handleResourceMouseDown.bind(_this14, Metrics.Object.product, product));\n                            a.addEventListener('click', _this14._handleProductClick.bind(_this14, product));\n\n                            // Track impression\n                            okanjo.metrics.create(_this14._metricBase, { id: product.id }).type(Metrics.Object.product, Metrics.Event.impression).meta(_this14.getConfig()).meta({ bf: product.backfill ? 1 : 0 }).element(a).send();\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-product-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the product click process\n             * @param product\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: \"_handleProductClick\",\n            value: function _handleProductClick(product, e) {\n\n                // Update the event\n                if (!product._event || !product._additionalParams || !product._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.product, product, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = product._event,\n                    additionalParams = product._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Determine what we're doing - native ux or redirect\n                var showNativeBuyUx = !!product.inline_buy_url,\n                    showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile();\n\n                // Show the inline buy experience or redirect\n                if (showPopupNativeBuyUx) {\n                    // Mobile native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    //\n                    // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                    // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                    // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                    //\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ popup: 'true' });\n\n                    // Get the frame url\n                    var url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Open the window or redirect if that failed\n                    this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                    /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                    if (!this._popupFrame) {\n                        // Fallback to just replacing the window with the target, since popups don't work :(\n                        okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                        window.location.href = url;\n                    }\n                } else if (showNativeBuyUx) {\n                    // Regular native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-inline-buy-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto'\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Check whether we're allowed to expand past the bounds of the placement\n                    additionalParams.expandable = this.config.expandable ? 1 : 0;\n                    if (!this.config.expandable) {\n                        var parent = this.element.querySelector('.okanjo-expansion-root');\n                        /* istanbul ignore else: custom templates could break this */\n                        if (parent) {\n                            frame.className += ' okanjo-ad-in-unit';\n                            frame.setAttribute('height', \"100%\");\n                            frame.setAttribute('width', \"100%\");\n\n                            parent.appendChild(frame);\n\n                            var size = okanjo.ui.getElementSize(parent);\n                            additionalParams.frame_height = size.height;\n                            additionalParams.frame_width = size.width;\n                            /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                            if (this.config.size) additionalParams.ad_size = this.config.size;\n                        }\n                    }\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                    // Set the frame url\n                    frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Show the modal if it was not internally expanded\n                    if (!frame.parentNode) {\n                        okanjo.ui.modal.show(frame);\n                    }\n                } else {\n                    // Update the link a second time, just in case the data changed\n                    e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n                }\n            }\n\n            //endregion\n\n            //region Article Handling\n\n            /**\n             * Renders an article response\n             * @private\n             */\n\n        }, {\n            key: \"_showArticles\",\n            value: function _showArticles() {\n                var _this15 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // - render\n\n                // Format articles\n                data.results.forEach(function (article, index) {\n                    // Escape url (fixme: does not include proxy_url!)\n                    article._escaped_url = encodeURIComponent(article.url);\n                    article._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break this */\n                    if (id && index >= 0) {\n                        var article = _this15._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break this */\n                        if (article) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this15._handleResourceMouseDown.bind(_this15, Metrics.Object.article, article));\n                            a.addEventListener('click', _this15._handleArticleClick.bind(_this15, article));\n\n                            // Track impression\n                            okanjo.metrics.create(_this15._metricBase, { id: article.id }).type(Metrics.Object.article, Metrics.Event.impression).meta(_this15.getConfig()).meta({ bf: article.backfill ? 1 : 0 }).element(a).send();\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-article-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the article click process\n             * @param article\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: \"_handleArticleClick\",\n            value: function _handleArticleClick(article, e) {\n                // Update the event\n                if (!article._event || !article._additionalParams || !article._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.article, article, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = article._event,\n                    additionalParams = article._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n            }\n\n            //endregion\n\n            //region ADX Handling\n\n            /**\n             * Renders a Google DFP/ADX response\n             * @private\n             */\n\n        }, {\n            key: \"_showADX\",\n            value: function _showADX() {\n                var _this16 = this;\n\n                var data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n                // Get the template we should use to render the google ad\n                var templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n                // Determine what size ad we can place here\n                var size = null;\n                if (this.config.size) {\n                    if (Placement.Sizes[this.config.size]) {\n                        // Defined size, use these known dimensions\n                        size = Placement.Sizes[this.config.size];\n                    } else {\n                        var match = /^([0-9]+)x([0-9]+)$/i.exec(this.config.size);\n                        if (match) {\n                            size = { width: match[1], height: match[2] };\n                        }\n                    }\n                }\n\n                // No given size, we need to guess\n                if (!size) size = Placement.Sizes.default;\n\n                // If we're using okanjo's ad slot, then track the impression\n                // otherwise decline it because we're just passing through to the publishers account\n                var adUnitPath = '/90447967/okanjo:<publisher>';\n                if (data.settings.display && data.settings.display.adx_unit_path) {\n                    adUnitPath = data.settings.display.adx_unit_path;\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad(); // accept it because we're serving out of our exchange\n                }\n\n                // Pass along what the template needs to know to display the ad\n                var renderContext = {\n                    size: size,\n                    adUnitPath: adUnitPath\n                };\n\n                // Render the container\n                this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n                // Insert the actual ad into the container\n                var container = this.element.querySelector('.okanjo-adx-container');\n                /* istanbul ignore else: custom templates could break this */\n                if (container) {\n\n                    // Make the frame element\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-adx-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto',\n                        width: size.width,\n                        height: size.height\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Attach to dOM\n                    container.appendChild(frame);\n\n                    // Build a click-through tracking url so we know when an ad is clicked too\n                    var clickUrl = okanjo.metrics.create(this._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction).meta(this.getConfig()).meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    }).element(frame).toUrl();\n\n                    // Transfer references to the frame window\n                    // frame.contentWindow.okanjo = okanjo;\n                    // frame.contentWindow.placement = this;\n                    frame.contentWindow.trackImpression = function () {\n                        okanjo.metrics.create(_this16._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.impression).meta(_this16.getConfig()).meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        }).element(frame).send();\n                    };\n\n                    // Load Google ad!\n                    frame.contentWindow.document.open();\n                    frame.contentWindow.document.write(\"<html><head><style type=\\\"text/css\\\">html,body {margin: 0; padding: 0;}</style></head><body>\\n<\" + (\"script type=\\\"text/javascript\\\" src=\\\"https://www.googletagservices.com/tag/js/gpt.js\\\">\\n    googletag.pubads().addEventListener('slotRenderEnded', function(e) { \\n        trackImpression(e);\\n    });\\n    googletag.pubads()\\n        .definePassback(\\\"\" + adUnitPath.replace(/\"/g, '\\\\\"') + \"\\\", [[\" + size.width + \", \" + size.height + \"]])\\n        .setClickUrl(\\\"\" + clickUrl + \"&u=\\\")\\n        .display();\\n<\") + \"/script>\\n</body></html>\");\n                    frame.contentWindow.document.close();\n\n                    // TODO future event hooks\n                    // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                    // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                    // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                    // Impression tracking is done from within the iframe. Crazy, right?\n                }\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            //endregion\n\n        }]);\n\n        return Placement;\n    }(okanjo._Widget);\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n\n\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle: { width: 300, height: 250 }, // aka: sidekick\n        leaderboard: { width: 728, height: 90 },\n        large_mobile_banner: { width: 320, height: 100 },\n        half_page: { width: 300, height: 600 }, // aka: filmstrip, sidekick\n\n        // IAB / Others\n        billboard: { width: 970, height: 250 }, // aka: sidekick\n        button_2: { width: 120, height: 60 },\n        micro_bar: { width: 88, height: 31 },\n        portrait: { width: 300, height: 1050 },\n        rectangle: { width: 180, height: 150 },\n        super_leaderboard: { width: 970, height: 90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper: { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard: { width: 320, height: 50 },\n        small_square: { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1: { width: 120, height: 90 },\n        full_banner: { width: 468, height: 60 },\n        half_banner: { width: 234, height: 60 },\n        large_rectangle: { width: 336, height: 280 },\n        pop_under: { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper: { width: 120, height: 600 },\n        square: { width: 250, height: 250 },\n        square_button: { width: 125, height: 125 },\n        vertical_banner: { width: 120, height: 240 },\n        vertical_rectangle: { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n\n    var Product = function (_okanjo$Placement) {\n        _inherits(Product, _okanjo$Placement);\n\n        function Product(element, options) {\n            _classCallCheck(this, Product);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this17 = _possibleConstructorReturn(this, (Product.__proto__ || Object.getPrototypeOf(Product)).call(this, element, options));\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this17 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this17.config.no_init;\n                _this17.init();\n            }\n            return _this17;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Product, [{\n            key: \"_setCompatibilityOptions\",\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Product';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Set filters based on old \"mode\"\n                if (this.config.mode === 'sense') {\n                    // sense\n                    this.config.url = this.config.url || 'referrer';\n                    this.config.take = this.config.take || 5;\n                } else if (this.config.mode === 'single') {\n                    // single\n                    this.config.url = null;\n                    if (this.config.id) this.config.ids = [this.config.id];\n                    this.config.take = 1;\n                    delete this.config.id;\n                } else {\n                    // browse\n                    this.config.url = null;\n                    this.config.take = this.config.take || 25;\n                }\n                delete this.config.mode;\n\n                // Sold by changed to store name\n                if (this.config.sold_by) {\n                    this.config.store_name = this.config.sold_by;\n                    delete this.config.sold_by;\n                }\n\n                // Selectors is now url_selectors\n                if (this.config.selectors) {\n                    this.config.url_selectors = this.config.selectors;\n                    delete this.config.selectors;\n                }\n\n                // Marketplace_id is no longer a thing, closest analog are properties.\n                if (this.config.marketplace_id) {\n                    this.config.property_id = this.config.marketplace_id;\n                    delete this.config.marketplace_id;\n                }\n\n                // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n                if (this.config.marketplace_status === 'testing') {\n                    this.config.sandbox = true;\n                }\n                delete this.config.marketplace_status;\n\n                // Deprecated\n                delete this.config.suboptimal;\n                delete this.config.text;\n            }\n        }]);\n\n        return Product;\n    }(okanjo.Placement);\n\n    return okanjo.Product = Product;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n\n    var Ad = function (_okanjo$Placement2) {\n        _inherits(Ad, _okanjo$Placement2);\n\n        function Ad(element, options) {\n            _classCallCheck(this, Ad);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this18 = _possibleConstructorReturn(this, (Ad.__proto__ || Object.getPrototypeOf(Ad)).call(this, element, options));\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this18 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this18.config.no_init;\n                _this18.init();\n            }\n            return _this18;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Ad, [{\n            key: \"_setCompatibilityOptions\",\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Ad';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Id / single mode is now ids\n                this.config.url = null;\n                if (this.config.id) {\n                    this.config.ids = [this.config.id];\n                } else {\n                    okanjo.warn('Ad widget should have parameter `id` set.');\n                }\n                this.config.take = 1;\n                delete this.config.id;\n\n                // Content is automatically determined whether the placement element contains children\n                delete this.config.content;\n            }\n        }]);\n\n        return Ad;\n    }(okanjo.Placement);\n\n    return okanjo.Ad = Ad;\n})(window);\n/* jshint ignore:start */\n\n(function () {\n\n    /*!\n     * mustache.js - Logic-less {{mustache}} templates with JavaScript\n     * http://github.com/janl/mustache.js\n     */\n\n    /*global define: false Mustache: true*/\n\n    (function defineMustache(global, factory) {\n        if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && exports && typeof exports.nodeName !== 'string') {\n            factory(exports); // CommonJS\n        } else if (typeof define === 'function' && define.amd) {\n            define(['exports'], factory); // AMD\n        } else {\n            global.Mustache = {};\n            factory(global.Mustache); // script, wsh, asp\n        }\n    })(this, function mustacheFactory(mustache) {\n\n        var objectToString = Object.prototype.toString;\n        var isArray = Array.isArray || function isArrayPolyfill(object) {\n            return objectToString.call(object) === '[object Array]';\n        };\n\n        function isFunction(object) {\n            return typeof object === 'function';\n        }\n\n        /**\n         * More correct typeof string handling array\n         * which normally returns typeof 'object'\n         */\n        function typeStr(obj) {\n            return isArray(obj) ? 'array' : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n        }\n\n        function escapeRegExp(string) {\n            return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        /**\n         * Null safe way of checking whether or not an object,\n         * including its prototype, has a given property\n         */\n        function hasProperty(obj, propName) {\n            return obj != null && (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === 'object' && propName in obj;\n        }\n\n        // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n        // See https://github.com/janl/mustache.js/issues/189\n        var regExpTest = RegExp.prototype.test;\n        function testRegExp(re, string) {\n            return regExpTest.call(re, string);\n        }\n\n        var nonSpaceRe = /\\S/;\n        function isWhitespace(string) {\n            return !testRegExp(nonSpaceRe, string);\n        }\n\n        var entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n\n        function escapeHtml(string) {\n            return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n                return entityMap[s];\n            });\n        }\n\n        var whiteRe = /\\s*/;\n        var spaceRe = /\\s+/;\n        var equalsRe = /\\s*=/;\n        var curlyRe = /\\s*\\}/;\n        var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n        /**\n         * Breaks up the given `template` string into a tree of tokens. If the `tags`\n         * argument is given here it must be an array with two string values: the\n         * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n         * course, the default is to use mustaches (i.e. mustache.tags).\n         *\n         * A token is an array with at least 4 elements. The first element is the\n         * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n         * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n         * all text that appears outside a symbol this element is \"text\".\n         *\n         * The second element of a token is its \"value\". For mustache tags this is\n         * whatever else was inside the tag besides the opening symbol. For text tokens\n         * this is the text itself.\n         *\n         * The third and fourth elements of the token are the start and end indices,\n         * respectively, of the token in the original template.\n         *\n         * Tokens that are the root node of a subtree contain two more elements: 1) an\n         * array of tokens in the subtree and 2) the index in the original template at\n         * which the closing tag for that section begins.\n         */\n        function parseTemplate(template, tags) {\n            if (!template) return [];\n\n            var sections = []; // Stack to hold section tokens\n            var tokens = []; // Buffer to hold the tokens\n            var spaces = []; // Indices of whitespace tokens on the current line\n            var hasTag = false; // Is there a {{tag}} on the current line?\n            var nonSpace = false; // Is there a non-space char on the current line?\n\n            // Strips all whitespace tokens array for the current line\n            // if there was a {{#tag}} on it and otherwise only space.\n            function stripSpace() {\n                if (hasTag && !nonSpace) {\n                    while (spaces.length) {\n                        delete tokens[spaces.pop()];\n                    }\n                } else {\n                    spaces = [];\n                }\n\n                hasTag = false;\n                nonSpace = false;\n            }\n\n            var openingTagRe, closingTagRe, closingCurlyRe;\n            function compileTags(tagsToCompile) {\n                if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n                if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n\n                openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n                closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n                closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n            }\n\n            compileTags(tags || mustache.tags);\n\n            var scanner = new Scanner(template);\n\n            var start, type, value, chr, token, openSection;\n            while (!scanner.eos()) {\n                start = scanner.pos;\n\n                // Match any text between tags.\n                value = scanner.scanUntil(openingTagRe);\n\n                if (value) {\n                    for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n                        chr = value.charAt(i);\n\n                        if (isWhitespace(chr)) {\n                            spaces.push(tokens.length);\n                        } else {\n                            nonSpace = true;\n                        }\n\n                        tokens.push(['text', chr, start, start + 1]);\n                        start += 1;\n\n                        // Check for whitespace on the current line.\n                        if (chr === '\\n') stripSpace();\n                    }\n                }\n\n                // Match the opening tag.\n                if (!scanner.scan(openingTagRe)) break;\n\n                hasTag = true;\n\n                // Get the tag type.\n                type = scanner.scan(tagRe) || 'name';\n                scanner.scan(whiteRe);\n\n                // Get the tag value.\n                if (type === '=') {\n                    value = scanner.scanUntil(equalsRe);\n                    scanner.scan(equalsRe);\n                    scanner.scanUntil(closingTagRe);\n                } else if (type === '{') {\n                    value = scanner.scanUntil(closingCurlyRe);\n                    scanner.scan(curlyRe);\n                    scanner.scanUntil(closingTagRe);\n                    type = '&';\n                } else {\n                    value = scanner.scanUntil(closingTagRe);\n                }\n\n                // Match the closing tag.\n                if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n                token = [type, value, start, scanner.pos];\n                tokens.push(token);\n\n                if (type === '#' || type === '^') {\n                    sections.push(token);\n                } else if (type === '/') {\n                    // Check section nesting.\n                    openSection = sections.pop();\n\n                    if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n                    if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n                } else if (type === 'name' || type === '{' || type === '&') {\n                    nonSpace = true;\n                } else if (type === '=') {\n                    // Set the tags for the next time around.\n                    compileTags(value);\n                }\n            }\n\n            // Make sure there are no open sections when we're done.\n            openSection = sections.pop();\n\n            if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n            return nestTokens(squashTokens(tokens));\n        }\n\n        /**\n         * Combines the values of consecutive text tokens in the given `tokens` array\n         * to a single token.\n         */\n        function squashTokens(tokens) {\n            var squashedTokens = [];\n\n            var token, lastToken;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                if (token) {\n                    if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n                        lastToken[1] += token[1];\n                        lastToken[3] = token[3];\n                    } else {\n                        squashedTokens.push(token);\n                        lastToken = token;\n                    }\n                }\n            }\n\n            return squashedTokens;\n        }\n\n        /**\n         * Forms the given array of `tokens` into a nested tree structure where\n         * tokens that represent a section have two additional items: 1) an array of\n         * all tokens that appear in that section and 2) the index in the original\n         * template that represents the end of that section.\n         */\n        function nestTokens(tokens) {\n            var nestedTokens = [];\n            var collector = nestedTokens;\n            var sections = [];\n\n            var token, section;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                switch (token[0]) {\n                    case '#':\n                    case '^':\n                        collector.push(token);\n                        sections.push(token);\n                        collector = token[4] = [];\n                        break;\n                    case '/':\n                        section = sections.pop();\n                        section[5] = token[2];\n                        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n                        break;\n                    default:\n                        collector.push(token);\n                }\n            }\n\n            return nestedTokens;\n        }\n\n        /**\n         * A simple string scanner that is used by the template parser to find\n         * tokens in template strings.\n         */\n        function Scanner(string) {\n            this.string = string;\n            this.tail = string;\n            this.pos = 0;\n        }\n\n        /**\n         * Returns `true` if the tail is empty (end of string).\n         */\n        Scanner.prototype.eos = function eos() {\n            return this.tail === '';\n        };\n\n        /**\n         * Tries to match the given regular expression at the current position.\n         * Returns the matched text if it can match, the empty string otherwise.\n         */\n        Scanner.prototype.scan = function scan(re) {\n            var match = this.tail.match(re);\n\n            if (!match || match.index !== 0) return '';\n\n            var string = match[0];\n\n            this.tail = this.tail.substring(string.length);\n            this.pos += string.length;\n\n            return string;\n        };\n\n        /**\n         * Skips all text until the given regular expression can be matched. Returns\n         * the skipped string, which is the entire tail if no match can be made.\n         */\n        Scanner.prototype.scanUntil = function scanUntil(re) {\n            var index = this.tail.search(re),\n                match;\n\n            switch (index) {\n                case -1:\n                    match = this.tail;\n                    this.tail = '';\n                    break;\n                case 0:\n                    match = '';\n                    break;\n                default:\n                    match = this.tail.substring(0, index);\n                    this.tail = this.tail.substring(index);\n            }\n\n            this.pos += match.length;\n\n            return match;\n        };\n\n        /**\n         * Represents a rendering context by wrapping a view object and\n         * maintaining a reference to the parent context.\n         */\n        function Context(view, parentContext) {\n            this.view = view;\n            this.cache = { '.': this.view };\n            this.parent = parentContext;\n        }\n\n        /**\n         * Creates a new context using the given view with this context\n         * as the parent.\n         */\n        Context.prototype.push = function push(view) {\n            return new Context(view, this);\n        };\n\n        /**\n         * Returns the value of the given name in this context, traversing\n         * up the context hierarchy if the value is absent in this context's view.\n         */\n        Context.prototype.lookup = function lookup(name) {\n            var cache = this.cache;\n\n            var value;\n            if (cache.hasOwnProperty(name)) {\n                value = cache[name];\n            } else {\n                var context = this,\n                    names,\n                    index,\n                    lookupHit = false;\n\n                while (context) {\n                    if (name.indexOf('.') > 0) {\n                        value = context.view;\n                        names = name.split('.');\n                        index = 0;\n\n                        /**\n                         * Using the dot notion path in `name`, we descend through the\n                         * nested objects.\n                         *\n                         * To be certain that the lookup has been successful, we have to\n                         * check if the last object in the path actually has the property\n                         * we are looking for. We store the result in `lookupHit`.\n                         *\n                         * This is specially necessary for when the value has been set to\n                         * `undefined` and we want to avoid looking up parent contexts.\n                         **/\n                        while (value != null && index < names.length) {\n                            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);\n\n                            value = value[names[index++]];\n                        }\n                    } else {\n                        value = context.view[name];\n                        lookupHit = hasProperty(context.view, name);\n                    }\n\n                    if (lookupHit) break;\n\n                    context = context.parent;\n                }\n\n                cache[name] = value;\n            }\n\n            if (isFunction(value)) value = value.call(this.view);\n\n            return value;\n        };\n\n        /**\n         * A Writer knows how to take a stream of tokens and render them to a\n         * string, given a context. It also maintains a cache of templates to\n         * avoid the need to parse the same template twice.\n         */\n        function Writer() {\n            this.cache = {};\n        }\n\n        /**\n         * Clears all cached templates in this writer.\n         */\n        Writer.prototype.clearCache = function clearCache() {\n            this.cache = {};\n        };\n\n        /**\n         * Parses and caches the given `template` and returns the array of tokens\n         * that is generated from the parse.\n         */\n        Writer.prototype.parse = function parse(template, tags) {\n            var cache = this.cache;\n            var tokens = cache[template];\n\n            if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);\n\n            return tokens;\n        };\n\n        /**\n         * High-level method that is used to render the given `template` with\n         * the given `view`.\n         *\n         * The optional `partials` argument may be an object that contains the\n         * names and templates of partials that are used in the template. It may\n         * also be a function that is used to load partial templates on the fly\n         * that takes a single argument: the name of the partial.\n         */\n        Writer.prototype.render = function render(template, view, partials) {\n            var tokens = this.parse(template);\n            var context = view instanceof Context ? view : new Context(view);\n            return this.renderTokens(tokens, context, partials, template);\n        };\n\n        /**\n         * Low-level method that renders the given array of `tokens` using\n         * the given `context` and `partials`.\n         *\n         * Note: The `originalTemplate` is only ever used to extract the portion\n         * of the original template that was contained in a higher-order section.\n         * If the template doesn't use higher-order sections, this argument may\n         * be omitted.\n         */\n        Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {\n            var buffer = '';\n\n            var token, symbol, value;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                value = undefined;\n                token = tokens[i];\n                symbol = token[0];\n\n                if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);\n\n                if (value !== undefined) buffer += value;\n            }\n\n            return buffer;\n        };\n\n        Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {\n            var self = this;\n            var buffer = '';\n            var value = context.lookup(token[1]);\n\n            // This function is used to render an arbitrary template\n            // in the current context by higher-order sections.\n            function subRender(template) {\n                return self.render(template, context, partials);\n            }\n\n            if (!value) return;\n\n            if (isArray(value)) {\n                for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n                    buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n                }\n            } else if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === 'object' || typeof value === 'string' || typeof value === 'number') {\n                buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n            } else if (isFunction(value)) {\n                if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n                // Extract the portion of the original template that the section contains.\n                value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n                if (value != null) buffer += value;\n            } else {\n                buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n            }\n            return buffer;\n        };\n\n        Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {\n            var value = context.lookup(token[1]);\n\n            // Use JavaScript's definition of falsy. Include empty arrays.\n            // See https://github.com/janl/mustache.js/issues/186\n            if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);\n        };\n\n        Writer.prototype.renderPartial = function renderPartial(token, context, partials) {\n            if (!partials) return;\n\n            var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n            if (value != null) return this.renderTokens(this.parse(value), context, partials, value);\n        };\n\n        Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return value;\n        };\n\n        Writer.prototype.escapedValue = function escapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return mustache.escape(value);\n        };\n\n        Writer.prototype.rawValue = function rawValue(token) {\n            return token[1];\n        };\n\n        mustache.name = 'mustache.js';\n        mustache.version = '2.3.0';\n        mustache.tags = ['{{', '}}'];\n\n        // All high-level mustache.* functions use this writer.\n        var defaultWriter = new Writer();\n\n        /**\n         * Clears all cached templates in the default writer.\n         */\n        mustache.clearCache = function clearCache() {\n            return defaultWriter.clearCache();\n        };\n\n        /**\n         * Parses and caches the given template in the default writer and returns the\n         * array of tokens it contains. Doing this ahead of time avoids the need to\n         * parse templates on the fly as they are rendered.\n         */\n        mustache.parse = function parse(template, tags) {\n            return defaultWriter.parse(template, tags);\n        };\n\n        /**\n         * Renders the `template` with the given `view` and `partials` using the\n         * default writer.\n         */\n        mustache.render = function render(template, view, partials) {\n            if (typeof template !== 'string') {\n                throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n            }\n\n            return defaultWriter.render(template, view, partials);\n        };\n\n        // This is here for backwards compatibility with 0.4.x.,\n        /*eslint-disable */ // eslint wants camel cased function name\n        mustache.to_html = function to_html(template, view, partials, send) {\n            /*eslint-enable*/\n\n            var result = mustache.render(template, view, partials);\n\n            if (isFunction(send)) {\n                send(result);\n            } else {\n                return result;\n            }\n        };\n\n        // Export the escaping function so that the user may override it.\n        // See https://github.com/janl/mustache.js/issues/244\n        mustache.escape = escapeHtml;\n\n        // Export these mainly for testing, but also for advanced usage.\n        mustache.Scanner = Scanner;\n        mustache.Context = Context;\n        mustache.Writer = Writer;\n\n        return mustache;\n    });\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */\nreturn okanjo;\n}));\n","\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nconst okanjo = (function(window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    const SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    const CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    const AGENT = window.navigator.userAgent;\n    const ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    const MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    const NOOP = () => {};\n    const Console = window.console;\n\n    // Place to pull defaults, if already set\n    const settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    const okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"%%OKANJO_VERSION\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: (...args) => {\n            let err = args.find((arg) => arg instanceof Error);\n            if (!err) {\n                let messageIndex = args.findIndex((arg) => typeof arg === \"string\");\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                let stack = (new Error()).stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter((a) => a !== err);\n            }\n\n            Console.error(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: (message, ...args) => {\n            const err = new Error(message);\n\n            Console.warn(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: (selector, parent) => {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/ads',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: (route, params, env) => {\n            if (params) {\n                Object.keys(params).forEach((key) => {\n                    route = route.replace(`:${key}`, params[key]+\"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: (val) => val === null || val === undefined || (typeof val === \"string\" && val.trim().length === 0),\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: () => {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: (includeHashArguments) => {\n\n            const split = (query) => {\n                query = query || \"\";\n                const params = {};\n                const parts = query.split('&');\n                parts.forEach((part) => {\n                    const eqIndex = part.indexOf('=');\n                    let key, value;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            const queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            const hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach((key) => queryArgs[key] = hashArgs[key]);\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = (mixed, out) => {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map((val) => okanjo.util.deepClone(val)));\n        } else if (typeof mixed === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach((key) => {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = (input, options = {}) => {\n        const output = {};\n\n        if (input !== undefined && input !== null) {\n            Object\n                .keys(input)\n                .forEach((key) => {\n                    // Convert object ids to hex strings\n                    if (input[key] instanceof Date) {\n                        if (options.dateToIso) {\n                            output[key] = input[key].toISOString(); // convert to iso\n                        } else {\n                            output[key] = input[key]; // as-is\n                        }\n                    } else if (typeof input[key] === 'object' && input[key] !== null) {\n                        // Allow ignoring arrays if desired\n                        if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                            output[key] = input[key];\n                        } else {\n                            // Make child objects flat too (always returns object so Object.keys is safe)\n                            const childObject = okanjo.util.flatten(input[key], options);\n                            Object\n                                .keys(childObject)\n                                .forEach((childKey) => {\n                                    output[key + '_' + childKey] = childObject[childKey];\n                                })\n                            ;\n                        }\n                    } else {\n                        // Copy value references\n                        output[key] = input[key];\n                    }\n                })\n            ;\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = (function(clusterWorkerId) {\n\n        const shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n\n            crypto = window.crypto || window.msCrypto || (typeof require === \"function\" && require('crypto')),\n\n            randomByte = () => {\n                /* istanbul ignore next: platform diffs out of scope */\n                if (crypto && crypto.randomBytes) {\n                    return crypto.randomBytes(1)[0] & 0x30;\n                } else if (!crypto || !crypto.getRandomValues) {\n                    return Math.floor(Math.random() * 256) & 0x30;\n                }\n                /* istanbul ignore next: platform diffs out of scope */\n                const dest = new Uint8Array(1);\n                /* istanbul ignore next: platform diffs out of scope */\n                crypto.getRandomValues(dest);\n                /* istanbul ignore next: platform diffs out of scope */\n                return dest[0] & 0x30;\n            },\n\n            encode = (number) => {\n                let loopCounter = 0,\n                    done,\n                    str = '';\n\n                while (!done) {\n                    str = str + shuffled[ ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() ];\n                    done = number < (Math.pow(16, loopCounter + 1 ) );\n                    loopCounter++;\n                }\n                return str;\n            },\n\n            // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n            // This number should be updated every year or so to keep the generated id short.\n            // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n            REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        let counter,\n            previousSeconds;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function() {\n            let str = '',\n                seconds = Math.floor(((new Date()).getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    })();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: () => {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: (element, includeMargin) => {\n            const size = {\n                height: element.offsetHeight,\n                width : element.offsetWidth\n            };\n            const style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: () => {\n            const body = document.querySelector('body');\n            const html = document.documentElement;\n\n            return {\n                w: Math.max(\n                    body.scrollWidth,\n                    body.offsetWidth,\n                    html.clientWidth,\n                    html.scrollWidth,\n                    html.offsetWidth\n                ),\n\n                h: Math.max(\n                    body.scrollHeight,\n                    body.offsetHeight,\n                    html.clientHeight,\n                    html.scrollHeight,\n                    html.offsetHeight\n                )\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: () => {\n            const element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */: document.body;\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            const inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            const isMobileZoom = (inWidth && width > inWidth) || (inHeight && height > inHeight);\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: (event) => {\n            const ex = event.pageX;\n            const ey = event.pageY;\n            const body = document.body;\n            const el = document.documentElement;\n            const scrollLeft = 'scrollLeft';\n            const scrollTop = 'scrollTop';\n            const type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: (element) => {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            const err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                let rect = element.getBoundingClientRect();\n                let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    x1: rect.left + pos.x,\n                    y1: rect.top + pos.y,\n                    x2: rect.right + pos.x,\n                    y2: rect.bottom + pos.y\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0\n                };\n            }\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function(element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        const parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        let text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000, // Safety switch to bust out of the loop in the event something goes terribly wrong\n            replacer = (match) => {\n                /* istanbul ignore next: n/a to jsdom */\n                replacedText = match.substr(0, match.length-3) + replacedText;\n                /* istanbul ignore next: n/a to jsdom */\n                return '...';\n            };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && (safety-- > 0)) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            let content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class','okanjo-ellipses');\n            span.setAttribute('class','okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length-3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length-3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n\n})(window, document);","\"use strict\";\n\n(function(window) {\n\n    const JSON_TEST = /^application\\/json/;\n    const okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        const req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        let calledBack = false;\n\n        // Normalized done handler\n        const done = function(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function(e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function(e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    let res;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST','PUT','PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    const encode = (val) => {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent(''+val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    const getKey = (key, keyPrefix) => {\n        if (keyPrefix) {\n            return `${keyPrefix}[${encode(key)}]`;\n        } else {\n            return encode(key)\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = (obj, keyPrefix) => {\n        let pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach((v) => pairs.push(getKey(key, keyPrefix) + '=' + encode(v))); // Does not do that PHP garbage with key[]=val\n            } else if (typeof value === \"object\" && value !== null) {\n                // Recurse\n                let res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: (cookieName, value, expireDays) => {\n            const expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            const expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            const path = \" Path=/\";\n            const cookieValue = `${encodeURI(value)};${expires}${path}`;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: (cookieName) => {\n            let output = null;\n            document.cookie\n                .split(\";\")\n                .find((cookie) => {\n                    let nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                    let value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                    if (nameTest === cookieName) {\n                        output = decodeURI(value);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                })\n            ;\n            return output;\n        }\n    };\n\n})(window, document);","\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n    class TemplateEngine {\n\n        constructor() {\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n        registerTemplate(name, template, beforeRender, options) {\n\n            if (typeof template === \"object\") {\n                //noinspection JSValidateTypes\n                if (template.nodeType === undefined) {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                } else {\n                    template = template.innerHTML;\n                    okanjo.lib.Mustache.parse(template);\n                }\n            } else if (typeof template !== \"string\") {\n                throw new Error('Parameter template must be a string or a DOM element');\n            }\n\n            // Shift options if only have 3 params\n            if (arguments.length === 3 && typeof beforeRender === \"object\") {\n                options = beforeRender;\n                beforeRender = null;\n            } else {\n                options = options || {};\n            }\n\n            if (beforeRender && typeof beforeRender !== \"function\") {\n                throw new Error('Parameter beforeRender must be a function');\n            }\n\n            // Assign the template\n            this._templates[name] = {\n                markup: template,\n                options,\n                beforeRender\n            };\n        }\n\n        /**\n         * Registers a CSS payload for use\n         * @param name\n         * @param css\n         * @param options\n         */\n        registerCss(name, css, options) {\n            options = options || {};\n\n            if (typeof css === \"object\") {\n                //noinspection JSValidateTypes\n                if (css.nodeType === undefined) {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n            } else if (typeof css !== \"string\") {\n                throw new Error('Parameter css must be a string or a DOM element');\n            }\n\n            this._css[name] = {\n                markup: css,\n                options: options\n            };\n        }\n\n        /**\n         * Checks whether a template is registered\n         * @param name\n         * @return {boolean}\n         */\n        isTemplateRegistered(name) {\n            return !!this._templates[name];\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Checks whether a CSS payload is registered\n         * @param name\n         * @return {boolean}\n         */\n        isCssRegistered(name) {\n            return !!this._css[name];\n        }\n\n        /**\n         * Ensures that a CSS payload has been added to the DOM\n         * @param name\n         */\n        ensureCss(name) {\n            if (this._css[name]) {\n                //noinspection JSValidateTypes\n                const css = this._css[name],\n                    id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                // Check for css element on page, if we have an ID to look for\n                if (id) {\n                    const element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                    if (!element) {\n                        const head = document.head,\n                            style = document.createElement('style');\n\n                        style.id = id;\n                        style.setAttribute('type', 'text/css');\n\n                        /* istanbul ignore else: old ie */\n                        if (style.hasOwnProperty) { // old ie\n                            style.innerHTML = css.markup;\n                        } else {\n                            style.styleSheet.cssText = css.markup;\n                        }\n\n                        if (head) {\n                            head.appendChild(style);\n                        } else {\n                            // NO HEAD, just prepend to body then\n                            const body = document.body;\n                            if (body) {\n                                body.appendChild(style);\n                            } else {\n                                // And if this doesn't work, just give up\n                                okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                            }\n                        }\n                    }\n                }\n            } else {\n                okanjo.report('Attempted to add CSS template \"'+name+'\" to the DOM, however it does not appear to be registered?');\n            }\n        }\n\n        /**\n         * Renders a template and returns the markup\n         * @param templateName\n         * @param context\n         * @param model\n         * @return {string}\n         */\n        render(templateName, context, model) {\n\n            model = model || {};\n            const template = this._templates[templateName];\n\n            // If there's a data controller closure set, and if so, run the data through there\n            if (template.beforeRender) {\n                model = template.beforeRender.call(context, model);\n            }\n\n            // Attach globals\n            model.okanjo = okanjo;\n            model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//,''); // Url w/o scheme to prevent mixed-content warnings\n            model.now = function() { return (new Date()).getTime(); };\n            model.classDetects = this.classDetects;\n\n            //noinspection JSUnresolvedVariable\n            if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                model.classDetects += \" \" + model.blockClasses.join(' ');\n                delete model.blockClasses;\n            }\n\n            // Add CSS unless we are told not to\n            if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                template.options.css.forEach((css) => this.ensureCss(css));\n                delete model.css;\n            }\n\n            // Render the template and return the result\n            return okanjo.lib.Mustache.render(template.markup, model);\n        }\n\n    }\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n    TemplateEngine.formatCurrency = (value, decimals=2, decimalSeparator='.', thousandsSeparator=',') => {\n        const s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        let j = i.length;\n        j = (j) > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    /*\n\n     div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n\n     */\n\n    const okanjo = window.okanjo;\n    const IS_MOBILE = okanjo.util.isMobile();\n\n    let initialized = false,\n        // scrollY = null,\n\n        // Selectors\n        $html, $body, $modalContainer, $modalWindow, $modalSkin, $modalOuter, $modalInner, $modalClose, $modalFrame,\n\n        createElements = function() {\n\n            // Page elements\n            //noinspection JSUnresolvedFunction\n            $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n            //noinspection JSUnresolvedFunction\n            $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n            // Modal elements\n            $modalContainer = document.createElement('div');\n            $modalWindow = document.createElement('div');\n            $modalSkin = document.createElement('div');\n            $modalOuter = document.createElement('div');\n            $modalInner = document.createElement('div');\n            $modalClose = document.createElement('div');\n            $modalFrame = document.createElement('iframe');\n\n            $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n            $modalWindow.setAttribute('class', 'okanjo-modal-window');\n            $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n            $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n            $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n            $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n            $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n            $modalFrame.setAttribute('frameborder', '0');\n            $modalFrame.setAttribute('vspace', '0');\n            $modalFrame.setAttribute('hspace', '0');\n            $modalFrame.setAttribute('webkitallowfullscreen', '');\n            $modalFrame.setAttribute('mozallowfullscreen', '');\n            $modalFrame.setAttribute('allowfullscreen', '');\n            $modalFrame.setAttribute('scrolling', 'auto');\n\n            $modalClose.innerHTML = '×';\n\n            // Create the modal element tree\n            $modalInner.appendChild($modalFrame);\n            $modalOuter.appendChild($modalInner);\n            $modalSkin.appendChild($modalOuter);\n            $modalWindow.appendChild($modalSkin);\n            $modalWindow.appendChild($modalClose);\n            $modalContainer.appendChild($modalWindow);\n\n            // Add the modal stuff to the body\n            $body.appendChild($modalContainer);\n        },\n\n        addListener = function(el, event, handler) {\n            /* istanbul ignore else: old browsers */\n            if (el.addEventListener) {\n                el.addEventListener(event, handler, false);\n            } else {\n                el.attachEvent(\"on\" + event, handler);\n            }\n        },\n\n        getWindowHeight = function() {\n            return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n        },\n\n        handleReposition = function() {\n            // scrollY = okanjo.ui.getScrollPosition().y;\n            //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n            $modalWindow.style.height = (getWindowHeight() - 80) + \"px\";\n        },\n\n        bindEvents = function() {\n\n            // If the device orientation changes, adjust the modal view port\n            addListener(window, 'orientationchange', function() {\n                for (let t = 0; t < 2; t++) {\n                    setTimeout(handleReposition, 1000 * t + 10);\n                }\n            });\n\n            // If the window changes size, also adjust the modal view port\n            addListener(window, 'resize', function() {\n                setTimeout(handleReposition, 100);\n            });\n\n            // Click the overlay to close the modal\n            addListener($modalContainer, 'click', closeModal);\n\n            // If you click in the modal, don't close it!\n            addListener($modalWindow, 'click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Click the close button to close it\n            addListener($modalClose, 'click', function(e) {\n\n                // Don't close it twice\n                e.preventDefault();\n                e.stopPropagation();\n\n                closeModal();\n            });\n\n        },\n\n        //removeListener = function(el, event, handler) {\n        //    if (el.removeEventListener) {\n        //        el.removeEventListener(event, handler);\n        //    } else {\n        //        el.detachEvent(\"on\" + event, handler);\n        //    }\n        //},\n\n        addClass = function(el, name) {\n            el.className += \" \" + name;\n        },\n\n        removeClass = function(el, name) {\n            el.className = el.className.replace(new RegExp(' *?'+name), '');\n        },\n\n        openModal = function() {\n\n            // scrollY = document.body.scrollTop;\n\n            removeClass($modalContainer, 'okanjo-modal-hidden');\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            handleReposition();\n\n            addClass($html, \"okanjo-modal-active\");\n\n            if (!IS_MOBILE) {\n                addClass($html, \"okanjo-modal-margin-fix\");\n            }\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n            }, 10);\n\n            // Click the overlay to close the modal\n            //addListener($body, 'click', closeModal);\n\n        },\n\n        closeModal = function() {\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n                addClass($modalContainer, \"okanjo-modal-hidden\");\n\n                removeClass($html, \"okanjo-modal-active\");\n                if (!IS_MOBILE) {\n                    removeClass($html, \"okanjo-modal-margin-fix\");\n                }\n            }, 210);\n\n            // Click the overlay to close the modal\n            //removeListener($body, 'click', closeModal);\n        },\n\n        /**\n         * Insert an element or markup into the modal\n         * @param content\n         */\n        setContent = function(content) {\n\n            // Remove existing content\n            $modalInner.innerHTML = \"\";\n\n            // Insert new content\n            if (typeof content === \"string\") {\n                $modalInner.innerHTML = content;\n            } else {\n                $modalInner.appendChild(content);\n            }\n        };\n\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n    class Metrics {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n        _getStoredQueue() {\n            if (window.localStorage[Metrics.Params.queue]) {\n                try {\n                    let queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                    if (Array.isArray(queue)) {\n                        return queue;\n                    } else {\n                        okanjo.report('Stored queue is not a queue', {queue});\n                        return [];\n                    }\n                } catch (e) {\n                    okanjo.report('Failed to load metric queue from storage', {err: e});\n                    return [];\n                }\n            } else {\n                // not stored\n                return [];\n            }\n        }\n\n        /**\n         * Updates the queue stored in storage, in the event we can't complete our submissions\n         * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n         * @private\n         */\n        _saveQueue(delay) {\n            if (delay) {\n                if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                this._saveQueueTimeout = setTimeout(() => {\n                    this._saveQueue(false);\n                    this._saveQueueTimeout = null;\n                }, 100);\n            } else {\n                window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n            }\n        }\n\n        /**\n         * Extract contextual pass-through data from the URL, if present\n         * @private\n         */\n        _checkUrlForReferral() {\n            const pageArgs = okanjo.util.getPageArguments(true),\n                urlSid = pageArgs[Metrics.Params.name],\n                localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name), // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                sourceChannel = pageArgs[Metrics.Params.channel];\n\n            // If for some reason, both are set, record the incident as a possible correlation\n            if (urlSid && localSid && urlSid !== localSid) {\n                this.trackEvent({\n                    object_type: Metrics.Object.metric_session,\n                    event_type: Metrics.Event.correlation,\n                    id: urlSid+\"_\"+localSid,\n                    ch: this.defaultChannel,\n                    _noProcess: true\n                });\n            }\n\n            // Update local values\n            this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n            this.sourceCh = sourceChannel || null;\n            this.sourceCx = sourceContext || null;\n        }\n\n        /**\n         * Submits an individual event metric\n         * @param event\n         * @param callback\n         */\n        trackEvent(event, callback) {\n            // Ensure the event contains the required fields\n            if (!event.object_type || !event.event_type) {\n                okanjo.report('Invalid metric to track (missing object_type or event_type)', {event});\n                return;\n            }\n\n            // Queue the event for publishing\n            this._push(event, callback);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Submits a page view metric\n         * @param event\n         * @param callback\n         */\n        trackPageView(event, callback) {\n            event = event || {};\n            event.object_type = Metrics.Object.page;\n            event.event_type = Metrics.Event.view;\n            event.id = event.id || window.location.href;\n            event.ch = event.ch || this.defaultChannel;\n\n            // Queue the event for publishing\n            this.trackEvent(event, callback);\n        }\n\n        /**\n         * Adds an event to the queue\n         * @param event\n         * @param callback\n         * @private\n         */\n        _push(event, callback) {\n            this._queue.push({ event, callback });\n\n            // Save the queue\n            this._saveQueue(true);\n\n            // Start burning down the queue, unless the event says not to\n            if (event._noProcess) {\n                delete event._noProcess;\n            } else {\n                this._processQueue();\n            }\n        }\n\n        /**\n         * Burn down the queue\n         * @private\n         */\n        _processQueue() {\n            // If the queue is not already being processed, and there's stuff to process, continue sending them\n            if (!this._processTimeout && this._queue.length > 0) {\n                this._processTimeout = setTimeout(() => {\n\n                    // Pull the items we're going to batch out of the queue\n                    const items = this._queue.splice(0, 255);\n                    this._saveQueue(false);\n\n                    // Track the item\n                    this._batchSend(items, (err, res) => {\n                        // TODO: If there was an error, consider splicing the batch back into the queue\n\n                        // Update / Set the metric sid on the publisher\n                        /* istanbul ignore else: server barks */\n                        if (res && res.data && res.data.sid) this._updateSid(res.data.sid);\n\n                        // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                        this._processTimeout = null;\n                        this._processQueue();\n\n                        // Fire the event callbacks if there are any\n                        items.forEach((item) => {\n                            item.callback && item.callback(err, res);\n                        });\n                    });\n\n                }, 0); // break event loop, maybe\n            }\n        }\n\n        /**\n         * Sends a bunch of queued metric events\n         * @param items\n         * @param callback\n         * @private\n         */\n        _batchSend(items, callback) {\n\n            // Normalize event data\n            const events = items.map((item) => {\n                this._normalizeEvent(item.event);\n                return item.event;\n            });\n\n            const payload = {\n                events\n            };\n\n            const route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n            // Set sid if present\n            if (this.sid) {\n                payload.sid = this.sid;\n            }\n\n            // Send it\n            okanjo.net.request.post(\n                route,\n                payload,\n                (err, res) => {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err, res, items, route });\n                    }\n                    callback && callback(err, res);\n                }\n            );\n        }\n\n        /**\n         * Normaizes events so that they contain consistent data values\n         * @param event\n         * @private\n         */\n        _normalizeEvent(event) {\n\n            // Ensure meta is ready to receive values\n            event.m = event.m || {};\n\n            // Set key\n            event.key = event.key || event.m.key || okanjo.key || undefined;\n\n            // Set session\n            if (this.sid) event.sid = this.sid;\n\n            // Clone the metadata, since it might be a direct reference to a widget property\n            // Deleting properties on the meta object could be very destructive\n            event.m = Object.assign({}, event.m); // event.m should be flat\n\n            // Strip meta keys that should be excluded\n            Object.keys(Metrics.Meta.exclude).forEach((key) => delete event.m[key]);\n\n            // Set referral channel / context\n            if (this.sourceCh) { event.m.ref_ch = this.sourceCh; }\n            if (this.sourceCx) { event.m.ref_cx = this.sourceCx; }\n\n            // Set page group id\n            event.m.pgid = this.pageId;\n\n            // Set okanjo version\n            event.m.ok_ver = okanjo.version;\n\n            // Finalize metadata\n            event.m = okanjo.util.flatten(event.m);\n\n            // Set page source reference\n            if (document.referrer) {\n                event.ref = document.referrer;\n            }\n        }\n\n        /**\n         * Updates the stored session identifier\n         * @param sid\n         * @private\n         */\n        _updateSid(sid) {\n            if (!this.sid && sid) {\n                this.sid = sid;\n                window.localStorage[Metrics.Params.name] = sid;\n                okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @param event\n         * @return {*|{}}\n         */\n        static addElementInfo(element, event) {\n            const page = okanjo.ui.getPageSize(),\n                size = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.pw = page.w;\n            event.m.ph = page.h;\n            event.m.x1 = size.x1;\n            event.m.y1 = size.y1;\n            event.m.x2 = size.x2;\n            event.m.y2 = size.y2;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @param event\n         * @return {*|{}}\n         */\n        static addViewportInfo(event) {\n            const vp = okanjo.ui.getViewportSize(),\n                pos = okanjo.ui.getScrollPosition();\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.vx1 = pos.x;\n            event.m.vy1 = pos.y;\n            event.m.vx2 = pos.x+vp.vw;\n            event.m.vy2 = pos.y+vp.vh;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @param event\n         * @return {*|{}}\n         */\n        static addEventInfo(jsEvent, event) {\n            const pos = okanjo.ui.getEventPosition(jsEvent);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.et = pos.et;\n            event.m.ex = pos.ex;\n            event.m.ey = pos.ey;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param event\n         * @param args\n         * @return {*|{}}\n         */\n        static addEventMeta(event, ...args) {\n            event = event || {};\n            event.m = event.m || {};\n            event.m = Object.assign.apply(Object, [event.m].concat(args));\n            \n            return event;\n        }\n\n        /**\n         * Helper to create a new fluent event structure\n         * @param data\n         * @param args\n         * @return {MetricEvent}\n         */\n        static create(data, ...args) {\n            // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n            return new MetricEvent(data, args);\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Helper to create a new fluent event structure\n         * @param args\n         * @return {*}\n         */\n        create(...args) {\n            return Metrics.create.apply(null, args);\n        }\n\n    }\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key','callback','metrics_channel_context','metrics_context','mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n    class MetricEvent {\n        constructor(data, others) {\n            // Merge the data and other data sets into this object\n            data = data || {};\n            // others = others || []; // the only way to create this right now is via .create ^\n            Object.assign.apply(Object, [this, data].concat(others));\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n        data(data) {\n            Object.assign(this, data);\n            return this;\n        }\n\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @return {MetricEvent}\n         */\n        event(jsEvent) {\n            Metrics.addEventInfo(jsEvent, this);\n            return this;\n        }\n\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @return {MetricEvent}\n         */\n        viewport() {\n            Metrics.addViewportInfo(this);\n            return this;\n        }\n\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @return {MetricEvent}\n         */\n        element(element) {\n            Metrics.addElementInfo(element, this);\n            return this;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param args\n         * @return {MetricEvent}\n         */\n        meta(...args) {\n            Metrics.addEventMeta.apply(null, [this].concat(args));\n            return this;\n        }\n\n        /**\n         * Sets the object and event type on the event w/o having to use .data\n         * @param object_type\n         * @param event_type\n         * @return {MetricEvent}\n         */\n        type(object_type, event_type) {\n            this.object_type = object_type;\n            this.event_type = event_type;\n            return this;\n        }\n\n        /**\n         * Finalizes and sends the event\n         * @param callback\n         */\n        send(callback) {\n            okanjo.metrics.trackEvent(this, callback);\n            // DONT RETURN - BREAK THE CHAIN HERE\n        }\n\n        /**\n         * Gets the single-metric tracking url for this event\n         * @return {string}\n         */\n        toUrl() {\n            // Copy data w/o modifying it\n            const event = Object.assign({}, this);\n\n            // Extract params\n            const {\n                object_type,\n                event_type\n            } = event;\n            delete event.object_type;\n            delete event.event_type;\n\n            // Normalize event data\n            okanjo.metrics._normalizeEvent(event);\n\n            // Get the URL\n            return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type, event_type }) + '?' +\n                okanjo.net.request.stringify(event);\n        }\n    }\n\n    // Export / initialize\n    okanjo.metrics = new Metrics();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function(window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    class EventEmitter {\n\n        constructor() {\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n        on(event, listener) {\n            if (!this._events[event]) {\n                this._events[event] = [];\n            }\n\n            this._events[event].push(listener);\n        }\n\n        /**\n         * Removes an event handler for an event\n         * @param event\n         * @param listener\n         */\n        removeListener(event, listener) {\n\n            if (this._events[event]) {\n                let idx = this._events[event].indexOf(listener);\n                if (idx >= 0) {\n                    this._events[event].splice(idx, 1);\n                }\n            }\n        }\n\n        /**\n         * Emits an event\n         * @param event\n         */\n        emit(event) {\n            let i, listeners, length, args = [].slice.call(arguments, 1);\n\n            if (this._events[event]) {\n                listeners = this._events[event].slice();\n                length = listeners.length;\n\n                for (i = 0; i < length; i++) {\n                    listeners[i].apply(this, args);\n                }\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Registers an event handler to fire only once on an event\n         * @param event\n         * @param listener\n         */\n        once(event, listener) {\n\n            const callback = () => {\n                let args = [].slice.call(arguments, 1);\n                this.removeListener(event, callback);\n                listener.apply(this, args);\n            };\n\n            this.on(event, callback);\n        }\n\n    }\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n    const DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    const DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n    class Widget extends okanjo._EventEmitter {\n\n        constructor(element, options) {\n            super();\n\n            // Verify element was given (we can't load unless we have one)\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: this, element, options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && typeof options !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + typeof options, { widget: this, element, options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            this.name = 'Widget';\n            this.element = element;\n            this.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            this.config = Object.assign({}, options);\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n        init() {\n            // process config attributes\n            this._applyConfiguration();\n\n            this._setCompatibilityOptions();\n\n            // ensure placement key\n            if (!this._ensurePlacementKey()) return;\n\n            // Tell the widget to load\n            this.load();\n        }\n\n        /**\n         * This is for extended widgets, so they may modify the configuration before loading\n         */\n        _setCompatibilityOptions() {\n            // By default, this does nothing. Must be overridden to be useful\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Widget configuration definitions\n         * @return {{}}\n         */\n        getSettings() {\n            // Override this\n            return {};\n        }\n\n        /**\n         * Main widget load function.\n         */\n        load() {\n            // Override this in the widget implementation\n        }\n\n        /**\n         * Applies data attribute settings and defaults to the widget configuration\n         * @private\n         */\n        _applyConfiguration() {\n\n            // this.config was set to the options provided in the constructor\n            // so layer data attributes on top\n\n            const data = this.getDataAttributes();\n            const settings = this.getSettings();\n            Object\n                .keys(data)\n                .forEach((key) => {\n                    let normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    let val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        this.config[normalizedKey] = val;\n                    }\n                })\n            ;\n\n            // Apply defaults from the widget settings\n            Object.keys(settings).forEach((key) => {\n                if (this.config[key] === undefined && settings[key]._default !== undefined) {\n                    this.config[key] = settings[key].value(undefined, false);\n                }\n            });\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets a copy of the configuration, suitable for transmission\n         * @return {{}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = {};\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let group = null;\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        /**\n         * Before loading, ensure that a placement key is present or abort\n         * @return {boolean}\n         * @private\n         */\n        _ensurePlacementKey() {\n\n            // Check if set on widget or globally\n            if (this.config.key) {\n                return true;\n            } else if (okanjo.key) {\n                // Copy key from global scope,\n                this.config.key = okanjo.key;\n                return true;\n            }\n\n            // No key set, can't load.\n            okanjo.report('No key provided on widget', { widget: this });\n            this.showError('Error: Missing placement key.');\n            return false;\n        }\n\n        /**\n         * Displays an error in the widget element\n         * @param message\n         */\n        showError(message) {\n            this.setMarkup(okanjo.ui.engine.render(\n                'okanjo.error',\n                this,\n                { message }\n            ));\n        }\n\n        /**\n         * Sets the markup of the widget's element\n         * @param markup\n         */\n        setMarkup(markup) {\n            this.element.innerHTML = markup;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the current page URL, sans query string and fragment.\n         * @returns {string} - URL\n         */\n        static getCurrentPageUrl() {\n            return window.location.href.replace(/([?#].*)$/, '');\n        }\n\n        /**\n         * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n         * @returns {*}\n         */\n        getDataAttributes() {\n            const data = {};\n                Array\n                    .from(this.element.attributes)\n                    .forEach((attr) => {\n                        const match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                        if (match) {\n                            data[match[1]] = attr.value;\n                        }\n                    });\n            return data;\n        }\n\n    }\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n    Widget.Field = class Field {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n        array(converter) {\n            this._convert = (val) => {\n                if (Array.isArray(val)) {\n                    if (converter) {\n                        return val.map((v) => converter(v))\n                    } else {\n                        return val;\n                    }\n                }\n                val = val.replace(/\\\\,/g, '\\0');\n                return val.split(',').map((v) => {\n                    let res = v.trim().replace('\\0', ',');\n                    if (converter) res = converter(res);\n                    return res;\n                });\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static array(converter) { return (new Field()).array(converter); }\n\n        /**\n         * Formats the value as a string\n         * @return {Field}\n         */\n        string() {\n            this._convert = (val) => {\n                if (val === null || val === undefined) return val;\n                else return \"\"+val;\n            };\n            return this;\n        }\n        static string() { return (new Field()).string(); }\n\n        /**\n         * Formats the value as a boolean (takes 1, 0, true, false)\n         * @return {Field}\n         */\n        bool() {\n            this._convert = (val) => {\n                if (typeof val === \"string\") {\n                    return (val === \"1\" || val.toLowerCase() === \"true\");\n                } else {\n                    return !!val;\n                }\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static bool() { return (new Field()).bool(); }\n\n        /**\n         * Indicates the field should not be passed on for transmission\n         * @return {Field}\n         */\n        strip() { this._strip = true; return this; }\n        static strip() { return (new Field()).strip(); }\n\n        /**\n         * Formats the value as a integer (whole) number\n         * @return {Field}\n         */\n        int() { this._convert = (val) => parseInt(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static int() { return (new Field()).int(); }\n\n        /**\n         * Formats the value as a floating point number\n         * @return {Field}\n         */\n        float() { this._convert = (val) => parseFloat(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static float() { return (new Field()).float(); }\n\n        //noinspection ReservedWordAsName\n        /**\n         * Sets the default value to use if not set\n         * @param val\n         * @return {Field}\n         */\n        default(val) {\n            this._default = val;\n            return this;\n        }\n\n        /**\n         * Assigns the property to a bucket for hierarchy\n         * @param name\n         * @return {Field}\n         */\n        group(name) {\n            this._group = name;\n            return this;\n        }\n\n        /**\n         * Gets the group the field belongs to\n         * @return {*|null}\n         */\n        getGroup() {\n            return this._group;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the formatted value of the field\n         * @param val\n         * @param strip\n         * @return {*}\n         */\n        value(val, strip=true) {\n            if (this._strip && strip) return undefined;\n            if (val !== undefined && this._convert) {\n                val = this._convert(val);\n            }\n            return val !== undefined ? val : this._default;\n        }\n\n    };\n\n    // Export\n    return okanjo._Widget = Widget;\n\n})(window);\n\n\n\n","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    //region Imports and Constants\n\n    const okanjo = window.okanjo;\n    const { string, array, float, int, bool } = okanjo._Widget.Field;\n    const Metrics = okanjo.metrics.constructor;\n    const TemplateEngine = okanjo.ui.engine.constructor;\n\n    const FILTERS = 'filters';\n    const DISPLAY = 'display';\n    const ARTICLE_META = 'article_meta';\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n    class Placement extends okanjo._Widget {\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        constructor(element, options = {}) {\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n            super(element, options);\n\n            this.name = 'Placement';\n            this._metricBase = {}; // placeholder for metrics\n            this._response = null;\n\n            // Start loading content\n            if (!options.no_init) this.init();\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n        getSettings() {\n            return {\n\n                // What type of response do you want\n                type: string().group(FILTERS),\n\n                // What specific products do you want\n                ids: array().group(FILTERS),\n\n                // Filter by generic query string\n                q: string().group(FILTERS),\n\n                // Filter by relation to content\n                url: string().group(FILTERS),\n                url_referrer: string().group(FILTERS),\n                url_selectors: string().group(FILTERS),\n\n                // Filter by hierarchy\n                organization_id: string().group(FILTERS),\n                property_id: string().group(FILTERS),\n                store_id: string().group(FILTERS),\n\n                // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                organization_name: string().group(FILTERS),\n                property_name: string().group(FILTERS),\n                store_name: string().group(FILTERS),\n\n                // Filter by integrations\n                external_id: string().group(FILTERS),\n                sku: string().group(FILTERS),\n                external_store_id: string().group(FILTERS),\n\n                // Filter by product attributes\n                condition: string().group(FILTERS),\n                manufacturer: string().group(FILTERS),\n                upc: string().group(FILTERS),\n                isbn: string().group(FILTERS),\n\n                // Filter by categorization / distribution\n                tags: array().group(FILTERS),\n                category: array().group(FILTERS),\n                pools: array().group(FILTERS),\n\n                // Filter by price range\n                min_price: float().group(FILTERS),\n                max_price: float().group(FILTERS),\n\n                // Filter by donation ranges\n                min_donation_percent: float().group(FILTERS),\n                max_donation_percent: float().group(FILTERS),\n\n                // Filter by donation recipient\n                donation_to: string().group(FILTERS),\n\n                // Sorting\n                sort_by: string().group(FILTERS),\n                sort_direction: string().group(FILTERS),\n\n                // Pagination\n                skip: int().group(FILTERS),\n                take: int().group(FILTERS),\n\n                // Placement Testing\n                placement_tests_only: bool(),\n\n                // Display settings\n                size: string().group(DISPLAY),\n                template_name: string().group(DISPLAY),\n                template_layout: string().group(DISPLAY),\n                template_theme: string().group(DISPLAY),\n                template_cta_style: string().group(DISPLAY),\n                template_cta_text: string().group(DISPLAY),\n                template_cta_color: string().group(DISPLAY),\n                adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                // Article metadata\n                url_category: array().group(ARTICLE_META),\n                url_keywords: array().group(ARTICLE_META),\n\n                // Functional settings\n                no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                proxy_url: string().strip(),\n                expandable: bool().strip().default(true),\n                disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                backwards: string().strip() // internal flag indicating port from a deprecated widget\n            };\n        }\n\n        /**\n         * Gets the widget configuration formatted using settings, suitable for transmission\n         * @return {{filters: {}, display: {}, backfill: {}, article_meta: {}}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = { filters: {}, display: {}, backfill: {}, article_meta: {} };\n            const backfillPattern = /^backfill_(.+)$/; // backfill_property\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let isBackfill = false;\n                let group = null;\n\n                // Get the property name if it was prefixed with backfill\n                let matches = backfillPattern.exec(origKey);\n                if (matches) {\n                    key = matches[1];\n                    isBackfill = true;\n                }\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = isBackfill ? out.backfill : out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Core load process\n         */\n        load() {\n            // Set metric base data (stub for all future events emitted by the widget)\n            this._setMetricBase();\n\n            // Find out what we should display here\n            this._fetchContent((err) => {\n                if (err) {\n                    // Report the widget load as declined\n                    this._reportWidgetLoad(err);\n                } else {\n                    // Merge display settings from response\n                    this._mergeResponseSettings();\n\n                    // Merge the referential data from the response\n                    this._updateBaseMetaFromResponse();\n\n                    // Handle rendering based on output type\n                    this._showContent();\n                }\n            });\n        }\n\n        //endregion\n\n        //region Internal Helpers\n\n        /**\n         * Initializes the common metric data for events emitted by the placement\n         * @private\n         */\n        _setMetricBase() {\n            const base = this._metricBase;\n            base.ch = Metrics.Channel.placement;\n            base.cx = this.config.backwards || 'auto';\n            base.key = this.config.key;\n            base.m = base.m || {};\n            base.m.wgid = this.instanceId;\n        }\n\n        /**\n         * Emits the widget impression event\n         * @param declined\n         * @private\n         */\n        _reportWidgetLoad(declined) {\n\n            // If this is declined, mark future events as declined too\n            this._metricBase.m.decl = declined || '0';\n\n            // Track impression\n            okanjo.metrics.create(this._metricBase)\n                .type(Metrics.Object.widget, Metrics.Event.impression)\n                .meta(this.getConfig())\n                .element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport()\n                .send();\n        }\n\n        /**\n         * Executes the request for content to fill the placement\n         * @param callback\n         * @private\n         */\n        _fetchContent(callback) {\n            // Build request to api, starting with this placement config params\n            const query = this.getConfig();\n\n            // Extract the key\n            const key = query.key;\n            delete query.key;\n\n            // Attach sid and referrer\n            if (okanjo.metrics.sid) query.sid = okanjo.metrics.msid;\n            query.filters.url_referrer = window.location.href;\n            query.wgid = this.instanceId;\n            query.pgid = okanjo.metrics.pageId;\n\n            // Send it\n            okanjo.net.request.post(\n                `${okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live')}?key=${encodeURIComponent(key)}`,\n                query,\n                (err, res) => {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: this });\n                        this.setMarkup(''); // Don't show anything\n                        this.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        this._response = res;\n\n                        // Hook point for response handling\n                        this.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                }\n            );\n        }\n\n        /**\n         * Applies response filters and display settings into the widget configuration\n         * @private\n         */\n        _mergeResponseSettings() {\n            const res = this._response;\n            const data = res.data || {};\n            const settings = data.settings || {};\n\n            if (settings.filters) {\n                Object.keys(settings.filters).forEach((key) => {\n                    this.config[key] = settings.filters[key];\n                });\n            }\n\n            if (settings.display) {\n                Object.keys(settings.display).forEach((key) => {\n                    this.config[key] = settings.display[key];\n                });\n            }\n        }\n\n        /**\n         * Applies response data to future metric events\n         * @private\n         */\n        _updateBaseMetaFromResponse() {\n            // Update the base metric data with info from the response\n            const data = (this._response|| {}).data || {};\n            this._metricBase.m = this._metricBase.m || {};\n            const meta = this._metricBase.m;\n\n            // Article\n            if (data.article) meta.aid = data.article.id;\n\n            if (data.test) {\n                meta.pten = 1;\n                meta.ptid = data.test.id;\n                meta.ptseed = data.test.seed;\n            } else {\n                meta.pten = 0;\n            }\n        }\n\n        /**\n         * Beings the render process based on the response content\n         * @private\n         */\n        _showContent() {\n            const data = (this._response|| {}).data || {};\n\n            // Known content types we can display\n            if (data.type === Placement.ContentTypes.products) {\n                this._showProducts();\n            } else if (data.type === Placement.ContentTypes.articles) {\n                this._showArticles();\n            } else if (data.type === Placement.ContentTypes.adx) {\n                this._showADX();\n            } else {\n                // Unknown response type!\n\n                // Report the widget load as declined\n                const msg = 'Unknown response content type: ' + data.type;\n                okanjo.report(msg, { placement: this });\n                this.setMarkup(''); // Don't show anything\n                this.emit('error', msg);\n                this._reportWidgetLoad(msg);\n            }\n        }\n\n        /**\n         * Generates the click url using the event, proxy_url, and additional params\n         * @param event\n         * @param url\n         * @param additionalUrlParams\n         * @return {*}\n         * @private\n         */\n        _getClickThroughURL(event, url, additionalUrlParams) {\n            const joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n            // Tack on transfer params\n            additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n            additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n            additionalUrlParams.ok_ch = this._metricBase.ch;\n            additionalUrlParams.ok_cx = this._metricBase.cx;\n\n            url += joiner + Object.keys(additionalUrlParams)\n                    .map((key) => encodeURIComponent(key)+'='+encodeURIComponent(additionalUrlParams[key]))\n                    .join('&');\n\n            // Wrap the url if we're proxying\n            if (this.config.proxy_url) {\n                url = this.config.proxy_url + encodeURIComponent(url);\n            }\n\n            // Set the url on the event\n            event.data({\n                u: url\n            });\n\n            return event.toUrl();\n        }\n\n        /**\n         * Converts a resource's link into one suitable for tracking, making middle-click safe\n         * @param type\n         * @param resource\n         * @param e\n         * @private\n         */\n        _handleResourceMouseDown(type, resource, e) {\n            // Generate a new click id for this event\n            const clickId = okanjo.util.shortid();\n\n            // Start building the event\n            const event = okanjo.metrics.create(this._metricBase, {\n                id: resource.id\n            })\n                .type(type, Metrics.Event.interaction)\n                .meta(this.getConfig())\n                .meta({ cid: clickId })\n                .event(e)\n                .element(e.currentTarget)\n                .viewport();\n\n            // Pull the proper params out of the resource depending on it's type\n            let trackParam = 'url_track_param';\n            let urlParam = 'url';\n\n            if (type === Metrics.Object.product) {\n                trackParam = 'buy_url_track_param';\n                urlParam = 'buy_url';\n            }\n\n            // Attach the campaign tracking identifier\n            const additionalParams = {\n                ok_cid: clickId\n            };\n            if (resource[trackParam]) additionalParams[resource[trackParam]] = (okanjo.metrics.sid || 'unknown') + ':' + clickId;\n\n            // Update the link with the event data\n            event.data({ ea: Metrics.Action.click });\n            e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n            // Cache this on the product\n            resource._clickId = clickId;\n            resource._event = event;\n            resource._additionalParams = additionalParams;\n        }\n\n        /**\n         * Gets the template to use, accounting for configured preference if available\n         * @param contentType\n         * @param defaultName\n         * @return {string}\n         * @private\n         */\n        _getTemplate(contentType, defaultName) {\n            let templateName = this.config.template_name;\n            if (!templateName ||\n                !okanjo.ui.engine.isTemplateRegistered(`${contentType}.${templateName}`)) {\n                templateName = defaultName;\n            }\n            return `${contentType}.${templateName}`;\n        }\n\n        /**\n         * Enforces size/layout/cta restrictions\n         * @private\n         */\n        _enforceLayoutOptions() {\n            // Enforce format restrictions\n            if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n                this.config.template_cta_style = \"link\";\n            } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            }\n        }\n\n        /**\n         * Register a custom\n         * @private\n         */\n        _registerCustomBranding(prefix, buttonClass) {\n            const brandColor = this.config.template_cta_color;\n            if (brandColor) {\n                let brandCSS,\n                    brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                brandCSS = `\n                    ${prefix}-block2.${brandCSSId} ${prefix}-${buttonClass} { color: ${brandColor};} \n                    ${prefix}-block2.${brandCSSId}.okanjo-cta-style-button ${prefix}-${buttonClass} { border: 1px solid ${brandColor}; } \n                    ${prefix}-block2.${brandCSSId}.okanjo-cta-style-button ${prefix}-${buttonClass}:hover { background: ${brandColor}; } \n                `;\n\n                okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                okanjo.ui.engine.ensureCss(brandCSSId);\n            }\n        }\n\n        //endregion\n\n        //region Product Handling\n\n        /**\n         * Renders a product response\n         * @private\n         */\n        _showProducts() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // - render\n\n            // Format products\n            data.results.forEach((offer, index) => {\n                // Disable inline buy if configured to do so\n                if (this.config.disable_inline_buy) offer.inline_buy_url = null;\n                if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                // Set primary image\n                offer._image_url = offer.image_urls ? offer.image_urls[0] : '' ;\n\n                // Escape buy url (fixme: does not include proxy_url!)\n                offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                // Make price tag pretty\n                offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                offer._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break it */\n                if (id && index >= 0) {\n                    const product = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break it */\n                    if (product) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.product, product));\n                        a.addEventListener('click', this._handleProductClick.bind(this, product));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: product.id })\n                            .type(Metrics.Object.product, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({ bf: product.backfill ? 1 : 0 })\n                            .element(a)\n                            .send();\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-product-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the product click process\n         * @param product\n         * @param e\n         * @private\n         */\n        _handleProductClick(product, e) {\n\n            // Update the event\n            if (!product._event || !product._additionalParams || !product._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.product, product, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = product;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Determine what we're doing - native ux or redirect\n            const showNativeBuyUx = !!product.inline_buy_url,\n                showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile()\n            ;\n\n            // Show the inline buy experience or redirect\n            if (showPopupNativeBuyUx) {\n                // Mobile native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                //\n                // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                //\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ popup: 'true' });\n\n                // Get the frame url\n                let url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Open the window or redirect if that failed\n                this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                if (!this._popupFrame) {\n                    // Fallback to just replacing the window with the target, since popups don't work :(\n                    okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                    window.location.href = url;\n                }\n\n            } else if (showNativeBuyUx) {\n                // Regular native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-inline-buy-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto'\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Check whether we're allowed to expand past the bounds of the placement\n                additionalParams.expandable = this.config.expandable ? 1: 0;\n                if (!this.config.expandable) {\n                    const parent = this.element.querySelector('.okanjo-expansion-root');\n                    /* istanbul ignore else: custom templates could break this */\n                    if (parent) {\n                        frame.className += ' okanjo-ad-in-unit';\n                        frame.setAttribute('height', \"100%\");\n                        frame.setAttribute('width', \"100%\");\n\n                        parent.appendChild(frame);\n\n                        const size = okanjo.ui.getElementSize(parent);\n                        additionalParams.frame_height = size.height;\n                        additionalParams.frame_width = size.width;\n                        /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                        if (this.config.size) additionalParams.ad_size = this.config.size;\n                    }\n                }\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                // Set the frame url\n                frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Show the modal if it was not internally expanded\n                if (!frame.parentNode) {\n                    okanjo.ui.modal.show(frame);\n                }\n\n            } else {\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n            }\n        }\n\n        //endregion\n\n        //region Article Handling\n\n        /**\n         * Renders an article response\n         * @private\n         */\n        _showArticles() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // - render\n\n            // Format articles\n            data.results.forEach((article, index) => {\n                // Escape url (fixme: does not include proxy_url!)\n                article._escaped_url = encodeURIComponent(article.url);\n                article._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break this */\n                if (id && index >= 0) {\n                    const article = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break this */\n                    if (article) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.article, article));\n                        a.addEventListener('click', this._handleArticleClick.bind(this, article));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: article.id })\n                            .type(Metrics.Object.article, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({ bf: article.backfill ? 1 : 0 })\n                            .element(a)\n                            .send();\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-article-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the article click process\n         * @param article\n         * @param e\n         * @private\n         */\n        _handleArticleClick(article, e) {\n            // Update the event\n            if (!article._event || !article._additionalParams || !article._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.article, article, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = article;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Update the link a second time, just in case the data changed\n            e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n        }\n\n        //endregion\n\n        //region ADX Handling\n\n        /**\n         * Renders a Google DFP/ADX response\n         * @private\n         */\n        _showADX() {\n            const data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n            // Get the template we should use to render the google ad\n            const templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n            // Determine what size ad we can place here\n            let size = null;\n            if (this.config.size) {\n                if (Placement.Sizes[this.config.size]) {\n                    // Defined size, use these known dimensions\n                    size = Placement.Sizes[this.config.size];\n                } else {\n                    let match = (/^([0-9]+)x([0-9]+)$/i).exec(this.config.size);\n                    if (match) {\n                        size = { width: match[1], height: match[2] }\n                    }\n                }\n            }\n\n            // No given size, we need to guess\n            if (!size) size = Placement.Sizes.default;\n\n\n            // If we're using okanjo's ad slot, then track the impression\n            // otherwise decline it because we're just passing through to the publishers account\n            let adUnitPath = '/90447967/okanjo:<publisher>';\n            if (data.settings.display && data.settings.display.adx_unit_path) {\n                adUnitPath = data.settings.display.adx_unit_path;\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad(); // accept it because we're serving out of our exchange\n            }\n\n            // Pass along what the template needs to know to display the ad\n            const renderContext = {\n                size,\n                adUnitPath\n            };\n\n            // Render the container\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n            // Insert the actual ad into the container\n            const container = this.element.querySelector('.okanjo-adx-container');\n            /* istanbul ignore else: custom templates could break this */\n            if (container) {\n\n                // Make the frame element\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-adx-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto',\n                    width: size.width,\n                    height: size.height\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Attach to dOM\n                container.appendChild(frame);\n\n                // Build a click-through tracking url so we know when an ad is clicked too\n                let clickUrl = okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction)\n                    .meta(this.getConfig())\n                    .meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    })\n                    .element(frame)\n                    .toUrl();\n\n                // Transfer references to the frame window\n                // frame.contentWindow.okanjo = okanjo;\n                // frame.contentWindow.placement = this;\n                frame.contentWindow.trackImpression = () => {\n                    okanjo.metrics.create(this._metricBase)\n                        .type(Metrics.Object.thirdparty_ad, Metrics.Event.impression)\n                        .meta(this.getConfig())\n                        .meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        })\n                        .element(frame)\n                        .send()\n                    ;\n                };\n\n                // Load Google ad!\n                frame.contentWindow.document.open();\n                frame.contentWindow.document.write(\n`<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body>\n<`+`script type=\"text/javascript\" src=\"https://www.googletagservices.com/tag/js/gpt.js\">\n    googletag.pubads().addEventListener('slotRenderEnded', function(e) { \n        trackImpression(e);\n    });\n    googletag.pubads()\n        .definePassback(\"${adUnitPath.replace(/\"/g, '\\\\\"')}\", [[${size.width}, ${size.height}]])\n        .setClickUrl(\"${clickUrl}&u=\")\n        .display();\n<`+`/script>\n</body></html>`);\n                frame.contentWindow.document.close();\n\n                // TODO future event hooks\n                // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                // Impression tracking is done from within the iframe. Crazy, right?\n            }\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        //endregion\n    }\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle:       { width: 300, height: 250 }, // aka: sidekick\n        leaderboard:            { width: 728, height:  90 },\n        large_mobile_banner:    { width: 320, height: 100 },\n        half_page:              { width: 300, height: 600 }, // aka: filmstrip, sidekick\n\n        // IAB / Others\n        billboard:              { width: 970, height: 250 }, // aka: sidekick\n        button_2:               { width: 120, height:  60 },\n        micro_bar:              { width:  88, height:  31 },\n        portrait:               { width: 300, height:1050 },\n        rectangle:              { width: 180, height: 150 },\n        super_leaderboard:      { width: 970, height:  90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper:        { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard:     { width: 320, height:  50 },\n        small_square:           { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1:               { width: 120, height:  90 },\n        full_banner:            { width: 468, height:  60 },\n        half_banner:            { width: 234, height:  60 },\n        large_rectangle:        { width: 336, height: 280 },\n        pop_under:              { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper:             { width: 120, height: 600 },\n        square:                 { width: 250, height: 250 },\n        square_button:          { width: 125, height: 125 },\n        vertical_banner:        { width: 120, height: 240 },\n        vertical_rectangle:     { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n    class Product extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Product';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Set filters based on old \"mode\"\n            if (this.config.mode === 'sense') {\n                // sense\n                this.config.url = this.config.url || 'referrer';\n                this.config.take = this.config.take || 5;\n            } else if (this.config.mode === 'single') {\n                // single\n                this.config.url = null;\n                if (this.config.id) this.config.ids = [this.config.id];\n                this.config.take = 1;\n                delete this.config.id;\n            } else {\n                // browse\n                this.config.url = null;\n                this.config.take = this.config.take || 25;\n            }\n            delete this.config.mode;\n\n            // Sold by changed to store name\n            if (this.config.sold_by) {\n                this.config.store_name = this.config.sold_by;\n                delete this.config.sold_by;\n            }\n\n            // Selectors is now url_selectors\n            if (this.config.selectors) {\n                this.config.url_selectors = this.config.selectors;\n                delete this.config.selectors;\n            }\n\n            // Marketplace_id is no longer a thing, closest analog are properties.\n            if (this.config.marketplace_id) {\n                this.config.property_id = this.config.marketplace_id;\n                delete this.config.marketplace_id\n            }\n\n            // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n            if (this.config.marketplace_status === 'testing') {\n                this.config.sandbox = true;\n            }\n            delete this.config.marketplace_status;\n\n            // Deprecated\n            delete this.config.suboptimal;\n            delete this.config.text;\n        }\n\n    }\n\n    return okanjo.Product = Product;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n    class Ad extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Ad';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Id / single mode is now ids\n            this.config.url = null;\n            if (this.config.id) {\n                this.config.ids = [this.config.id];\n            } else {\n                okanjo.warn('Ad widget should have parameter `id` set.');\n            }\n            this.config.take = 1;\n            delete this.config.id;\n\n            // Content is automatically determined whether the placement element contains children\n            delete this.config.content;\n        }\n\n    }\n\n    return okanjo.Ad = Ad;\n\n})(window);","/* jshint ignore:start */\n\n(function() {\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n\n\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */"],"sourceRoot":"./"}