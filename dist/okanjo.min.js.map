{"version":3,"sources":["okanjo.js","Array.from.js","Array.prototype.find.js","Array.prototype.findIndex.js","Array.prototype.includes.js","NodeList.prototype.forEach.js","Object.Assign.js","Okanjo.js","Request.js","Cookie.js","TemplateEngine.js","Modal.js","Metrics.js","AutoPageView.js","EventEmitter.js","Widget.js","Placement.js","Product.js","Ad.js","vendor.js"],"names":["root","factory","define","amd","exports","module","okanjo","this","_possibleConstructorReturn","isCallable","self","ReferenceError","call","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","Number","instance","Constructor","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","Array","Symbol","iterator","obj","from","number","toStr","toString","fn","Math","maxSafeInteger","toLength","len","toInteger","isFinite","floor","abs","pow","items","arrayLike","min","max","C","mapFn","T","arguments","A","kValue","k","find","predicate","o","thisArg","findIndex","includes","searchElement","fromIndex","sameValueZero","x","y","isNaN","n","window","NodeList","forEach","callback","assign","varArgs","nextSource","to","index","nextKey","hasOwnProperty","NOOP","document","SUPPORTS_PAGE_OFFSET","undefined","pageXOffset","CSS1_COMPATIBLE","compatMode","AGENT","navigator","userAgent","ELLIPSIFY_PATTERN","MOBILE_PATTERN","Console","console","settings","metrics","report","_len","args","_key","err","Error","messageIndex","arg","stack","split","shift","push","reportStack","join","filter","a","splice","error","version","warn","apply","concat","message","_len2","_key2","selector","parent","qwery","querySelector","querySelectorAll","net","endpoint","sandboxEndpoint","routes","ads","getRoute","route","params","env","request","keys","replace","util","isEmpty","test","val","trim","getPageArguments","query","eqIndex","includeHashArguments","decodeURIComponent","parts","part","indexOf","queryArgs","hashArgs","substring","location","search","hash","mixed","out","map","deepClone","_typeof","options","output","input","isArray","toISOString","childObject","childKey","ignoreArrays","arrayToCsv","flatten","shortid","clusterWorkerId","shuffled","crypto","msCrypto","require","getRandomValues","randomBytes","encode","loopCounter","random","dest","Uint8Array","str","done","randomByte","REDUCE_TIME","seconds","counter","previousSeconds","Date","getTime","ui","getScrollPosition","documentElement","scrollLeft","body","getElementSize","element","scrollTop","includeMargin","size","height","offsetHeight","width","offsetWidth","style","currentStyle","getComputedStyle","parseInt","marginTop","marginBottom","getPageSize","marginLeft","marginRight","html","getViewportSize","scrollWidth","clientWidth","clientHeight","scrollHeight","vh","isMobileZoom","inWidth","innerWidth","inHeight","innerHeight","getEventPosition","ex","et","event","ey","el","type","name","getElementPosition","clientX","clientY","rect","getBoundingClientRect","y2","x1","left","contains","y1","x2","top","right","bottom","e","exception","elementArea","iLeft","s","iRight","v","vw","iTop","iBottom","intersectionArea","getPercentageInViewport","_okanjo$ui$_getInters","_getIntersection","replacedText","container","substr","parentNode","targetHeight","useTextContent","textContent","text","innerText","safety","replacer","match","span","createElement","content","setAttribute","innerHTML","appendChild","method","url","payload","res","ActiveXObject","calledBack","req","timeout","ontimeout","attributes","statusCode","onreadystatechange","status","data","JSON_TEST","getResponseHeader","parse","responseText","xhr","toUpperCase","open","withCredentials","setRequestHeader","post","send","get","bind","encodeURIComponent","getKey","keyPrefix","stringify","pairs","expireDate","setDate","set","cookieName","expireDays","getDate","expires","toUTCString","path","encodeURI","cookie","cookieValue","nameTest","decodeURI","TemplateEngine","_templates","_css","classDetects","template","beforeRender","nodeType","lib","Mustache","markup","css","head","id","styleSheet","cssText","templateName","context","model","_this","okanjoMetricUrl","now","blockClasses","ensureCss","render","formatCurrency","decimals","decimalSeparator","toFixed","j","thousandsSeparator","slice","engine","$modalContainer","$modalWindow","isMobile","$modalOuter","$html","$body","$modalSkin","$modalInner","$modalClose","$modalFrame","addListener","addEventListener","attachEvent","getWindowHeight","handler","setTimeout","handleReposition","t","closeModal","stopPropagation","preventDefault","removeClass","addClass","className","RegExp","openModal","IS_MOBILE","setContent","initialized","show","createElements","bindEvents","modal","hide","Metrics","sourceCh","_getStoredQueue","sourceCx","pageId","defaultChannel","Channel","external","sid","_checkUrlForReferral","queue","Params","JSON","localStorage","delay","_this2","_saveQueueTimeout","clearTimeout","_saveQueue","_queue","object_type","metric_session","event_type","Event","correlation","urlSid","_noProcess","sourceChannel","pageArgs","channel","localSid","trackEvent","sourceContext","ch","_push","page","view","href","_processQueue","_this3","_processTimeout","_batchSend","_updateSid","item","_this4","events","win","metrics_batch","m","exclude","Meta","ok_ver","pgid","referrer","ref","ttl","_len3","_key3","pw","w","ph","h","vp","pos","vx1","vy1","vx2","vy2","jsEvent","_len4","_key4","_len5","_key5","MetricEvent","impression","interaction","Action","click","inline_click","article","thirdparty_ad","cart","order","order_item","user","widget","product","store","cause","marketplace","placement","live","testing","store_widget","Environment","others","_this5","_data","addEventInfo","addViewportInfo","_element","addElementInfo","_len6","_key6","addEventMeta","_normalizeEvent","trackPageView","EventEmitter","_events","listener","idx","listeners","_arguments","_this6","removeListener","_EventEmitter","on","DATA_REPLACE_PATTERN","Widget","DATA_ATTRIBUTE_PATTERN","getPrototypeOf","_this7","instanceId","config","_applyConfiguration","_setCompatibilityOptions","_ensurePlacementKey","load","_this8","normalizedKey","_default","_this9","group","origKey","getGroup","showError","setMarkup","attr","exec","Field","_convert","_strip","_group","converter","toLowerCase","parseFloat","strip","bool","int","float","FILTERS","_Widget","DISPLAY","string","ARTICLE_META","array","_okanjo$_Widget$Field","MINIMUM_VIEW_PX","MINIMUM_VIEW_TIME","Placement","MINIMUM_VIEW_FREQ","_metricBase","_viewedWatchers","_this10","_response","_viewWatcherIv","no_init","init","_okanjo$_Widget","q","url_referrer","not_url_paths","organization_id","organization_name","property_name","store_name","external_id","sku","external_store_id","condition","manufacturer","upc","tags","category","min_price","max_price","isbn","max_donation_percent","pools","sort_by","min_donation_percent","skip","donation_to","template_theme","template_cta_style","adx_unit_path","url_category","url_keywords","template_layout","proxy_url","expandable","default","backwards","disable_inline_buy","disable_popup","_this11","getSettings","matches","backfillPattern","backfill","article_meta","isBackfill","_this12","_setMetricBase","_fetchContent","_reportWidgetLoad","_mergeResponseSettings","_updateBaseMetaFromResponse","_showContent","base","cx","wgid","_this13","results","viewport","decl","declined","_addOnceViewedHandler","res_type","res_length","meta","getConfig","emit","sandbox","_this14","_this15","display","filters","ptseed","pten","aid","enabled","ptid","seed","msg","ContentTypes","products","articles","adx","_showADX","additionalUrlParams","joiner","ok_msid","utm_source","utm_campaign","u","toUrl","resource","clickId","urlParam","cid","bf","currentTarget","ok_cid","trackParam","ea","_event","additionalParams","_getClickThroughURL","_clickId","_additionalParams","contentType","defaultName","template_name","isTemplateRegistered","prefix","buttonClass","brandColor","template_cta_color","brandCSS","brandCSSId","registerCss","controller","successfulCount","_toggleViewWatcher","setInterval","_checkViewWatchers","clearInterval","inline_buy_url","_getTemplate","DefaultTemplates","offer","_price_formatted","price","_index","_escaped_inline_buy_url","_image_url","image_urls","_escaped_buy_url","buy_url","getAttribute","_this16","_handleResourceMouseDown","_handleProductClick","ellipsify","showNativeBuyUx","showPopupNativeBuyUx","popup","_popupFrame","vspace","allowfullscreen","frame","class","hspace","webkitallowfullscreen","mozallowfullscreen","scrolling","frame_height","src","ad_size","_escaped_url","_this17","_handleArticleClick","_this18","Sizes","adUnitPath","declineReason","renderContext","frameborder","ta_w","ta_h","ta_s","contentWindow","write","clickUrl","close","button_2","rectangle","super_leaderboard","wide_skyscraper","half_page","billboard","micro_bar","button_1","full_banner","half_banner","large_rectangle","skyscraper","square","vertical_rectangle","three_to_one_rectangle","square_button","vertical_banner","medium_rectangle","Product","_okanjo$Placement","_this19","ids","mode","take","sold_by","url_selectors","marketplace_id","selectors","marketplace_status","property_id","suboptimal","Ad","_okanjo$Placement2","_this20","global","objectToString","nodeName","isFunction","object","mustache","typeStr","escapeRegExp","hasProperty","propName","nonSpaceRe","testRegExp","re","regExpTest","isWhitespace","tagRe","String","entityMap","parseTemplate","nonSpace","hasTag","spaces","closingTagRe","closingCurlyRe","openingTagRe","compileTags","tagsToCompile","spaceRe","start","scanner","stripSpace","sections","tokens","chr","token","openSection","valueLength","scanUntil","charAt","equalsRe","scan","curlyRe","pop","squashedTokens","lastToken","numTokens","nestedTokens","nestTokens","section","collector","Scanner","tail","Context","parentContext","cache",".","Writer","&","escapeHtml","<",">","\"","'","/","whiteRe","eos","lookupHit","names","partials","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","lookup","escape","clearCache","defaultWriter","to_html","result"],"mappings":"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","file":"okanjo.min.js","sourcesContent":["/*! okanjo-js v1.7.0 | (c) 2013 Okanjo Partners Inc | https://okanjo.com/ */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.okanjo = factory();\n  }\n}(this, function() {\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n    Array.from = function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function isCallable(fn) {\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function toInteger(value) {\n            var number = Number(value);\n            if (isNaN(number)) {\n                return 0;\n            }\n            if (number === 0 || !isFinite(number)) {\n                return number;\n            }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function toLength(value) {\n            var len = toInteger(value);\n            return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike /*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T;\n            if (typeof mapFn !== 'undefined') {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < len… (also steps a - h)\n            var kValue;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }();\n}\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function value(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return kValue.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return undefined.\n            return undefined;\n        }\n    });\n}\n// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nif (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n        value: function value(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return k.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return k;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return -1.\n            return -1;\n        }\n    });\n}\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n        value: function value(searchElement, fromIndex) {\n\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || window;\n        for (var i = 0; i < this.length; i++) {\n            callback.call(thisArg, this[i], i, this);\n        }\n    };\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign != 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, \"assign\", {\n        value: function assign(target, varArgs) {\n            // .length of function is 2\n            'use strict';\n\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        },\n        writable: true,\n        configurable: true\n    });\n}\n\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nvar okanjo = function (window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    var SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    var CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    var AGENT = window.navigator.userAgent;\n    var ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    var MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    var NOOP = function NOOP() {};\n    var Console = window.console;\n\n    // Place to pull defaults, if already set\n    var settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    var okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"1.7.0\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: function report() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var err = args.find(function (arg) {\n                return arg instanceof Error;\n            });\n            if (!err) {\n                var messageIndex = args.findIndex(function (arg) {\n                    return typeof arg === \"string\";\n                });\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                var stack = new Error().stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter(function (a) {\n                    return a !== err;\n                });\n            }\n\n            Console.error('[Okanjo v' + okanjo.version + ']: ' + err.stack);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: function warn(message) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            var err = new Error(message);\n\n            Console.warn('[Okanjo v' + okanjo.version + ']: ' + err.stack);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: function qwery(selector, parent) {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: function getRoute(route, params, env) {\n            if (params) {\n                Object.keys(params).forEach(function (key) {\n                    route = route.replace(':' + key, params[key] + \"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: function isEmpty(val) {\n            return val === null || val === undefined || typeof val === \"string\" && val.trim().length === 0;\n        },\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: function isMobile() {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: function getPageArguments(includeHashArguments) {\n\n            var split = function split(query) {\n                query = query || \"\";\n                var params = {};\n                var parts = query.split('&');\n                parts.forEach(function (part) {\n                    var eqIndex = part.indexOf('=');\n                    var key = void 0,\n                        value = void 0;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            var queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            var hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach(function (key) {\n                return queryArgs[key] = hashArgs[key];\n            });\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = function (mixed, out) {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map(function (val) {\n                return okanjo.util.deepClone(val);\n            }));\n        } else if ((typeof mixed === 'undefined' ? 'undefined' : _typeof(mixed)) === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach(function (key) {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = function (input) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var output = {};\n\n        if (input !== undefined && input !== null) {\n            Object.keys(input).forEach(function (key) {\n                // Convert object ids to hex strings\n                if (input[key] instanceof Date) {\n                    if (options.dateToIso) {\n                        output[key] = input[key].toISOString(); // convert to iso\n                    } else {\n                        output[key] = input[key]; // as-is\n                    }\n                } else if (_typeof(input[key]) === 'object' && input[key] !== null) {\n                    // Allow ignoring arrays if desired\n                    if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                        output[key] = input[key];\n                    } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                        output[key] = input[key].join(',');\n                    } else {\n                        // Make child objects flat too (always returns object so Object.keys is safe)\n                        var childObject = okanjo.util.flatten(input[key], options);\n                        Object.keys(childObject).forEach(function (childKey) {\n                            output[key + '_' + childKey] = childObject[childKey];\n                        });\n                    }\n                } else {\n                    // Copy value references\n                    output[key] = input[key];\n                }\n            });\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = function (clusterWorkerId) {\n\n        var shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n            crypto = window.crypto || window.msCrypto || typeof require === \"function\" && require('crypto'),\n            randomByte = function randomByte() {\n            /* istanbul ignore next: platform diffs out of scope */\n            if (crypto && crypto.randomBytes) {\n                return crypto.randomBytes(1)[0] & 0x30;\n            } else if (!crypto || !crypto.getRandomValues) {\n                return Math.floor(Math.random() * 256) & 0x30;\n            }\n            /* istanbul ignore next: platform diffs out of scope */\n            var dest = new Uint8Array(1);\n            /* istanbul ignore next: platform diffs out of scope */\n            crypto.getRandomValues(dest);\n            /* istanbul ignore next: platform diffs out of scope */\n            return dest[0] & 0x30;\n        },\n            encode = function encode(number) {\n            var loopCounter = 0,\n                done = void 0,\n                str = '';\n\n            while (!done) {\n                str = str + shuffled[number >> 4 * loopCounter & 0x0f | randomByte()];\n                done = number < Math.pow(16, loopCounter + 1);\n                loopCounter++;\n            }\n            return str;\n        },\n\n\n        // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n        // This number should be updated every year or so to keep the generated id short.\n        // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n        REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        var counter = void 0,\n            previousSeconds = void 0;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function () {\n            var str = '',\n                seconds = Math.floor((new Date().getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    }();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: function getScrollPosition() {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: function getElementSize(element, includeMargin) {\n            var size = {\n                height: element.offsetHeight,\n                width: element.offsetWidth\n            };\n            var style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: function getPageSize() {\n            var body = document.querySelector('body');\n            var html = document.documentElement;\n\n            return {\n                w: Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth),\n\n                h: Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight)\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: function getViewportSize() {\n            var element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */ : document.body;\n            var width = element.clientWidth;\n            var height = element.clientHeight;\n            var inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            var inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            var isMobileZoom = inWidth && width > inWidth || inHeight && height > inHeight;\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: function getEventPosition(event) {\n            var ex = event.pageX;\n            var ey = event.pageY;\n            var body = document.body;\n            var el = document.documentElement;\n            var scrollLeft = 'scrollLeft';\n            var scrollTop = 'scrollTop';\n            var type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: function getElementPosition(element) {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            var err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                var rect = element.getBoundingClientRect();\n                var body = document.body.getBoundingClientRect();\n                // let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    // x1: rect.left + pos.x,\n                    // y1: rect.top + pos.y,\n                    // x2: rect.right + pos.x,\n                    // y2: rect.bottom + pos.y\n\n                    // This might fix\n                    x1: rect.left - body.left,\n                    y1: rect.top - body.top,\n                    x2: rect.right - body.left,\n                    y2: rect.bottom - body.top\n\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element: element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: function _getIntersection(e, s, v) {\n            var iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x + v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y + v.vh),\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea: intersectionArea,\n                elementArea: elementArea\n            };\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: function getPercentageInViewport(element) {\n            var e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n\n            var _okanjo$ui$_getInters = okanjo.ui._getIntersection(e, s, v),\n                intersectionArea = _okanjo$ui$_getInters.intersectionArea,\n                elementArea = _okanjo$ui$_getInters.elementArea;\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n\n\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function (element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        var parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        var text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000,\n            // Safety switch to bust out of the loop in the event something goes terribly wrong\n        replacer = function replacer(match) {\n            /* istanbul ignore next: n/a to jsdom */\n            replacedText = match.substr(0, match.length - 3) + replacedText;\n            /* istanbul ignore next: n/a to jsdom */\n            return '...';\n        };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && safety-- > 0) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            var content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class', 'okanjo-ellipses');\n            span.setAttribute('class', 'okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length - 3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length - 3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n}(window, document);\n\"use strict\";\n\n(function (window) {\n\n    var JSON_TEST = /^application\\/json/;\n    var okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        var req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        var calledBack = false;\n\n        // Normalized done handler\n        var done = function done(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function (e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function (e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    var res = void 0;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    var encode = function encode(val) {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent('' + val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    var getKey = function getKey(key, keyPrefix) {\n        if (keyPrefix) {\n            return keyPrefix + '[' + encode(key) + ']';\n        } else {\n            return encode(key);\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = function (obj, keyPrefix) {\n        var pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (v) {\n                    return pairs.push(getKey(key, keyPrefix) + '=' + encode(v));\n                }); // Does not do that PHP garbage with key[]=val\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\" && value !== null) {\n                // Recurse\n                var res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: function set(cookieName, value, expireDays) {\n            var expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            var expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            var path = \" Path=/\";\n            var cookieValue = encodeURI(value) + ';' + expires + path;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: function get(cookieName) {\n            var output = null;\n            document.cookie.split(\";\").find(function (cookie) {\n                var nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                var value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                if (nameTest === cookieName) {\n                    output = decodeURI(value);\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            return output;\n        }\n    };\n})(window, document);\n\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n\n    var TemplateEngine = function () {\n        function TemplateEngine() {\n            _classCallCheck(this, TemplateEngine);\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n\n\n        _createClass(TemplateEngine, [{\n            key: 'registerTemplate',\n            value: function registerTemplate(name, template, beforeRender, options) {\n\n                if ((typeof template === 'undefined' ? 'undefined' : _typeof(template)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (template.nodeType === undefined) {\n                        throw new Error('Parameter template must be a string or a DOM element');\n                    } else {\n                        template = template.innerHTML;\n                        okanjo.lib.Mustache.parse(template);\n                    }\n                } else if (typeof template !== \"string\") {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                }\n\n                // Shift options if only have 3 params\n                if (arguments.length === 3 && (typeof beforeRender === 'undefined' ? 'undefined' : _typeof(beforeRender)) === \"object\") {\n                    options = beforeRender;\n                    beforeRender = null;\n                } else {\n                    options = options || {};\n                }\n\n                if (beforeRender && typeof beforeRender !== \"function\") {\n                    throw new Error('Parameter beforeRender must be a function');\n                }\n\n                // Assign the template\n                this._templates[name] = {\n                    markup: template,\n                    options: options,\n                    beforeRender: beforeRender\n                };\n            }\n\n            /**\n             * Registers a CSS payload for use\n             * @param name\n             * @param css\n             * @param options\n             */\n\n        }, {\n            key: 'registerCss',\n            value: function registerCss(name, css, options) {\n                options = options || {};\n\n                if ((typeof css === 'undefined' ? 'undefined' : _typeof(css)) === \"object\") {\n                    //noinspection JSValidateTypes\n                    if (css.nodeType === undefined) {\n                        throw new Error('Parameter css must be a string or a DOM element');\n                    }\n                } else if (typeof css !== \"string\") {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n\n                this._css[name] = {\n                    markup: css,\n                    options: options\n                };\n            }\n\n            /**\n             * Checks whether a template is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: 'isTemplateRegistered',\n            value: function isTemplateRegistered(name) {\n                return !!this._templates[name];\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Checks whether a CSS payload is registered\n             * @param name\n             * @return {boolean}\n             */\n\n        }, {\n            key: 'isCssRegistered',\n            value: function isCssRegistered(name) {\n                return !!this._css[name];\n            }\n\n            /**\n             * Ensures that a CSS payload has been added to the DOM\n             * @param name\n             */\n\n        }, {\n            key: 'ensureCss',\n            value: function ensureCss(name) {\n                if (this._css[name]) {\n                    //noinspection JSValidateTypes\n                    var css = this._css[name],\n                        id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                    // Check for css element on page, if we have an ID to look for\n                    if (id) {\n                        var element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                        if (!element) {\n                            var head = document.head,\n                                style = document.createElement('style');\n\n                            style.id = id;\n                            style.setAttribute('type', 'text/css');\n\n                            /* istanbul ignore else: old ie */\n                            if (style.hasOwnProperty) {\n                                // old ie\n                                style.innerHTML = css.markup;\n                            } else {\n                                style.styleSheet.cssText = css.markup;\n                            }\n\n                            if (head) {\n                                head.appendChild(style);\n                            } else {\n                                // NO HEAD, just prepend to body then\n                                var body = document.body;\n                                if (body) {\n                                    body.appendChild(style);\n                                } else {\n                                    // And if this doesn't work, just give up\n                                    okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    okanjo.report('Attempted to add CSS template \"' + name + '\" to the DOM, however it does not appear to be registered?');\n                }\n            }\n\n            /**\n             * Renders a template and returns the markup\n             * @param templateName\n             * @param context\n             * @param model\n             * @return {string}\n             */\n\n        }, {\n            key: 'render',\n            value: function render(templateName, context, model) {\n                var _this = this;\n\n                model = model || {};\n                var template = this._templates[templateName];\n\n                // If there's a data controller closure set, and if so, run the data through there\n                if (template.beforeRender) {\n                    model = template.beforeRender.call(context, model);\n                }\n\n                // Attach globals\n                model.okanjo = okanjo;\n                model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//, ''); // Url w/o scheme to prevent mixed-content warnings\n                model.now = function () {\n                    return new Date().getTime();\n                };\n                model.classDetects = this.classDetects;\n\n                //noinspection JSUnresolvedVariable\n                if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                    model.classDetects += \" \" + model.blockClasses.join(' ');\n                    delete model.blockClasses;\n                }\n\n                // Add CSS unless we are told not to\n                if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                    template.options.css.forEach(function (css) {\n                        return _this.ensureCss(css);\n                    });\n                    delete model.css;\n                }\n\n                // Render the template and return the result\n                return okanjo.lib.Mustache.render(template.markup, model);\n            }\n        }]);\n\n        return TemplateEngine;\n    }();\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n\n\n    TemplateEngine.formatCurrency = function (value) {\n        var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n        var decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n        var thousandsSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ',';\n\n        var s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        var j = i.length;\n        j = j > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    /*\n      div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n      */\n\n    var okanjo = window.okanjo;\n    var IS_MOBILE = okanjo.util.isMobile();\n\n    var initialized = false,\n\n    // scrollY = null,\n\n    // Selectors\n    $html = void 0,\n        $body = void 0,\n        $modalContainer = void 0,\n        $modalWindow = void 0,\n        $modalSkin = void 0,\n        $modalOuter = void 0,\n        $modalInner = void 0,\n        $modalClose = void 0,\n        $modalFrame = void 0,\n        createElements = function createElements() {\n\n        // Page elements\n        //noinspection JSUnresolvedFunction\n        $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n        //noinspection JSUnresolvedFunction\n        $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n        // Modal elements\n        $modalContainer = document.createElement('div');\n        $modalWindow = document.createElement('div');\n        $modalSkin = document.createElement('div');\n        $modalOuter = document.createElement('div');\n        $modalInner = document.createElement('div');\n        $modalClose = document.createElement('div');\n        $modalFrame = document.createElement('iframe');\n\n        $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n        $modalWindow.setAttribute('class', 'okanjo-modal-window');\n        $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n        $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n        $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n        $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n        $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n        $modalFrame.setAttribute('frameborder', '0');\n        $modalFrame.setAttribute('vspace', '0');\n        $modalFrame.setAttribute('hspace', '0');\n        $modalFrame.setAttribute('webkitallowfullscreen', '');\n        $modalFrame.setAttribute('mozallowfullscreen', '');\n        $modalFrame.setAttribute('allowfullscreen', '');\n        $modalFrame.setAttribute('scrolling', 'auto');\n\n        $modalClose.innerHTML = '×';\n\n        // Create the modal element tree\n        $modalInner.appendChild($modalFrame);\n        $modalOuter.appendChild($modalInner);\n        $modalSkin.appendChild($modalOuter);\n        $modalWindow.appendChild($modalSkin);\n        $modalWindow.appendChild($modalClose);\n        $modalContainer.appendChild($modalWindow);\n\n        // Add the modal stuff to the body\n        $body.appendChild($modalContainer);\n    },\n        addListener = function addListener(el, event, handler) {\n        /* istanbul ignore else: old browsers */\n        if (el.addEventListener) {\n            el.addEventListener(event, handler, false);\n        } else {\n            el.attachEvent(\"on\" + event, handler);\n        }\n    },\n        getWindowHeight = function getWindowHeight() {\n        return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n    },\n        handleReposition = function handleReposition() {\n        // scrollY = okanjo.ui.getScrollPosition().y;\n        //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n        $modalWindow.style.height = getWindowHeight() - 80 + \"px\";\n    },\n        bindEvents = function bindEvents() {\n\n        // If the device orientation changes, adjust the modal view port\n        addListener(window, 'orientationchange', function () {\n            for (var t = 0; t < 2; t++) {\n                setTimeout(handleReposition, 1000 * t + 10);\n            }\n        });\n\n        // If the window changes size, also adjust the modal view port\n        addListener(window, 'resize', function () {\n            setTimeout(handleReposition, 100);\n        });\n\n        // Click the overlay to close the modal\n        addListener($modalContainer, 'click', closeModal);\n\n        // If you click in the modal, don't close it!\n        addListener($modalWindow, 'click', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        // Click the close button to close it\n        addListener($modalClose, 'click', function (e) {\n\n            // Don't close it twice\n            e.preventDefault();\n            e.stopPropagation();\n\n            closeModal();\n        });\n    },\n\n\n    //removeListener = function(el, event, handler) {\n    //    if (el.removeEventListener) {\n    //        el.removeEventListener(event, handler);\n    //    } else {\n    //        el.detachEvent(\"on\" + event, handler);\n    //    }\n    //},\n\n    addClass = function addClass(el, name) {\n        el.className += \" \" + name;\n    },\n        removeClass = function removeClass(el, name) {\n        el.className = el.className.replace(new RegExp(' *?' + name), '');\n    },\n        openModal = function openModal() {\n\n        // scrollY = document.body.scrollTop;\n\n        removeClass($modalContainer, 'okanjo-modal-hidden');\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        handleReposition();\n\n        addClass($html, \"okanjo-modal-active\");\n\n        if (!IS_MOBILE) {\n            addClass($html, \"okanjo-modal-margin-fix\");\n        }\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n        }, 10);\n\n        // Click the overlay to close the modal\n        //addListener($body, 'click', closeModal);\n    },\n        closeModal = function closeModal() {\n        addClass($modalContainer, 'okanjo-modal-fade-out');\n\n        setTimeout(function () {\n            removeClass($modalContainer, 'okanjo-modal-fade-out');\n            addClass($modalContainer, \"okanjo-modal-hidden\");\n\n            removeClass($html, \"okanjo-modal-active\");\n            if (!IS_MOBILE) {\n                removeClass($html, \"okanjo-modal-margin-fix\");\n            }\n        }, 210);\n\n        // Click the overlay to close the modal\n        //removeListener($body, 'click', closeModal);\n    },\n\n\n    /**\n     * Insert an element or markup into the modal\n     * @param content\n     */\n    setContent = function setContent(content) {\n\n        // Remove existing content\n        $modalInner.innerHTML = \"\";\n\n        // Insert new content\n        if (typeof content === \"string\") {\n            $modalInner.innerHTML = content;\n        } else {\n            $modalInner.appendChild(content);\n        }\n    };\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function show(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function hide() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n\n    var Metrics = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Metrics() {\n            _classCallCheck(this, Metrics);\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n\n\n        _createClass(Metrics, [{\n            key: '_getStoredQueue',\n            value: function _getStoredQueue() {\n                if (window.localStorage[Metrics.Params.queue]) {\n                    try {\n                        var queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                        if (Array.isArray(queue)) {\n                            return queue;\n                        } else {\n                            okanjo.report('Stored queue is not a queue', { queue: queue });\n                            return [];\n                        }\n                    } catch (e) {\n                        okanjo.report('Failed to load metric queue from storage', { err: e });\n                        return [];\n                    }\n                } else {\n                    // not stored\n                    return [];\n                }\n            }\n\n            /**\n             * Updates the queue stored in storage, in the event we can't complete our submissions\n             * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n             * @private\n             */\n\n        }, {\n            key: '_saveQueue',\n            value: function _saveQueue(delay) {\n                var _this2 = this;\n\n                if (delay) {\n                    if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                    this._saveQueueTimeout = setTimeout(function () {\n                        _this2._saveQueue(false);\n                        _this2._saveQueueTimeout = null;\n                    }, 100);\n                } else {\n                    window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n                }\n            }\n\n            /**\n             * Extract contextual pass-through data from the URL, if present\n             * @private\n             */\n\n        }, {\n            key: '_checkUrlForReferral',\n            value: function _checkUrlForReferral() {\n                var pageArgs = okanjo.util.getPageArguments(true),\n                    urlSid = pageArgs[Metrics.Params.name],\n                    localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name),\n                    // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                    sourceChannel = pageArgs[Metrics.Params.channel];\n\n                // If for some reason, both are set, record the incident as a possible correlation\n                if (urlSid && localSid && urlSid !== localSid) {\n                    this.trackEvent({\n                        object_type: Metrics.Object.metric_session,\n                        event_type: Metrics.Event.correlation,\n                        id: urlSid + \"_\" + localSid,\n                        ch: this.defaultChannel,\n                        _noProcess: true\n                    });\n                }\n\n                // Update local values\n                this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n                this.sourceCh = sourceChannel || null;\n                this.sourceCx = sourceContext || null;\n            }\n\n            /**\n             * Submits an individual event metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: 'trackEvent',\n            value: function trackEvent(event, callback) {\n                // Ensure the event contains the required fields\n                if (!event.object_type || !event.event_type) {\n                    okanjo.report('Invalid metric to track (missing object_type or event_type)', { event: event });\n                    return;\n                }\n\n                // Queue the event for publishing\n                this._push(event, callback);\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Submits a page view metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: 'trackPageView',\n            value: function trackPageView(event, callback) {\n                event = event || {};\n                event.object_type = Metrics.Object.page;\n                event.event_type = Metrics.Event.view;\n                event.id = event.id || window.location.href;\n                event.ch = event.ch || this.defaultChannel;\n\n                // Queue the event for publishing\n                this.trackEvent(event, callback);\n            }\n\n            /**\n             * Adds an event to the queue\n             * @param event\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: '_push',\n            value: function _push(event, callback) {\n                this._queue.push({ event: event, callback: callback });\n\n                // Save the queue\n                this._saveQueue(true);\n\n                // Start burning down the queue, unless the event says not to\n                if (event._noProcess) {\n                    delete event._noProcess;\n                } else {\n                    this._processQueue();\n                }\n            }\n\n            /**\n             * Burn down the queue\n             * @private\n             */\n\n        }, {\n            key: '_processQueue',\n            value: function _processQueue() {\n                var _this3 = this;\n\n                // If the queue is not already being processed, and there's stuff to process, continue sending them\n                if (!this._processTimeout && this._queue.length > 0) {\n                    this._processTimeout = setTimeout(function () {\n\n                        // Pull the items we're going to batch out of the queue\n                        var items = _this3._queue.splice(0, 255);\n                        _this3._saveQueue(false);\n\n                        // Track the item\n                        _this3._batchSend(items, function (err, res) {\n                            // TODO: If there was an error, consider splicing the batch back into the queue\n\n                            // Update / Set the metric sid on the publisher\n                            /* istanbul ignore else: server barks */\n                            if (res && res.data && res.data.sid) _this3._updateSid(res.data.sid);\n\n                            // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                            _this3._processTimeout = null;\n                            _this3._processQueue();\n\n                            // Fire the event callbacks if there are any\n                            items.forEach(function (item) {\n                                item.callback && item.callback(err, res);\n                            });\n                        });\n                    }, 0); // break event loop, maybe\n                }\n            }\n\n            /**\n             * Sends a bunch of queued metric events\n             * @param items\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: '_batchSend',\n            value: function _batchSend(items, callback) {\n                var _this4 = this;\n\n                // Normalize event data\n                var events = items.map(function (item) {\n                    _this4._normalizeEvent(item.event);\n\n                    // Strip duplicated data from event batch\n                    delete item.event.sid;\n                    delete item.event.win;\n\n                    return item.event;\n                });\n\n                var payload = {\n                    events: events,\n                    win: window.location.href\n                };\n\n                var route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n                // Set sid if present\n                if (this.sid) {\n                    payload.sid = this.sid;\n                }\n\n                // Send it\n                okanjo.net.request.post(route, payload, function (err, res) {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err: err, res: res, items: items, route: route });\n                    }\n                    callback && callback(err, res);\n                });\n            }\n\n            /**\n             * Normaizes events so that they contain consistent data values\n             * @param event\n             * @private\n             */\n\n        }, {\n            key: '_normalizeEvent',\n            value: function _normalizeEvent(event) {\n\n                // Ensure meta is ready to receive values\n                event.m = event.m || {};\n\n                // Set key\n                event.key = event.key || event.m.key || okanjo.key || undefined;\n\n                // Set session\n                if (this.sid) event.sid = this.sid;\n\n                // Clone the metadata, since it might be a direct reference to a widget property\n                // Deleting properties on the meta object could be very destructive\n                event.m = Object.assign({}, event.m); // event.m should be flat\n\n                // Strip meta keys that should be excluded\n                Object.keys(Metrics.Meta.exclude).forEach(function (key) {\n                    return delete event.m[key];\n                });\n\n                // Set referral channel / context\n                if (this.sourceCh) {\n                    event.m.ref_ch = this.sourceCh;\n                }\n                if (this.sourceCx) {\n                    event.m.ref_cx = this.sourceCx;\n                }\n\n                // Set page group id\n                event.m.pgid = this.pageId;\n\n                // Set okanjo version\n                event.m.ok_ver = okanjo.version;\n\n                // Finalize metadata\n                event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n                // Ensure metadata strings won't exceed the imposed limit\n                Object.keys(event.m).forEach(function (key) {\n                    if (typeof event.m[key] === \"string\") {\n                        event.m[key] = event.m[key].substr(0, 255);\n                    }\n                });\n\n                // Set page source reference\n                if (document.referrer) {\n                    event.ref = document.referrer;\n                }\n\n                // Set the window location\n                event.win = window.location.href;\n            }\n\n            /**\n             * Updates the stored session identifier\n             * @param sid\n             * @private\n             */\n\n        }, {\n            key: '_updateSid',\n            value: function _updateSid(sid) {\n                if (!this.sid && sid) {\n                    this.sid = sid;\n                    window.localStorage[Metrics.Params.name] = sid;\n                    okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'create',\n\n\n            //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n            /**\n             * Helper to create a new fluent event structure\n             * @param args\n             * @return {*}\n             */\n            value: function create() {\n                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                    args[_key3] = arguments[_key3];\n                }\n\n                return Metrics.create.apply(null, args);\n            }\n        }], [{\n            key: 'addElementInfo',\n            value: function addElementInfo(element, event) {\n                var page = okanjo.ui.getPageSize(),\n                    size = okanjo.ui.getElementPosition(element);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.pw = page.w;\n                event.m.ph = page.h;\n                event.m.x1 = size.x1;\n                event.m.y1 = size.y1;\n                event.m.x2 = size.x2;\n                event.m.y2 = size.y2;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'addViewportInfo',\n            value: function addViewportInfo(event) {\n                var vp = okanjo.ui.getViewportSize(),\n                    pos = okanjo.ui.getScrollPosition();\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.vx1 = pos.x;\n                event.m.vy1 = pos.y;\n                event.m.vx2 = pos.x + vp.vw;\n                event.m.vy2 = pos.y + vp.vh;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'addEventInfo',\n            value: function addEventInfo(jsEvent, event) {\n                var pos = okanjo.ui.getEventPosition(jsEvent);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.et = pos.et;\n                event.m.ex = pos.ex;\n                event.m.ey = pos.ey;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param event\n             * @param args\n             * @return {*|{}}\n             */\n\n        }, {\n            key: 'addEventMeta',\n            value: function addEventMeta(event) {\n                event = event || {};\n                event.m = event.m || {};\n\n                for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                    args[_key4 - 1] = arguments[_key4];\n                }\n\n                event.m = Object.assign.apply(Object, [event.m].concat(args));\n\n                return event;\n            }\n\n            /**\n             * Helper to create a new fluent event structure\n             * @param data\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'create',\n            value: function create(data) {\n                for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                    args[_key5 - 1] = arguments[_key5];\n                }\n\n                // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n                return new MetricEvent(data, args);\n            }\n        }]);\n\n        return Metrics;\n    }();\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n\n\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key', 'callback', 'metrics_channel_context', 'metrics_context', 'mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n\n    var MetricEvent = function () {\n        function MetricEvent(data, others) {\n            var _this5 = this;\n\n            _classCallCheck(this, MetricEvent);\n\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach(function (data) {\n                    _this5.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n\n\n        _createClass(MetricEvent, [{\n            key: 'data',\n            value: function data(_data) {\n                Object.assign(this, okanjo.util.deepClone(_data));\n                return this;\n            }\n\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'event',\n            value: function event(jsEvent) {\n                Metrics.addEventInfo(jsEvent, this);\n                return this;\n            }\n\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'viewport',\n            value: function viewport() {\n                Metrics.addViewportInfo(this);\n                return this;\n            }\n\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'element',\n            value: function element(_element) {\n                Metrics.addElementInfo(_element, this);\n                return this;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'meta',\n            value: function meta() {\n                for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                    args[_key6] = arguments[_key6];\n                }\n\n                Metrics.addEventMeta.apply(null, [this].concat(args));\n                return this;\n            }\n\n            /**\n             * Sets the object and event type on the event w/o having to use .data\n             * @param object_type\n             * @param event_type\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: 'type',\n            value: function type(object_type, event_type) {\n                this.object_type = object_type;\n                this.event_type = event_type;\n                return this;\n            }\n\n            /**\n             * Finalizes and sends the event\n             * @param callback\n             */\n\n        }, {\n            key: 'send',\n            value: function send(callback) {\n                okanjo.metrics.trackEvent(this, callback);\n                // DONT RETURN - BREAK THE CHAIN HERE\n            }\n\n            /**\n             * Gets the single-metric tracking url for this event\n             * @return {string}\n             */\n\n        }, {\n            key: 'toUrl',\n            value: function toUrl() {\n                // Copy data w/o modifying it\n                var event = Object.assign({}, this);\n\n                // Extract params\n                var object_type = event.object_type,\n                    event_type = event.event_type;\n\n                delete event.object_type;\n                delete event.event_type;\n\n                // Normalize event data\n                okanjo.metrics._normalizeEvent(event);\n\n                // Get the URL\n                return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type: object_type, event_type: event_type }) + '?' + okanjo.net.request.stringify(event);\n            }\n        }]);\n\n        return MetricEvent;\n    }();\n\n    // Export / initialize\n\n\n    okanjo.metrics = new Metrics();\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({ _noProcess: true });\n    setTimeout(function () {\n        okanjo.metrics._processQueue();\n    }, 1000);\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function (window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    var EventEmitter = function () {\n        function EventEmitter() {\n            _classCallCheck(this, EventEmitter);\n\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n\n\n        _createClass(EventEmitter, [{\n            key: 'on',\n            value: function on(event, listener) {\n                if (!this._events[event]) {\n                    this._events[event] = [];\n                }\n\n                this._events[event].push(listener);\n            }\n\n            /**\n             * Removes an event handler for an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: 'removeListener',\n            value: function removeListener(event, listener) {\n\n                if (this._events[event]) {\n                    var idx = this._events[event].indexOf(listener);\n                    if (idx >= 0) {\n                        this._events[event].splice(idx, 1);\n                    }\n                }\n            }\n\n            /**\n             * Emits an event\n             * @param event\n             */\n\n        }, {\n            key: 'emit',\n            value: function emit(event) {\n                var i = void 0,\n                    listeners = void 0,\n                    length = void 0,\n                    args = [].slice.call(arguments, 1);\n\n                if (this._events[event]) {\n                    listeners = this._events[event].slice();\n                    length = listeners.length;\n\n                    for (i = 0; i < length; i++) {\n                        listeners[i].apply(this, args);\n                    }\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Registers an event handler to fire only once on an event\n             * @param event\n             * @param listener\n             */\n\n        }, {\n            key: 'once',\n            value: function once(event, listener) {\n                var _arguments = arguments,\n                    _this6 = this;\n\n                var callback = function callback() {\n                    var args = [].slice.call(_arguments, 1);\n                    _this6.removeListener(event, callback);\n                    listener.apply(_this6, args);\n                };\n\n                this.on(event, callback);\n            }\n        }]);\n\n        return EventEmitter;\n    }();\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n    var DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    var DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n\n    var Widget = function (_okanjo$_EventEmitter) {\n        _inherits(Widget, _okanjo$_EventEmitter);\n\n        function Widget(element, options) {\n            _classCallCheck(this, Widget);\n\n            // Verify element was given (we can't load unless we have one)\n            var _this7 = _possibleConstructorReturn(this, (Widget.__proto__ || Object.getPrototypeOf(Widget)).call(this));\n\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: _this7, element: element, options: options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + (typeof options === 'undefined' ? 'undefined' : _typeof(options)), { widget: _this7, element: element, options: options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            _this7.name = 'Widget';\n            _this7.element = element;\n            _this7.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            _this7.config = Object.assign({}, options);\n            return _this7;\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n\n\n        _createClass(Widget, [{\n            key: 'init',\n            value: function init() {\n                // process config attributes\n                this._applyConfiguration();\n\n                this._setCompatibilityOptions();\n\n                // ensure placement key\n                if (!this._ensurePlacementKey()) return;\n\n                // Tell the widget to load\n                this.load();\n            }\n\n            /**\n             * This is for extended widgets, so they may modify the configuration before loading\n             */\n\n        }, {\n            key: '_setCompatibilityOptions',\n            value: function _setCompatibilityOptions() {}\n            // By default, this does nothing. Must be overridden to be useful\n\n\n            //noinspection JSMethodCanBeStatic\n            /**\n             * Widget configuration definitions\n             * @return {{}}\n             */\n\n        }, {\n            key: 'getSettings',\n            value: function getSettings() {\n                // Override this\n                return {};\n            }\n\n            /**\n             * Main widget load function.\n             */\n\n        }, {\n            key: 'load',\n            value: function load() {}\n            // Override this in the widget implementation\n\n\n            /**\n             * Applies data attribute settings and defaults to the widget configuration\n             * @private\n             */\n\n        }, {\n            key: '_applyConfiguration',\n            value: function _applyConfiguration() {\n                var _this8 = this;\n\n                // this.config was set to the options provided in the constructor\n                // so layer data attributes on top\n\n                var data = this.getDataAttributes();\n                var settings = this.getSettings();\n                Object.keys(data).forEach(function (key) {\n                    var normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    var val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        _this8.config[normalizedKey] = val;\n                    }\n                });\n\n                // Apply defaults from the widget settings\n                Object.keys(settings).forEach(function (key) {\n                    if (_this8.config[key] === undefined && settings[key]._default !== undefined) {\n                        _this8.config[key] = settings[key].value(undefined, false);\n                    }\n                });\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets a copy of the configuration, suitable for transmission\n             * @return {{}}\n             */\n\n        }, {\n            key: 'getConfig',\n            value: function getConfig() {\n                var _this9 = this;\n\n                var settings = this.getSettings();\n                var out = {};\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this9.config[origKey];\n                    var key = origKey;\n                    var group = null;\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            /**\n             * Before loading, ensure that a placement key is present or abort\n             * @return {boolean}\n             * @private\n             */\n\n        }, {\n            key: '_ensurePlacementKey',\n            value: function _ensurePlacementKey() {\n\n                // Check if set on widget or globally\n                if (this.config.key) {\n                    return true;\n                } else if (okanjo.key) {\n                    // Copy key from global scope,\n                    this.config.key = okanjo.key;\n                    return true;\n                }\n\n                // No key set, can't load.\n                okanjo.report('No key provided on widget', { widget: this });\n                this.showError('Error: Missing placement key.');\n                return false;\n            }\n\n            /**\n             * Displays an error in the widget element\n             * @param message\n             */\n\n        }, {\n            key: 'showError',\n            value: function showError(message) {\n                this.setMarkup(okanjo.ui.engine.render('okanjo.error', this, { message: message }));\n            }\n\n            /**\n             * Sets the markup of the widget's element\n             * @param markup\n             */\n\n        }, {\n            key: 'setMarkup',\n            value: function setMarkup(markup) {\n                this.element.innerHTML = markup;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the current page URL, sans query string and fragment.\n             * @returns {string} - URL\n             */\n\n        }, {\n            key: 'getDataAttributes',\n\n\n            /**\n             * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n             * @returns {*}\n             */\n            value: function getDataAttributes() {\n                var data = {};\n                Array.from(this.element.attributes).forEach(function (attr) {\n                    var match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                    if (match) {\n                        data[match[1]] = attr.value;\n                    }\n                });\n                return data;\n            }\n        }], [{\n            key: 'getCurrentPageUrl',\n            value: function getCurrentPageUrl() {\n                return window.location.href.replace(/([?#].*)$/, '');\n            }\n        }]);\n\n        return Widget;\n    }(okanjo._EventEmitter);\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n\n\n    Widget.Field = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Field() {\n            _classCallCheck(this, Field);\n\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n\n\n        _createClass(Field, [{\n            key: 'array',\n            value: function array(converter) {\n                this._convert = function (val) {\n                    if (Array.isArray(val)) {\n                        if (converter) {\n                            return val.map(function (v) {\n                                return converter(v);\n                            });\n                        } else {\n                            return val;\n                        }\n                    }\n                    val = val.replace(/\\\\,/g, '\\0');\n                    return val.split(',').map(function (v) {\n                        var res = v.trim().replace('\\0', ',');\n                        if (converter) res = converter(res);\n                        return res;\n                    });\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'string',\n\n\n            /**\n             * Formats the value as a string\n             * @return {Field}\n             */\n            value: function string() {\n                this._convert = function (val) {\n                    if (val === null || val === undefined) return val;else return \"\" + val;\n                };\n                return this;\n            }\n        }, {\n            key: 'bool',\n\n\n            /**\n             * Formats the value as a boolean (takes 1, 0, true, false)\n             * @return {Field}\n             */\n            value: function bool() {\n                this._convert = function (val) {\n                    if (typeof val === \"string\") {\n                        return val === \"1\" || val.toLowerCase() === \"true\";\n                    } else {\n                        return !!val;\n                    }\n                };\n                return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'strip',\n\n\n            /**\n             * Indicates the field should not be passed on for transmission\n             * @return {Field}\n             */\n            value: function strip() {\n                this._strip = true;return this;\n            }\n        }, {\n            key: 'int',\n\n\n            /**\n             * Formats the value as a integer (whole) number\n             * @return {Field}\n             */\n            value: function int() {\n                this._convert = function (val) {\n                    return parseInt(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'float',\n\n\n            /**\n             * Formats the value as a floating point number\n             * @return {Field}\n             */\n            value: function float() {\n                this._convert = function (val) {\n                    return parseFloat(val);\n                };return this;\n            }\n            //noinspection JSUnusedGlobalSymbols\n\n        }, {\n            key: 'default',\n\n\n            //noinspection ReservedWordAsName\n            /**\n             * Sets the default value to use if not set\n             * @param val\n             * @return {Field}\n             */\n            value: function _default(val) {\n                this._default = val;\n                return this;\n            }\n\n            /**\n             * Assigns the property to a bucket for hierarchy\n             * @param name\n             * @return {Field}\n             */\n\n        }, {\n            key: 'group',\n            value: function group(name) {\n                this._group = name;\n                return this;\n            }\n\n            /**\n             * Gets the group the field belongs to\n             * @return {*|null}\n             */\n\n        }, {\n            key: 'getGroup',\n            value: function getGroup() {\n                return this._group;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Gets the formatted value of the field\n             * @param val\n             * @param strip\n             * @return {*}\n             */\n\n        }, {\n            key: 'value',\n            value: function value(val) {\n                var strip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                if (this._strip && strip) return undefined;\n                if (val !== undefined && this._convert) {\n                    val = this._convert(val);\n                }\n                return val !== undefined ? val : this._default;\n            }\n        }], [{\n            key: 'array',\n            value: function array(converter) {\n                return new Field().array(converter);\n            }\n        }, {\n            key: 'string',\n            value: function string() {\n                return new Field().string();\n            }\n        }, {\n            key: 'bool',\n            value: function bool() {\n                return new Field().bool();\n            }\n        }, {\n            key: 'strip',\n            value: function strip() {\n                return new Field().strip();\n            }\n        }, {\n            key: 'int',\n            value: function int() {\n                return new Field().int();\n            }\n        }, {\n            key: 'float',\n            value: function float() {\n                return new Field().float();\n            }\n        }]);\n\n        return Field;\n    }();\n\n    // Export\n    return okanjo._Widget = Widget;\n})(window);\n\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    //region Imports and Constants\n\n    var okanjo = window.okanjo;\n    var _okanjo$_Widget$Field = okanjo._Widget.Field,\n        string = _okanjo$_Widget$Field.string,\n        array = _okanjo$_Widget$Field.array,\n        float = _okanjo$_Widget$Field.float,\n        int = _okanjo$_Widget$Field.int,\n        bool = _okanjo$_Widget$Field.bool;\n\n    var Metrics = okanjo.metrics.constructor;\n    var TemplateEngine = okanjo.ui.engine.constructor;\n\n    var FILTERS = 'filters';\n    var DISPLAY = 'display';\n    var ARTICLE_META = 'article_meta';\n\n    var MINIMUM_VIEW_PX = 0.5; // 50% of pixels must be in viewport\n    var MINIMUM_VIEW_TIME = 1000; // for 1 full second\n    var MINIMUM_VIEW_FREQ = 2; // time / freq = interval\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n\n    var Placement = function (_okanjo$_Widget) {\n        _inherits(Placement, _okanjo$_Widget);\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        function Placement(element) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            _classCallCheck(this, Placement);\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n\n            var _this10 = _possibleConstructorReturn(this, (Placement.__proto__ || Object.getPrototypeOf(Placement)).call(this, element, options));\n\n            _this10.name = 'Placement';\n            _this10._metricBase = {}; // placeholder for metrics\n            _this10._response = null;\n\n            // Aggregate view watchers into a single interval fn\n            _this10._viewWatcherIv = null;\n            _this10._viewedWatchers = [];\n\n            // Start loading content\n            if (!options.no_init) _this10.init();\n            return _this10;\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n\n\n        _createClass(Placement, [{\n            key: 'getSettings',\n            value: function getSettings() {\n                return {\n\n                    // What type of response do you want\n                    type: string().group(FILTERS),\n\n                    // What specific products do you want\n                    ids: array().group(FILTERS),\n\n                    // Filter by generic query string\n                    q: string().group(FILTERS),\n\n                    // Filter by relation to content\n                    url: string().group(FILTERS),\n                    url_referrer: string().group(FILTERS).strip(),\n                    url_selectors: string().group(FILTERS),\n                    url_paths: array().group(FILTERS),\n                    not_url_paths: array().group(FILTERS),\n\n                    // Filter by hierarchy\n                    organization_id: string().group(FILTERS),\n                    property_id: string().group(FILTERS),\n                    store_id: string().group(FILTERS),\n\n                    // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                    organization_name: string().group(FILTERS),\n                    property_name: string().group(FILTERS),\n                    store_name: string().group(FILTERS),\n\n                    // Filter by integrations\n                    external_id: string().group(FILTERS),\n                    sku: string().group(FILTERS),\n                    external_store_id: string().group(FILTERS),\n\n                    // Filter by product attributes\n                    condition: string().group(FILTERS),\n                    manufacturer: string().group(FILTERS),\n                    upc: string().group(FILTERS),\n                    isbn: string().group(FILTERS),\n\n                    // Filter by categorization / distribution\n                    tags: array().group(FILTERS),\n                    category: array().group(FILTERS),\n                    pools: array().group(FILTERS),\n\n                    // Filter by price range\n                    min_price: float().group(FILTERS),\n                    max_price: float().group(FILTERS),\n\n                    // Filter by donation ranges\n                    min_donation_percent: float().group(FILTERS),\n                    max_donation_percent: float().group(FILTERS),\n\n                    // Filter by donation recipient\n                    donation_to: string().group(FILTERS),\n\n                    // Sorting\n                    sort_by: string().group(FILTERS),\n                    sort_direction: string().group(FILTERS),\n\n                    // Pagination\n                    skip: int().group(FILTERS),\n                    take: int().group(FILTERS),\n\n                    // Placement Testing\n                    placement_tests_only: bool(),\n\n                    // Display settings\n                    size: string().group(DISPLAY),\n                    template_name: string().group(DISPLAY),\n                    template_layout: string().group(DISPLAY),\n                    template_theme: string().group(DISPLAY),\n                    template_cta_style: string().group(DISPLAY),\n                    template_cta_text: string().group(DISPLAY),\n                    template_cta_color: string().group(DISPLAY),\n                    adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                    // Article metadata\n                    url_category: array().group(ARTICLE_META),\n                    url_keywords: array().group(ARTICLE_META),\n\n                    // Functional settings\n                    key: string().strip(), // don't need to resend key on all our requests\n                    no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                    proxy_url: string().strip(),\n                    expandable: bool().strip().default(true),\n                    disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                    disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                    backwards: string().strip() // internal flag indicating port from a deprecated widget\n                };\n            }\n\n            /**\n             * Gets the widget configuration formatted using settings, suitable for transmission\n             * @return {{filters: {}, display: {}, backfill: {}, article_meta: {}}}\n             */\n\n        }, {\n            key: 'getConfig',\n            value: function getConfig() {\n                var _this11 = this;\n\n                var settings = this.getSettings();\n                var out = { filters: {}, display: {}, backfill: {}, article_meta: {} };\n                var backfillPattern = /^backfill_(.+)$/; // backfill_property\n\n                Object.keys(this.config).forEach(function (origKey) {\n                    var val = _this11.config[origKey];\n                    var key = origKey;\n                    var isBackfill = false;\n                    var group = null;\n\n                    // Get the property name if it was prefixed with backfill\n                    var matches = backfillPattern.exec(origKey);\n                    if (matches) {\n                        key = matches[1];\n                        isBackfill = true;\n                    }\n\n                    // Check if this is a known property\n                    if (settings[key]) {\n                        val = settings[key].value(val);\n                        group = settings[key].getGroup();\n                    }\n\n                    // Init the target/group if not already setup\n                    var target = isBackfill ? out.backfill : out;\n                    if (group) {\n                        target[group] = target[group] || {};\n                        target = target[group];\n                    }\n\n                    // Set the value on the target if set\n                    if (val === null) {\n                        target[key] = ''; // format null values as empty strings for transmission\n                    } else if (val !== undefined) {\n                        target[key] = val;\n                    }\n                });\n\n                return out;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Core load process\n             */\n\n        }, {\n            key: 'load',\n            value: function load() {\n                var _this12 = this;\n\n                // Set metric base data (stub for all future events emitted by the widget)\n                this._setMetricBase();\n\n                // Find out what we should display here\n                this._fetchContent(function (err) {\n                    if (err) {\n                        // Report the widget load as declined\n                        _this12._reportWidgetLoad(\"fetch failed: \" + err.statusCode /* istanbul ignore next: out of scope */ || err.toString());\n                    } else {\n                        // Merge display settings from response\n                        _this12._mergeResponseSettings();\n\n                        // Merge the referential data from the response\n                        _this12._updateBaseMetaFromResponse();\n\n                        // Handle rendering based on output type\n                        _this12._showContent();\n                    }\n                });\n            }\n\n            //endregion\n\n            //region Internal Helpers\n\n            /**\n             * Initializes the common metric data for events emitted by the placement\n             * @private\n             */\n\n        }, {\n            key: '_setMetricBase',\n            value: function _setMetricBase() {\n                var base = this._metricBase;\n                base.ch = Metrics.Channel.placement;\n                base.cx = this.config.backwards || 'auto';\n                base.key = this.config.key;\n                base.m = base.m || {};\n                base.m.wgid = this.instanceId;\n            }\n\n            /**\n             * Emits the widget impression event\n             * @param declined\n             * @private\n             */\n\n        }, {\n            key: '_reportWidgetLoad',\n            value: function _reportWidgetLoad(declined) {\n                var _this13 = this;\n\n                var res = this._response || {};\n                var data = res.data || { results: [] };\n\n                // If this is declined, mark future events as declined too\n                this._metricBase.m.decl = declined || '0';\n\n                // Attach other main response attributes to all future events\n                this._metricBase.m.res_bf = data.backfilled ? 1 : 0; // whether the response used the backup fill flow\n                this._metricBase.m.res_total = data.total || 0; // how many total candidate results were available given filters\n                this._metricBase.m.res_type = data.type; // what the given resource type was\n                this._metricBase.m.res_length = data.results.length; // what the given resource type was\n\n                // Track impression\n                okanjo.metrics.create(this._metricBase).type(Metrics.Object.widget, Metrics.Event.impression).meta(this.getConfig()).element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport().send();\n\n                // Start watching for a viewable impression\n                this._addOnceViewedHandler(this.element, function () {\n                    okanjo.metrics.create(_this13._metricBase).type(Metrics.Object.widget, Metrics.Event.view).meta(_this13.getConfig()).element(_this13.element).viewport().send();\n                });\n            }\n\n            /**\n             * Executes the request for content to fill the placement\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: '_fetchContent',\n            value: function _fetchContent(callback) {\n                var _this14 = this;\n\n                // Build request to api, starting with this placement config params\n                var query = this.getConfig();\n\n                // Extract the key\n                var key = this.config.key;\n\n                // Attach sid and referrer\n                if (okanjo.metrics.sid) query.sid = okanjo.metrics.sid;\n                query.filters.url_referrer = this.config.url_referrer || window.location.href;\n                query.wgid = this.instanceId;\n                query.pgid = okanjo.metrics.pageId;\n\n                // Send it\n                okanjo.net.request.post(okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live') + '?key=' + encodeURIComponent(key), query, function (err, res) {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: _this14 });\n                        _this14.setMarkup(''); // Don't show anything\n                        _this14.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        _this14._response = res;\n\n                        // Hook point for response handling\n                        _this14.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                });\n            }\n\n            /**\n             * Applies response filters and display settings into the widget configuration\n             * @private\n             */\n\n        }, {\n            key: '_mergeResponseSettings',\n            value: function _mergeResponseSettings() {\n                var _this15 = this;\n\n                var res = this._response;\n                var data = res.data || {};\n                var settings = data.settings || {};\n\n                if (settings.filters) {\n                    Object.keys(settings.filters).forEach(function (key) {\n                        _this15.config[key] = settings.filters[key];\n                    });\n                }\n\n                if (settings.display) {\n                    Object.keys(settings.display).forEach(function (key) {\n                        _this15.config[key] = settings.display[key];\n                    });\n                }\n            }\n\n            /**\n             * Applies response data to future metric events\n             * @private\n             */\n\n        }, {\n            key: '_updateBaseMetaFromResponse',\n            value: function _updateBaseMetaFromResponse() {\n                // Update the base metric data with info from the response\n                var data = (this._response || {}).data || {};\n                this._metricBase.m = this._metricBase.m || {};\n                var meta = this._metricBase.m;\n\n                // Article\n                if (data.article) meta.aid = data.article.id;\n\n                if (data.test && data.test.enabled) {\n                    meta.pten = 1;\n                    meta.ptid = data.test.id;\n                    meta.ptseed = data.test.seed;\n                } else {\n                    meta.pten = 0;\n                }\n            }\n\n            /**\n             * Beings the render process based on the response content\n             * @private\n             */\n\n        }, {\n            key: '_showContent',\n            value: function _showContent() {\n                var data = (this._response || {}).data || {};\n\n                // Known content types we can display\n                if (data.type === Placement.ContentTypes.products) {\n                    this._showProducts();\n                } else if (data.type === Placement.ContentTypes.articles) {\n                    this._showArticles();\n                } else if (data.type === Placement.ContentTypes.adx) {\n                    this._showADX();\n                } else {\n                    // Unknown response type!\n\n                    // Report the widget load as declined\n                    var msg = 'Unknown response content type: ' + data.type;\n                    okanjo.report(msg, { placement: this });\n                    this.setMarkup(''); // Don't show anything\n                    this.emit('error', msg);\n                    this._reportWidgetLoad(msg);\n                }\n            }\n\n            /**\n             * Generates the click url using the event, proxy_url, and additional params\n             * @param event\n             * @param url\n             * @param additionalUrlParams\n             * @return {*}\n             * @private\n             */\n\n        }, {\n            key: '_getClickThroughURL',\n            value: function _getClickThroughURL(event, url, additionalUrlParams) {\n                var joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n                // Tack on transfer params\n                additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n                additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n                additionalUrlParams.ok_ch = this._metricBase.ch;\n                additionalUrlParams.ok_cx = this._metricBase.cx;\n                additionalUrlParams.utm_source = 'okanjo';\n                additionalUrlParams.utm_campaign = 'smartserve';\n\n                url += joiner + Object.keys(additionalUrlParams).map(function (key) {\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(additionalUrlParams[key]);\n                }).join('&');\n\n                // Wrap the url if we're proxying\n                if (this.config.proxy_url) {\n                    url = this.config.proxy_url + encodeURIComponent(url);\n                }\n\n                // Set the url on the event\n                event.data({\n                    u: url\n                });\n\n                return event.toUrl();\n            }\n\n            /**\n             * Converts a resource's link into one suitable for tracking, making middle-click safe\n             * @param type\n             * @param resource\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: '_handleResourceMouseDown',\n            value: function _handleResourceMouseDown(type, resource, e) {\n                // Generate a new click id for this event\n                var clickId = okanjo.util.shortid();\n\n                // Start building the event\n                var event = okanjo.metrics.create(this._metricBase, {\n                    id: resource.id\n                }).type(type, Metrics.Event.interaction).meta(this.getConfig()).meta({ cid: clickId }).meta({ bf: resource.backfill ? 1 : 0 }).event(e).element(e.currentTarget).viewport();\n\n                // Pull the proper params out of the resource depending on it's type\n                var trackParam = 'url_track_param';\n                var urlParam = 'url';\n\n                if (type === Metrics.Object.product) {\n                    trackParam = 'buy_url_track_param';\n                    urlParam = 'buy_url';\n                }\n\n                // Attach the campaign tracking identifier\n                var additionalParams = {\n                    ok_cid: clickId\n                };\n                if (resource[trackParam]) additionalParams[resource[trackParam]] = (okanjo.metrics.sid || 'unknown') + ':' + clickId;\n\n                // Update the link with the event data\n                event.data({ ea: Metrics.Action.click });\n                e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n                // Cache this on the product\n                resource._clickId = clickId;\n                resource._event = event;\n                resource._additionalParams = additionalParams;\n            }\n\n            /**\n             * Gets the template to use, accounting for configured preference if available\n             * @param contentType\n             * @param defaultName\n             * @return {string}\n             * @private\n             */\n\n        }, {\n            key: '_getTemplate',\n            value: function _getTemplate(contentType, defaultName) {\n                var templateName = this.config.template_name;\n                if (!templateName || !okanjo.ui.engine.isTemplateRegistered(contentType + '.' + templateName)) {\n                    templateName = defaultName;\n                }\n                return contentType + '.' + templateName;\n            }\n\n            /**\n             * Enforces size/layout/cta restrictions\n             * @private\n             */\n\n        }, {\n            key: '_enforceLayoutOptions',\n            value: function _enforceLayoutOptions() {\n                // Enforce format restrictions\n                if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                    this.config.template_layout = \"list\";\n                    this.config.template_cta_style = \"link\";\n                } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                    this.config.template_layout = \"list\";\n                }\n            }\n\n            /**\n             * Register a custom\n             * @private\n             */\n\n        }, {\n            key: '_registerCustomBranding',\n            value: function _registerCustomBranding(prefix, buttonClass) {\n                var brandColor = this.config.template_cta_color;\n                if (brandColor) {\n                    var brandCSS = void 0,\n                        brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                    brandCSS = '\\n                    ' + prefix + '-block2.' + brandCSSId + ' ' + prefix + '-' + buttonClass + ' { color: ' + brandColor + ';} \\n                    ' + prefix + '-block2.' + brandCSSId + '.okanjo-cta-style-button ' + prefix + '-' + buttonClass + ' { border: 1px solid ' + brandColor + '; } \\n                    ' + prefix + '-block2.' + brandCSSId + '.okanjo-cta-style-button ' + prefix + '-' + buttonClass + ':hover { background: ' + brandColor + '; } \\n                ';\n\n                    okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                    okanjo.ui.engine.ensureCss(brandCSSId);\n                }\n            }\n\n            /**\n             * When element is in view per viewability constants (50% for 1s) trigger handler once\n             * @param element\n             * @param handler\n             * @private\n             */\n\n        }, {\n            key: '_addOnceViewedHandler',\n            value: function _addOnceViewedHandler(element, handler) {\n                var controller = {\n                    element: element,\n                    successfulCount: 0,\n                    handler: handler\n                };\n\n                // Add our element to the watch list and turn on the watcher if not already on\n                this._viewedWatchers.push(controller);\n                this._toggleViewWatcher(true);\n            }\n\n            /**\n             * Interval function to check viewability of registered elements\n             * @private\n             */\n\n        }, {\n            key: '_checkViewWatchers',\n            value: function _checkViewWatchers() {\n\n                // Check each registered watcher\n                for (var i = 0, controller; i < this._viewedWatchers.length; i++) {\n                    controller = this._viewedWatchers[i];\n\n                    // Check if watcher is complete, then remove it from the list\n                    /* istanbul ignore if: jsdom won't trigger this */\n                    if (okanjo.ui.getPercentageInViewport(controller.element) >= MINIMUM_VIEW_PX) {\n                        controller.successfulCount++;\n                    }\n\n                    // While this could more optimally be contained within the former condition, unit-testing blocks on this\n                    if (controller.successfulCount >= MINIMUM_VIEW_FREQ) {\n                        controller.handler();\n                        this._viewedWatchers.splice(i, 1);\n                        i--;\n                    }\n                }\n\n                // Turn off if nobody is watching\n                if (this._viewedWatchers.length === 0) {\n                    this._toggleViewWatcher(false);\n                }\n            }\n\n            /**\n             * Turns the viewability watcher on and off\n             * @param enabled\n             * @private\n             */\n\n        }, {\n            key: '_toggleViewWatcher',\n            value: function _toggleViewWatcher(enabled) {\n                if (enabled) {\n                    if (this._viewWatcherIv === null) {\n                        this._viewWatcherIv = setInterval(this._checkViewWatchers.bind(this), MINIMUM_VIEW_TIME / MINIMUM_VIEW_FREQ);\n                    }\n                } else {\n                    clearInterval(this._viewWatcherIv);\n                    this._viewWatcherIv = null;\n                }\n            }\n\n            //endregion\n\n            //region Product Handling\n\n            /**\n             * Renders a product response\n             * @private\n             */\n\n        }, {\n            key: '_showProducts',\n            value: function _showProducts() {\n                var _this16 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n                // - render\n\n                // Format products\n                data.results.forEach(function (offer, index) {\n                    // Disable inline buy if configured to do so\n                    if (_this16.config.disable_inline_buy) offer.inline_buy_url = null;\n                    if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                    // Set primary image\n                    offer._image_url = offer.image_urls ? offer.image_urls[0] : '';\n\n                    // Escape buy url (fixme: does not include proxy_url!)\n                    offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                    // Make price tag pretty\n                    offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                    offer._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break it */\n                    if (id && index >= 0) {\n                        var product = _this16._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break it */\n                        if (product) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this16._handleResourceMouseDown.bind(_this16, Metrics.Object.product, product));\n                            a.addEventListener('click', _this16._handleProductClick.bind(_this16, product));\n\n                            // Track impression\n                            okanjo.metrics.create(_this16._metricBase, { id: product.id }).type(Metrics.Object.product, Metrics.Event.impression).meta(_this16.getConfig()).meta({ bf: product.backfill ? 1 : 0 }).element(a).viewport().send();\n\n                            // Start watching for a viewable impression\n                            _this16._addOnceViewedHandler(a, function () {\n                                okanjo.metrics.create(_this16._metricBase, { id: product.id }).type(Metrics.Object.product, Metrics.Event.view).meta(_this16.getConfig()).meta({ bf: product.backfill ? 1 : 0 }).element(a).viewport().send();\n                            });\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-resource-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the product click process\n             * @param product\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: '_handleProductClick',\n            value: function _handleProductClick(product, e) {\n\n                // Update the event\n                if (!product._event || !product._additionalParams || !product._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.product, product, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = product._event,\n                    additionalParams = product._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Determine what we're doing - native ux or redirect\n                var showNativeBuyUx = !!product.inline_buy_url,\n                    showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile();\n\n                // Show the inline buy experience or redirect\n                if (showPopupNativeBuyUx) {\n                    // Mobile native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    //\n                    // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                    // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                    // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                    //\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ popup: 'true' });\n\n                    // Get the frame url\n                    var url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Open the window or redirect if that failed\n                    this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                    /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                    if (!this._popupFrame) {\n                        // Fallback to just replacing the window with the target, since popups don't work :(\n                        okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                        window.location.href = url;\n                    }\n                } else if (showNativeBuyUx) {\n                    // Regular native buy ux\n\n                    // Don't follow the link\n                    e.preventDefault();\n\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-inline-buy-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto'\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Check whether we're allowed to expand past the bounds of the placement\n                    additionalParams.expandable = this.config.expandable ? 1 : 0;\n                    if (!this.config.expandable) {\n                        var parent = this.element.querySelector('.okanjo-expansion-root');\n                        /* istanbul ignore else: custom templates could break this */\n                        if (parent) {\n                            frame.className += ' okanjo-ad-in-unit';\n                            frame.setAttribute('height', \"100%\");\n                            frame.setAttribute('width', \"100%\");\n\n                            parent.appendChild(frame);\n\n                            var size = okanjo.ui.getElementSize(parent);\n                            additionalParams.frame_height = size.height;\n                            additionalParams.frame_width = size.width;\n                            /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                            if (this.config.size) additionalParams.ad_size = this.config.size;\n                        }\n                    }\n\n                    // Update the event\n                    event.data({ ea: Metrics.Action.inline_click }).meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                    // Set the frame url\n                    frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                    // Show the modal if it was not internally expanded\n                    if (!frame.parentNode) {\n                        okanjo.ui.modal.show(frame);\n                    }\n                } else {\n                    // Update the link a second time, just in case the data changed\n                    e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n                }\n            }\n\n            //endregion\n\n            //region Article Handling\n\n            /**\n             * Renders an article response\n             * @private\n             */\n\n        }, {\n            key: '_showArticles',\n            value: function _showArticles() {\n                var _this17 = this;\n\n                var data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n                // Determine template to render, using custom template name if it exists\n                var templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n                // - render\n\n                // Format articles\n                data.results.forEach(function (article, index) {\n                    // Escape url (fixme: does not include proxy_url!)\n                    article._escaped_url = encodeURIComponent(article.url);\n                    article._index = index;\n                });\n\n                // Render and display the results\n                this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n                // Track widget impression\n                if (data.results.length === 0) {\n                    // Hook point for no results found\n                    this.emit('empty');\n                    this._reportWidgetLoad('empty'); // decline the impression\n                } else {\n                    this._reportWidgetLoad();\n                }\n\n                // Bind interaction handlers and track impressions\n                this.element.querySelectorAll('a').forEach(function (a) {\n\n                    var id = a.getAttribute('data-id'),\n                        index = a.getAttribute('data-index');\n\n                    // Don't bind links that are not tile links\n                    /* istanbul ignore else: custom templates could break this */\n                    if (id && index >= 0) {\n                        var article = _this17._response.data.results[index];\n                        /* istanbul ignore else: custom templates could break this */\n                        if (article) {\n\n                            // Bind interaction listener\n                            a.addEventListener('mousedown', _this17._handleResourceMouseDown.bind(_this17, Metrics.Object.article, article));\n                            a.addEventListener('click', _this17._handleArticleClick.bind(_this17, article));\n\n                            // Track impression\n                            okanjo.metrics.create(_this17._metricBase, { id: article.id }).type(Metrics.Object.article, Metrics.Event.impression).meta(_this17.getConfig()).meta({ bf: article.backfill ? 1 : 0 }).element(a).viewport().send();\n\n                            // Start watching for a viewable impression\n                            _this17._addOnceViewedHandler(a, function () {\n                                okanjo.metrics.create(_this17._metricBase, { id: article.id }).type(Metrics.Object.article, Metrics.Event.view).meta(_this17.getConfig()).meta({ bf: article.backfill ? 1 : 0 }).element(a).viewport().send();\n                            });\n                        }\n                    }\n                });\n\n                // Truncate product name to fit the space\n                this.element.querySelectorAll('.okanjo-resource-title').forEach(function (element) {\n                    okanjo.ui.ellipsify(element);\n                });\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            /**\n             * Handles the article click process\n             * @param article\n             * @param e\n             * @private\n             */\n\n        }, {\n            key: '_handleArticleClick',\n            value: function _handleArticleClick(article, e) {\n                // Update the event\n                if (!article._event || !article._additionalParams || !article._clickId) {\n                    this._handleResourceMouseDown(Metrics.Object.article, article, e);\n                }\n\n                // Extract the already generated event and params list\n                var event = article._event,\n                    additionalParams = article._additionalParams;\n\n                // Update the event to the current one\n\n                event.event(e);\n\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n            }\n\n            //endregion\n\n            //region ADX Handling\n\n            /**\n             * Renders a Google DFP/ADX response\n             * @private\n             */\n\n        }, {\n            key: '_showADX',\n            value: function _showADX() {\n                var _this18 = this;\n\n                var data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n                // Get the template we should use to render the google ad\n                var templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n                // Determine what size ad we can place here\n                var size = null;\n                if (this.config.size) {\n                    if (Placement.Sizes[this.config.size]) {\n                        // Defined size, use these known dimensions\n                        size = Placement.Sizes[this.config.size];\n                    } else {\n                        var match = /^([0-9]+)x([0-9]+)$/i.exec(this.config.size);\n                        if (match) {\n                            size = { width: match[1], height: match[2] };\n                        }\n                    }\n                }\n\n                // No given size, we need to guess\n                if (!size) size = Placement.Sizes.default;\n\n                // If we're using okanjo's ad slot, then track the impression\n                // otherwise decline it because we're just passing through to the publishers account\n                var adUnitPath = '/90447967/okanjo:<publisher>';\n                var declineReason = void 0;\n                if (data.settings.display && data.settings.display.adx_unit_path) {\n                    adUnitPath = data.settings.display.adx_unit_path;\n                    declineReason = 'custom_ad_unit';\n                }\n\n                // Pass along what the template needs to know to display the ad\n                var renderContext = {\n                    size: size,\n                    adUnitPath: adUnitPath\n                };\n\n                // Render the container\n                this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n                // Report the impression\n                this._reportWidgetLoad(declineReason);\n\n                // Insert the actual ad into the container\n                var container = this.element.querySelector('.okanjo-adx-container');\n                /* istanbul ignore else: custom templates could break this */\n                if (container) {\n\n                    // Make the frame element\n                    var frame = document.createElement('iframe');\n                    var attributes = {\n                        'class': 'okanjo-adx-frame',\n                        frameborder: 0,\n                        vspace: 0,\n                        hspace: 0,\n                        webkitallowfullscreen: '',\n                        mozallowfullscreen: '',\n                        allowfullscreen: '',\n                        scrolling: 'auto',\n                        width: size.width,\n                        height: size.height\n                    };\n\n                    // Apply attributes\n                    Object.keys(attributes).forEach(function (key) {\n                        return frame.setAttribute(key, attributes[key]);\n                    });\n\n                    // Attach to dOM\n                    container.appendChild(frame);\n\n                    // Build a click-through tracking url so we know when an ad is clicked too\n                    var clickUrl = okanjo.metrics.create(this._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction).meta(this.getConfig()).meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    }).element(frame).viewport().toUrl();\n\n                    // Transfer references to the frame window\n                    // frame.contentWindow.okanjo = okanjo;\n                    // frame.contentWindow.placement = this;\n                    frame.contentWindow.trackImpression = function () {\n                        okanjo.metrics.create(_this18._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.impression).meta(_this18.getConfig()).meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        }).element(frame).viewport().send();\n\n                        // Start watching for a viewable impression\n                        _this18._addOnceViewedHandler(frame, function () {\n                            okanjo.metrics.create(_this18._metricBase).type(Metrics.Object.thirdparty_ad, Metrics.Event.view).meta(_this18.getConfig()).meta({\n                                ta_s: adUnitPath,\n                                ta_w: size.width,\n                                ta_h: size.height\n                            }).element(frame).viewport().send();\n                        });\n                    };\n\n                    // Load Google ad!\n                    frame.contentWindow.document.open();\n                    frame.contentWindow.document.write('<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body>\\n<' + ('script type=\"text/javascript\" src=\"https://www.googletagservices.com/tag/js/gpt.js\">\\n    googletag.pubads().addEventListener(\\'slotRenderEnded\\', function(e) { \\n        trackImpression(e);\\n    });\\n    googletag.pubads()\\n        .definePassback(\"' + adUnitPath.replace(/\"/g, '\\\\\"') + '\", [[' + size.width + ', ' + size.height + ']])\\n        .setClickUrl(\"' + clickUrl + '&u=\")\\n        .display();\\n<') + '/script>\\n</body></html>');\n                    frame.contentWindow.document.close();\n\n                    // TODO future event hooks\n                    // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                    // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                    // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                    // Impression tracking is done from within the iframe. Crazy, right?\n                }\n\n                // Hook point that the widget is done loading\n                this.emit('load');\n            }\n\n            //endregion\n\n        }]);\n\n        return Placement;\n    }(okanjo._Widget);\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n\n\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle: { width: 300, height: 250 }, // aka: sidekick\n        leaderboard: { width: 728, height: 90 },\n        large_mobile_banner: { width: 320, height: 100 },\n        half_page: { width: 300, height: 600 }, // aka: filmstrip, sidekick\n        billboard: { width: 970, height: 250 }, // aka: sidekick\n\n        // IAB / Others\n        button_2: { width: 120, height: 60 },\n        micro_bar: { width: 88, height: 31 },\n        portrait: { width: 300, height: 1050 },\n        rectangle: { width: 180, height: 150 },\n        super_leaderboard: { width: 970, height: 90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper: { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard: { width: 320, height: 50 },\n        small_square: { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1: { width: 120, height: 90 },\n        full_banner: { width: 468, height: 60 },\n        half_banner: { width: 234, height: 60 },\n        large_rectangle: { width: 336, height: 280 },\n        pop_under: { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper: { width: 120, height: 600 },\n        square: { width: 250, height: 250 },\n        square_button: { width: 125, height: 125 },\n        vertical_banner: { width: 120, height: 240 },\n        vertical_rectangle: { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n\n    var Product = function (_okanjo$Placement) {\n        _inherits(Product, _okanjo$Placement);\n\n        function Product(element, options) {\n            _classCallCheck(this, Product);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this19 = _possibleConstructorReturn(this, (Product.__proto__ || Object.getPrototypeOf(Product)).call(this, element, options));\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this19 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this19.config.no_init;\n                _this19.init();\n            }\n            return _this19;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Product, [{\n            key: '_setCompatibilityOptions',\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Product';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Set filters based on old \"mode\"\n                if (this.config.mode === 'sense') {\n                    // sense\n                    this.config.url = this.config.url || 'referrer';\n                    this.config.take = this.config.take || 5;\n                } else if (this.config.mode === 'single') {\n                    // single\n                    this.config.url = null;\n                    if (this.config.id) this.config.ids = [this.config.id];\n                    this.config.take = 1;\n                    delete this.config.id;\n                } else {\n                    // browse\n                    this.config.url = null;\n                    this.config.take = this.config.take || 25;\n                }\n                delete this.config.mode;\n\n                // Sold by changed to store name\n                if (this.config.sold_by) {\n                    this.config.store_name = this.config.sold_by;\n                    delete this.config.sold_by;\n                }\n\n                // Selectors is now url_selectors\n                if (this.config.selectors) {\n                    this.config.url_selectors = this.config.selectors;\n                    delete this.config.selectors;\n                }\n\n                // Marketplace_id is no longer a thing, closest analog are properties.\n                if (this.config.marketplace_id) {\n                    this.config.property_id = this.config.marketplace_id;\n                    delete this.config.marketplace_id;\n                }\n\n                // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n                if (this.config.marketplace_status === 'testing') {\n                    this.config.sandbox = true;\n                }\n                delete this.config.marketplace_status;\n\n                // Deprecated\n                delete this.config.suboptimal;\n                delete this.config.text;\n            }\n        }]);\n\n        return Product;\n    }(okanjo.Placement);\n\n    return okanjo.Product = Product;\n})(window);\n\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n\n    var Ad = function (_okanjo$Placement2) {\n        _inherits(Ad, _okanjo$Placement2);\n\n        function Ad(element, options) {\n            _classCallCheck(this, Ad);\n\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            var no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n\n            var _this20 = _possibleConstructorReturn(this, (Ad.__proto__ || Object.getPrototypeOf(Ad)).call(this, element, options));\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: _this20 });\n\n            // Start loading content\n            if (!no_init) {\n                delete _this20.config.no_init;\n                _this20.init();\n            }\n            return _this20;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n\n\n        _createClass(Ad, [{\n            key: '_setCompatibilityOptions',\n            value: function _setCompatibilityOptions() {\n                // Convert the product config to a placement configuration\n                this.config.backwards = 'Ad';\n                this.config.type = okanjo.Placement.ContentTypes.products;\n\n                // Id / single mode is now ids\n                this.config.url = null;\n                if (this.config.id) {\n                    this.config.ids = [this.config.id];\n                } else {\n                    okanjo.warn('Ad widget should have parameter `id` set.');\n                }\n                this.config.take = 1;\n                delete this.config.id;\n\n                // Content is automatically determined whether the placement element contains children\n                delete this.config.content;\n            }\n        }]);\n\n        return Ad;\n    }(okanjo.Placement);\n\n    return okanjo.Ad = Ad;\n})(window);\n/* jshint ignore:start */\n\n(function () {\n\n    /*!\n     * mustache.js - Logic-less {{mustache}} templates with JavaScript\n     * http://github.com/janl/mustache.js\n     */\n\n    /*global define: false Mustache: true*/\n\n    (function defineMustache(global, factory) {\n        if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && exports && typeof exports.nodeName !== 'string') {\n            factory(exports); // CommonJS\n        } else if (typeof define === 'function' && define.amd) {\n            define(['exports'], factory); // AMD\n        } else {\n            global.Mustache = {};\n            factory(global.Mustache); // script, wsh, asp\n        }\n    })(this, function mustacheFactory(mustache) {\n\n        var objectToString = Object.prototype.toString;\n        var isArray = Array.isArray || function isArrayPolyfill(object) {\n            return objectToString.call(object) === '[object Array]';\n        };\n\n        function isFunction(object) {\n            return typeof object === 'function';\n        }\n\n        /**\n         * More correct typeof string handling array\n         * which normally returns typeof 'object'\n         */\n        function typeStr(obj) {\n            return isArray(obj) ? 'array' : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n        }\n\n        function escapeRegExp(string) {\n            return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        /**\n         * Null safe way of checking whether or not an object,\n         * including its prototype, has a given property\n         */\n        function hasProperty(obj, propName) {\n            return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && propName in obj;\n        }\n\n        // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n        // See https://github.com/janl/mustache.js/issues/189\n        var regExpTest = RegExp.prototype.test;\n        function testRegExp(re, string) {\n            return regExpTest.call(re, string);\n        }\n\n        var nonSpaceRe = /\\S/;\n        function isWhitespace(string) {\n            return !testRegExp(nonSpaceRe, string);\n        }\n\n        var entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n\n        function escapeHtml(string) {\n            return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n                return entityMap[s];\n            });\n        }\n\n        var whiteRe = /\\s*/;\n        var spaceRe = /\\s+/;\n        var equalsRe = /\\s*=/;\n        var curlyRe = /\\s*\\}/;\n        var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n        /**\n         * Breaks up the given `template` string into a tree of tokens. If the `tags`\n         * argument is given here it must be an array with two string values: the\n         * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n         * course, the default is to use mustaches (i.e. mustache.tags).\n         *\n         * A token is an array with at least 4 elements. The first element is the\n         * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n         * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n         * all text that appears outside a symbol this element is \"text\".\n         *\n         * The second element of a token is its \"value\". For mustache tags this is\n         * whatever else was inside the tag besides the opening symbol. For text tokens\n         * this is the text itself.\n         *\n         * The third and fourth elements of the token are the start and end indices,\n         * respectively, of the token in the original template.\n         *\n         * Tokens that are the root node of a subtree contain two more elements: 1) an\n         * array of tokens in the subtree and 2) the index in the original template at\n         * which the closing tag for that section begins.\n         */\n        function parseTemplate(template, tags) {\n            if (!template) return [];\n\n            var sections = []; // Stack to hold section tokens\n            var tokens = []; // Buffer to hold the tokens\n            var spaces = []; // Indices of whitespace tokens on the current line\n            var hasTag = false; // Is there a {{tag}} on the current line?\n            var nonSpace = false; // Is there a non-space char on the current line?\n\n            // Strips all whitespace tokens array for the current line\n            // if there was a {{#tag}} on it and otherwise only space.\n            function stripSpace() {\n                if (hasTag && !nonSpace) {\n                    while (spaces.length) {\n                        delete tokens[spaces.pop()];\n                    }\n                } else {\n                    spaces = [];\n                }\n\n                hasTag = false;\n                nonSpace = false;\n            }\n\n            var openingTagRe, closingTagRe, closingCurlyRe;\n            function compileTags(tagsToCompile) {\n                if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n                if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n\n                openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n                closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n                closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n            }\n\n            compileTags(tags || mustache.tags);\n\n            var scanner = new Scanner(template);\n\n            var start, type, value, chr, token, openSection;\n            while (!scanner.eos()) {\n                start = scanner.pos;\n\n                // Match any text between tags.\n                value = scanner.scanUntil(openingTagRe);\n\n                if (value) {\n                    for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n                        chr = value.charAt(i);\n\n                        if (isWhitespace(chr)) {\n                            spaces.push(tokens.length);\n                        } else {\n                            nonSpace = true;\n                        }\n\n                        tokens.push(['text', chr, start, start + 1]);\n                        start += 1;\n\n                        // Check for whitespace on the current line.\n                        if (chr === '\\n') stripSpace();\n                    }\n                }\n\n                // Match the opening tag.\n                if (!scanner.scan(openingTagRe)) break;\n\n                hasTag = true;\n\n                // Get the tag type.\n                type = scanner.scan(tagRe) || 'name';\n                scanner.scan(whiteRe);\n\n                // Get the tag value.\n                if (type === '=') {\n                    value = scanner.scanUntil(equalsRe);\n                    scanner.scan(equalsRe);\n                    scanner.scanUntil(closingTagRe);\n                } else if (type === '{') {\n                    value = scanner.scanUntil(closingCurlyRe);\n                    scanner.scan(curlyRe);\n                    scanner.scanUntil(closingTagRe);\n                    type = '&';\n                } else {\n                    value = scanner.scanUntil(closingTagRe);\n                }\n\n                // Match the closing tag.\n                if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n                token = [type, value, start, scanner.pos];\n                tokens.push(token);\n\n                if (type === '#' || type === '^') {\n                    sections.push(token);\n                } else if (type === '/') {\n                    // Check section nesting.\n                    openSection = sections.pop();\n\n                    if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n                    if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n                } else if (type === 'name' || type === '{' || type === '&') {\n                    nonSpace = true;\n                } else if (type === '=') {\n                    // Set the tags for the next time around.\n                    compileTags(value);\n                }\n            }\n\n            // Make sure there are no open sections when we're done.\n            openSection = sections.pop();\n\n            if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n            return nestTokens(squashTokens(tokens));\n        }\n\n        /**\n         * Combines the values of consecutive text tokens in the given `tokens` array\n         * to a single token.\n         */\n        function squashTokens(tokens) {\n            var squashedTokens = [];\n\n            var token, lastToken;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                if (token) {\n                    if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n                        lastToken[1] += token[1];\n                        lastToken[3] = token[3];\n                    } else {\n                        squashedTokens.push(token);\n                        lastToken = token;\n                    }\n                }\n            }\n\n            return squashedTokens;\n        }\n\n        /**\n         * Forms the given array of `tokens` into a nested tree structure where\n         * tokens that represent a section have two additional items: 1) an array of\n         * all tokens that appear in that section and 2) the index in the original\n         * template that represents the end of that section.\n         */\n        function nestTokens(tokens) {\n            var nestedTokens = [];\n            var collector = nestedTokens;\n            var sections = [];\n\n            var token, section;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                token = tokens[i];\n\n                switch (token[0]) {\n                    case '#':\n                    case '^':\n                        collector.push(token);\n                        sections.push(token);\n                        collector = token[4] = [];\n                        break;\n                    case '/':\n                        section = sections.pop();\n                        section[5] = token[2];\n                        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n                        break;\n                    default:\n                        collector.push(token);\n                }\n            }\n\n            return nestedTokens;\n        }\n\n        /**\n         * A simple string scanner that is used by the template parser to find\n         * tokens in template strings.\n         */\n        function Scanner(string) {\n            this.string = string;\n            this.tail = string;\n            this.pos = 0;\n        }\n\n        /**\n         * Returns `true` if the tail is empty (end of string).\n         */\n        Scanner.prototype.eos = function eos() {\n            return this.tail === '';\n        };\n\n        /**\n         * Tries to match the given regular expression at the current position.\n         * Returns the matched text if it can match, the empty string otherwise.\n         */\n        Scanner.prototype.scan = function scan(re) {\n            var match = this.tail.match(re);\n\n            if (!match || match.index !== 0) return '';\n\n            var string = match[0];\n\n            this.tail = this.tail.substring(string.length);\n            this.pos += string.length;\n\n            return string;\n        };\n\n        /**\n         * Skips all text until the given regular expression can be matched. Returns\n         * the skipped string, which is the entire tail if no match can be made.\n         */\n        Scanner.prototype.scanUntil = function scanUntil(re) {\n            var index = this.tail.search(re),\n                match;\n\n            switch (index) {\n                case -1:\n                    match = this.tail;\n                    this.tail = '';\n                    break;\n                case 0:\n                    match = '';\n                    break;\n                default:\n                    match = this.tail.substring(0, index);\n                    this.tail = this.tail.substring(index);\n            }\n\n            this.pos += match.length;\n\n            return match;\n        };\n\n        /**\n         * Represents a rendering context by wrapping a view object and\n         * maintaining a reference to the parent context.\n         */\n        function Context(view, parentContext) {\n            this.view = view;\n            this.cache = { '.': this.view };\n            this.parent = parentContext;\n        }\n\n        /**\n         * Creates a new context using the given view with this context\n         * as the parent.\n         */\n        Context.prototype.push = function push(view) {\n            return new Context(view, this);\n        };\n\n        /**\n         * Returns the value of the given name in this context, traversing\n         * up the context hierarchy if the value is absent in this context's view.\n         */\n        Context.prototype.lookup = function lookup(name) {\n            var cache = this.cache;\n\n            var value;\n            if (cache.hasOwnProperty(name)) {\n                value = cache[name];\n            } else {\n                var context = this,\n                    names,\n                    index,\n                    lookupHit = false;\n\n                while (context) {\n                    if (name.indexOf('.') > 0) {\n                        value = context.view;\n                        names = name.split('.');\n                        index = 0;\n\n                        /**\n                         * Using the dot notion path in `name`, we descend through the\n                         * nested objects.\n                         *\n                         * To be certain that the lookup has been successful, we have to\n                         * check if the last object in the path actually has the property\n                         * we are looking for. We store the result in `lookupHit`.\n                         *\n                         * This is specially necessary for when the value has been set to\n                         * `undefined` and we want to avoid looking up parent contexts.\n                         **/\n                        while (value != null && index < names.length) {\n                            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);\n\n                            value = value[names[index++]];\n                        }\n                    } else {\n                        value = context.view[name];\n                        lookupHit = hasProperty(context.view, name);\n                    }\n\n                    if (lookupHit) break;\n\n                    context = context.parent;\n                }\n\n                cache[name] = value;\n            }\n\n            if (isFunction(value)) value = value.call(this.view);\n\n            return value;\n        };\n\n        /**\n         * A Writer knows how to take a stream of tokens and render them to a\n         * string, given a context. It also maintains a cache of templates to\n         * avoid the need to parse the same template twice.\n         */\n        function Writer() {\n            this.cache = {};\n        }\n\n        /**\n         * Clears all cached templates in this writer.\n         */\n        Writer.prototype.clearCache = function clearCache() {\n            this.cache = {};\n        };\n\n        /**\n         * Parses and caches the given `template` and returns the array of tokens\n         * that is generated from the parse.\n         */\n        Writer.prototype.parse = function parse(template, tags) {\n            var cache = this.cache;\n            var tokens = cache[template];\n\n            if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);\n\n            return tokens;\n        };\n\n        /**\n         * High-level method that is used to render the given `template` with\n         * the given `view`.\n         *\n         * The optional `partials` argument may be an object that contains the\n         * names and templates of partials that are used in the template. It may\n         * also be a function that is used to load partial templates on the fly\n         * that takes a single argument: the name of the partial.\n         */\n        Writer.prototype.render = function render(template, view, partials) {\n            var tokens = this.parse(template);\n            var context = view instanceof Context ? view : new Context(view);\n            return this.renderTokens(tokens, context, partials, template);\n        };\n\n        /**\n         * Low-level method that renders the given array of `tokens` using\n         * the given `context` and `partials`.\n         *\n         * Note: The `originalTemplate` is only ever used to extract the portion\n         * of the original template that was contained in a higher-order section.\n         * If the template doesn't use higher-order sections, this argument may\n         * be omitted.\n         */\n        Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {\n            var buffer = '';\n\n            var token, symbol, value;\n            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n                value = undefined;\n                token = tokens[i];\n                symbol = token[0];\n\n                if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);\n\n                if (value !== undefined) buffer += value;\n            }\n\n            return buffer;\n        };\n\n        Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {\n            var self = this;\n            var buffer = '';\n            var value = context.lookup(token[1]);\n\n            // This function is used to render an arbitrary template\n            // in the current context by higher-order sections.\n            function subRender(template) {\n                return self.render(template, context, partials);\n            }\n\n            if (!value) return;\n\n            if (isArray(value)) {\n                for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n                    buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n                }\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' || typeof value === 'string' || typeof value === 'number') {\n                buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n            } else if (isFunction(value)) {\n                if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n                // Extract the portion of the original template that the section contains.\n                value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n                if (value != null) buffer += value;\n            } else {\n                buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n            }\n            return buffer;\n        };\n\n        Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {\n            var value = context.lookup(token[1]);\n\n            // Use JavaScript's definition of falsy. Include empty arrays.\n            // See https://github.com/janl/mustache.js/issues/186\n            if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);\n        };\n\n        Writer.prototype.renderPartial = function renderPartial(token, context, partials) {\n            if (!partials) return;\n\n            var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n            if (value != null) return this.renderTokens(this.parse(value), context, partials, value);\n        };\n\n        Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return value;\n        };\n\n        Writer.prototype.escapedValue = function escapedValue(token, context) {\n            var value = context.lookup(token[1]);\n            if (value != null) return mustache.escape(value);\n        };\n\n        Writer.prototype.rawValue = function rawValue(token) {\n            return token[1];\n        };\n\n        mustache.name = 'mustache.js';\n        mustache.version = '2.3.0';\n        mustache.tags = ['{{', '}}'];\n\n        // All high-level mustache.* functions use this writer.\n        var defaultWriter = new Writer();\n\n        /**\n         * Clears all cached templates in the default writer.\n         */\n        mustache.clearCache = function clearCache() {\n            return defaultWriter.clearCache();\n        };\n\n        /**\n         * Parses and caches the given template in the default writer and returns the\n         * array of tokens it contains. Doing this ahead of time avoids the need to\n         * parse templates on the fly as they are rendered.\n         */\n        mustache.parse = function parse(template, tags) {\n            return defaultWriter.parse(template, tags);\n        };\n\n        /**\n         * Renders the `template` with the given `view` and `partials` using the\n         * default writer.\n         */\n        mustache.render = function render(template, view, partials) {\n            if (typeof template !== 'string') {\n                throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n            }\n\n            return defaultWriter.render(template, view, partials);\n        };\n\n        // This is here for backwards compatibility with 0.4.x.,\n        /*eslint-disable */ // eslint wants camel cased function name\n        mustache.to_html = function to_html(template, view, partials, send) {\n            /*eslint-enable*/\n\n            var result = mustache.render(template, view, partials);\n\n            if (isFunction(send)) {\n                send(result);\n            } else {\n                return result;\n            }\n        };\n\n        // Export the escaping function so that the user may override it.\n        // See https://github.com/janl/mustache.js/issues/244\n        mustache.escape = escapeHtml;\n\n        // Export these mainly for testing, but also for advanced usage.\n        mustache.Scanner = Scanner;\n        mustache.Context = Context;\n        mustache.Writer = Writer;\n\n        return mustache;\n    });\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */\nreturn okanjo;\n}));\n","// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n    Array.from = (function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function (fn) {\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function (value) {\n            var number = Number(value);\n            if (isNaN(number)) { return 0; }\n            if (number === 0 || !isFinite(number)) { return number; }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function (value) {\n            var len = toInteger(value);\n            return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike/*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T;\n            if (typeof mapFn !== 'undefined') {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < len… (also steps a - h)\n            var kValue;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }());\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.find\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return kValue.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return undefined.\n            return undefined;\n        }\n    });\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nif (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n        value: function(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return k.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return k;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return -1.\n            return -1;\n        }\n    });\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n        value: function(searchElement, fromIndex) {\n\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}","// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || window;\n        for (var i = 0; i < this.length; i++) {\n            callback.call(thisArg, this[i], i, this);\n        }\n    };\n}","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign != 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, \"assign\", {\n        value: function assign(target, varArgs) { // .length of function is 2\n            'use strict';\n            if (target == null) { // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) { // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        },\n        writable: true,\n        configurable: true\n    });\n}","\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nconst okanjo = (function(window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    const SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    const CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    const AGENT = window.navigator.userAgent;\n    const ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    const MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    const NOOP = () => {};\n    const Console = window.console;\n\n    // Place to pull defaults, if already set\n    const settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    const okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"%%OKANJO_VERSION\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: (...args) => {\n            let err = args.find((arg) => arg instanceof Error);\n            if (!err) {\n                let messageIndex = args.findIndex((arg) => typeof arg === \"string\");\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                let stack = (new Error()).stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter((a) => a !== err);\n            }\n\n            Console.error(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: (message, ...args) => {\n            const err = new Error(message);\n\n            Console.warn(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: (selector, parent) => {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: (route, params, env) => {\n            if (params) {\n                Object.keys(params).forEach((key) => {\n                    route = route.replace(`:${key}`, params[key]+\"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: (val) => val === null || val === undefined || (typeof val === \"string\" && val.trim().length === 0),\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: () => {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: (includeHashArguments) => {\n\n            const split = (query) => {\n                query = query || \"\";\n                const params = {};\n                const parts = query.split('&');\n                parts.forEach((part) => {\n                    const eqIndex = part.indexOf('=');\n                    let key, value;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            const queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            const hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach((key) => queryArgs[key] = hashArgs[key]);\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = (mixed, out) => {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map((val) => okanjo.util.deepClone(val)));\n        } else if (typeof mixed === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach((key) => {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = (input, options = {}) => {\n        const output = {};\n\n        if (input !== undefined && input !== null) {\n            Object\n                .keys(input)\n                .forEach((key) => {\n                    // Convert object ids to hex strings\n                    if (input[key] instanceof Date) {\n                        if (options.dateToIso) {\n                            output[key] = input[key].toISOString(); // convert to iso\n                        } else {\n                            output[key] = input[key]; // as-is\n                        }\n                    } else if (typeof input[key] === 'object' && input[key] !== null) {\n                        // Allow ignoring arrays if desired\n                        if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                            output[key] = input[key];\n                        } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                            output[key] = input[key].join(',');\n                        } else {\n                            // Make child objects flat too (always returns object so Object.keys is safe)\n                            const childObject = okanjo.util.flatten(input[key], options);\n                            Object\n                                .keys(childObject)\n                                .forEach((childKey) => {\n                                    output[key + '_' + childKey] = childObject[childKey];\n                                })\n                            ;\n                        }\n                    } else {\n                        // Copy value references\n                        output[key] = input[key];\n                    }\n                })\n            ;\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = (function(clusterWorkerId) {\n\n        const shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n\n            crypto = window.crypto || window.msCrypto || (typeof require === \"function\" && require('crypto')),\n\n            randomByte = () => {\n                /* istanbul ignore next: platform diffs out of scope */\n                if (crypto && crypto.randomBytes) {\n                    return crypto.randomBytes(1)[0] & 0x30;\n                } else if (!crypto || !crypto.getRandomValues) {\n                    return Math.floor(Math.random() * 256) & 0x30;\n                }\n                /* istanbul ignore next: platform diffs out of scope */\n                const dest = new Uint8Array(1);\n                /* istanbul ignore next: platform diffs out of scope */\n                crypto.getRandomValues(dest);\n                /* istanbul ignore next: platform diffs out of scope */\n                return dest[0] & 0x30;\n            },\n\n            encode = (number) => {\n                let loopCounter = 0,\n                    done,\n                    str = '';\n\n                while (!done) {\n                    str = str + shuffled[ ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() ];\n                    done = number < (Math.pow(16, loopCounter + 1 ) );\n                    loopCounter++;\n                }\n                return str;\n            },\n\n            // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n            // This number should be updated every year or so to keep the generated id short.\n            // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n            REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        let counter,\n            previousSeconds;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function() {\n            let str = '',\n                seconds = Math.floor(((new Date()).getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    })();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: () => {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: (element, includeMargin) => {\n            const size = {\n                height: element.offsetHeight,\n                width : element.offsetWidth\n            };\n            const style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: () => {\n            const body = document.querySelector('body');\n            const html = document.documentElement;\n\n            return {\n                w: Math.max(\n                    body.scrollWidth,\n                    body.offsetWidth,\n                    html.clientWidth,\n                    html.scrollWidth,\n                    html.offsetWidth\n                ),\n\n                h: Math.max(\n                    body.scrollHeight,\n                    body.offsetHeight,\n                    html.clientHeight,\n                    html.scrollHeight,\n                    html.offsetHeight\n                )\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: () => {\n            const element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */: document.body;\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            const inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            const isMobileZoom = (inWidth && width > inWidth) || (inHeight && height > inHeight);\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: (event) => {\n            const ex = event.pageX;\n            const ey = event.pageY;\n            const body = document.body;\n            const el = document.documentElement;\n            const scrollLeft = 'scrollLeft';\n            const scrollTop = 'scrollTop';\n            const type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: (element) => {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            const err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                let rect = element.getBoundingClientRect();\n                let body = document.body.getBoundingClientRect();\n                // let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    // x1: rect.left + pos.x,\n                    // y1: rect.top + pos.y,\n                    // x2: rect.right + pos.x,\n                    // y2: rect.bottom + pos.y\n\n                    // This might fix\n                    x1: rect.left - body.left,\n                    y1: rect.top - body.top,\n                    x2: rect.right - body.left,\n                    y2: rect.bottom - body.top,\n\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: (e, s, v) => {\n            let iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x+v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y+v.vh),\n\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea,\n                elementArea\n            };\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: (element) => {\n            let e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n            let { intersectionArea, elementArea } = okanjo.ui._getIntersection(e,s,v);\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function(element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        const parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        let text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000, // Safety switch to bust out of the loop in the event something goes terribly wrong\n            replacer = (match) => {\n                /* istanbul ignore next: n/a to jsdom */\n                replacedText = match.substr(0, match.length-3) + replacedText;\n                /* istanbul ignore next: n/a to jsdom */\n                return '...';\n            };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && (safety-- > 0)) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            let content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class','okanjo-ellipses');\n            span.setAttribute('class','okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length-3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length-3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n\n})(window, document);","\"use strict\";\n\n(function(window) {\n\n    const JSON_TEST = /^application\\/json/;\n    const okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        const req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        let calledBack = false;\n\n        // Normalized done handler\n        const done = function(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function(e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function(e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    let res;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST','PUT','PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    const encode = (val) => {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent(''+val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    const getKey = (key, keyPrefix) => {\n        if (keyPrefix) {\n            return `${keyPrefix}[${encode(key)}]`;\n        } else {\n            return encode(key)\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = (obj, keyPrefix) => {\n        let pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach((v) => pairs.push(getKey(key, keyPrefix) + '=' + encode(v))); // Does not do that PHP garbage with key[]=val\n            } else if (typeof value === \"object\" && value !== null) {\n                // Recurse\n                let res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: (cookieName, value, expireDays) => {\n            const expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            const expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            const path = \" Path=/\";\n            const cookieValue = `${encodeURI(value)};${expires}${path}`;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: (cookieName) => {\n            let output = null;\n            document.cookie\n                .split(\";\")\n                .find((cookie) => {\n                    let nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                    let value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                    if (nameTest === cookieName) {\n                        output = decodeURI(value);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                })\n            ;\n            return output;\n        }\n    };\n\n})(window, document);","\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n    class TemplateEngine {\n\n        constructor() {\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n        registerTemplate(name, template, beforeRender, options) {\n\n            if (typeof template === \"object\") {\n                //noinspection JSValidateTypes\n                if (template.nodeType === undefined) {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                } else {\n                    template = template.innerHTML;\n                    okanjo.lib.Mustache.parse(template);\n                }\n            } else if (typeof template !== \"string\") {\n                throw new Error('Parameter template must be a string or a DOM element');\n            }\n\n            // Shift options if only have 3 params\n            if (arguments.length === 3 && typeof beforeRender === \"object\") {\n                options = beforeRender;\n                beforeRender = null;\n            } else {\n                options = options || {};\n            }\n\n            if (beforeRender && typeof beforeRender !== \"function\") {\n                throw new Error('Parameter beforeRender must be a function');\n            }\n\n            // Assign the template\n            this._templates[name] = {\n                markup: template,\n                options,\n                beforeRender\n            };\n        }\n\n        /**\n         * Registers a CSS payload for use\n         * @param name\n         * @param css\n         * @param options\n         */\n        registerCss(name, css, options) {\n            options = options || {};\n\n            if (typeof css === \"object\") {\n                //noinspection JSValidateTypes\n                if (css.nodeType === undefined) {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n            } else if (typeof css !== \"string\") {\n                throw new Error('Parameter css must be a string or a DOM element');\n            }\n\n            this._css[name] = {\n                markup: css,\n                options: options\n            };\n        }\n\n        /**\n         * Checks whether a template is registered\n         * @param name\n         * @return {boolean}\n         */\n        isTemplateRegistered(name) {\n            return !!this._templates[name];\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Checks whether a CSS payload is registered\n         * @param name\n         * @return {boolean}\n         */\n        isCssRegistered(name) {\n            return !!this._css[name];\n        }\n\n        /**\n         * Ensures that a CSS payload has been added to the DOM\n         * @param name\n         */\n        ensureCss(name) {\n            if (this._css[name]) {\n                //noinspection JSValidateTypes\n                const css = this._css[name],\n                    id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                // Check for css element on page, if we have an ID to look for\n                if (id) {\n                    const element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                    if (!element) {\n                        const head = document.head,\n                            style = document.createElement('style');\n\n                        style.id = id;\n                        style.setAttribute('type', 'text/css');\n\n                        /* istanbul ignore else: old ie */\n                        if (style.hasOwnProperty) { // old ie\n                            style.innerHTML = css.markup;\n                        } else {\n                            style.styleSheet.cssText = css.markup;\n                        }\n\n                        if (head) {\n                            head.appendChild(style);\n                        } else {\n                            // NO HEAD, just prepend to body then\n                            const body = document.body;\n                            if (body) {\n                                body.appendChild(style);\n                            } else {\n                                // And if this doesn't work, just give up\n                                okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                            }\n                        }\n                    }\n                }\n            } else {\n                okanjo.report('Attempted to add CSS template \"'+name+'\" to the DOM, however it does not appear to be registered?');\n            }\n        }\n\n        /**\n         * Renders a template and returns the markup\n         * @param templateName\n         * @param context\n         * @param model\n         * @return {string}\n         */\n        render(templateName, context, model) {\n\n            model = model || {};\n            const template = this._templates[templateName];\n\n            // If there's a data controller closure set, and if so, run the data through there\n            if (template.beforeRender) {\n                model = template.beforeRender.call(context, model);\n            }\n\n            // Attach globals\n            model.okanjo = okanjo;\n            model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//,''); // Url w/o scheme to prevent mixed-content warnings\n            model.now = function() { return (new Date()).getTime(); };\n            model.classDetects = this.classDetects;\n\n            //noinspection JSUnresolvedVariable\n            if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                model.classDetects += \" \" + model.blockClasses.join(' ');\n                delete model.blockClasses;\n            }\n\n            // Add CSS unless we are told not to\n            if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                template.options.css.forEach((css) => this.ensureCss(css));\n                delete model.css;\n            }\n\n            // Render the template and return the result\n            return okanjo.lib.Mustache.render(template.markup, model);\n        }\n\n    }\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n    TemplateEngine.formatCurrency = (value, decimals=2, decimalSeparator='.', thousandsSeparator=',') => {\n        const s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        let j = i.length;\n        j = (j) > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    /*\n\n     div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n\n     */\n\n    const okanjo = window.okanjo;\n    const IS_MOBILE = okanjo.util.isMobile();\n\n    let initialized = false,\n        // scrollY = null,\n\n        // Selectors\n        $html, $body, $modalContainer, $modalWindow, $modalSkin, $modalOuter, $modalInner, $modalClose, $modalFrame,\n\n        createElements = function() {\n\n            // Page elements\n            //noinspection JSUnresolvedFunction\n            $html = document.documentElement /* istanbul ignore next: old browsers */ || document.querySelector('html');\n            //noinspection JSUnresolvedFunction\n            $body = document.body /* istanbul ignore next: old browsers */ || document.querySelector('body');\n\n            // Modal elements\n            $modalContainer = document.createElement('div');\n            $modalWindow = document.createElement('div');\n            $modalSkin = document.createElement('div');\n            $modalOuter = document.createElement('div');\n            $modalInner = document.createElement('div');\n            $modalClose = document.createElement('div');\n            $modalFrame = document.createElement('iframe');\n\n            $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n            $modalWindow.setAttribute('class', 'okanjo-modal-window');\n            $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n            $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n            $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n            $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n            $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n            $modalFrame.setAttribute('frameborder', '0');\n            $modalFrame.setAttribute('vspace', '0');\n            $modalFrame.setAttribute('hspace', '0');\n            $modalFrame.setAttribute('webkitallowfullscreen', '');\n            $modalFrame.setAttribute('mozallowfullscreen', '');\n            $modalFrame.setAttribute('allowfullscreen', '');\n            $modalFrame.setAttribute('scrolling', 'auto');\n\n            $modalClose.innerHTML = '×';\n\n            // Create the modal element tree\n            $modalInner.appendChild($modalFrame);\n            $modalOuter.appendChild($modalInner);\n            $modalSkin.appendChild($modalOuter);\n            $modalWindow.appendChild($modalSkin);\n            $modalWindow.appendChild($modalClose);\n            $modalContainer.appendChild($modalWindow);\n\n            // Add the modal stuff to the body\n            $body.appendChild($modalContainer);\n        },\n\n        addListener = function(el, event, handler) {\n            /* istanbul ignore else: old browsers */\n            if (el.addEventListener) {\n                el.addEventListener(event, handler, false);\n            } else {\n                el.attachEvent(\"on\" + event, handler);\n            }\n        },\n\n        getWindowHeight = function() {\n            return window.innerHeight /* istanbul ignore next: old browsers */ || document.documentElement.clientHeight;\n        },\n\n        handleReposition = function() {\n            // scrollY = okanjo.ui.getScrollPosition().y;\n            //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n            $modalWindow.style.height = (getWindowHeight() - 80) + \"px\";\n        },\n\n        bindEvents = function() {\n\n            // If the device orientation changes, adjust the modal view port\n            addListener(window, 'orientationchange', function() {\n                for (let t = 0; t < 2; t++) {\n                    setTimeout(handleReposition, 1000 * t + 10);\n                }\n            });\n\n            // If the window changes size, also adjust the modal view port\n            addListener(window, 'resize', function() {\n                setTimeout(handleReposition, 100);\n            });\n\n            // Click the overlay to close the modal\n            addListener($modalContainer, 'click', closeModal);\n\n            // If you click in the modal, don't close it!\n            addListener($modalWindow, 'click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Click the close button to close it\n            addListener($modalClose, 'click', function(e) {\n\n                // Don't close it twice\n                e.preventDefault();\n                e.stopPropagation();\n\n                closeModal();\n            });\n\n        },\n\n        //removeListener = function(el, event, handler) {\n        //    if (el.removeEventListener) {\n        //        el.removeEventListener(event, handler);\n        //    } else {\n        //        el.detachEvent(\"on\" + event, handler);\n        //    }\n        //},\n\n        addClass = function(el, name) {\n            el.className += \" \" + name;\n        },\n\n        removeClass = function(el, name) {\n            el.className = el.className.replace(new RegExp(' *?'+name), '');\n        },\n\n        openModal = function() {\n\n            // scrollY = document.body.scrollTop;\n\n            removeClass($modalContainer, 'okanjo-modal-hidden');\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            handleReposition();\n\n            addClass($html, \"okanjo-modal-active\");\n\n            if (!IS_MOBILE) {\n                addClass($html, \"okanjo-modal-margin-fix\");\n            }\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n            }, 10);\n\n            // Click the overlay to close the modal\n            //addListener($body, 'click', closeModal);\n\n        },\n\n        closeModal = function() {\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n                addClass($modalContainer, \"okanjo-modal-hidden\");\n\n                removeClass($html, \"okanjo-modal-active\");\n                if (!IS_MOBILE) {\n                    removeClass($html, \"okanjo-modal-margin-fix\");\n                }\n            }, 210);\n\n            // Click the overlay to close the modal\n            //removeListener($body, 'click', closeModal);\n        },\n\n        /**\n         * Insert an element or markup into the modal\n         * @param content\n         */\n        setContent = function(content) {\n\n            // Remove existing content\n            $modalInner.innerHTML = \"\";\n\n            // Insert new content\n            if (typeof content === \"string\") {\n                $modalInner.innerHTML = content;\n            } else {\n                $modalInner.appendChild(content);\n            }\n        };\n\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n    class Metrics {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n        _getStoredQueue() {\n            if (window.localStorage[Metrics.Params.queue]) {\n                try {\n                    let queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                    if (Array.isArray(queue)) {\n                        return queue;\n                    } else {\n                        okanjo.report('Stored queue is not a queue', {queue});\n                        return [];\n                    }\n                } catch (e) {\n                    okanjo.report('Failed to load metric queue from storage', {err: e});\n                    return [];\n                }\n            } else {\n                // not stored\n                return [];\n            }\n        }\n\n        /**\n         * Updates the queue stored in storage, in the event we can't complete our submissions\n         * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n         * @private\n         */\n        _saveQueue(delay) {\n            if (delay) {\n                if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                this._saveQueueTimeout = setTimeout(() => {\n                    this._saveQueue(false);\n                    this._saveQueueTimeout = null;\n                }, 100);\n            } else {\n                window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n            }\n        }\n\n        /**\n         * Extract contextual pass-through data from the URL, if present\n         * @private\n         */\n        _checkUrlForReferral() {\n            const pageArgs = okanjo.util.getPageArguments(true),\n                urlSid = pageArgs[Metrics.Params.name],\n                localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name), // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                sourceChannel = pageArgs[Metrics.Params.channel];\n\n            // If for some reason, both are set, record the incident as a possible correlation\n            if (urlSid && localSid && urlSid !== localSid) {\n                this.trackEvent({\n                    object_type: Metrics.Object.metric_session,\n                    event_type: Metrics.Event.correlation,\n                    id: urlSid+\"_\"+localSid,\n                    ch: this.defaultChannel,\n                    _noProcess: true\n                });\n            }\n\n            // Update local values\n            this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n            this.sourceCh = sourceChannel || null;\n            this.sourceCx = sourceContext || null;\n        }\n\n        /**\n         * Submits an individual event metric\n         * @param event\n         * @param callback\n         */\n        trackEvent(event, callback) {\n            // Ensure the event contains the required fields\n            if (!event.object_type || !event.event_type) {\n                okanjo.report('Invalid metric to track (missing object_type or event_type)', {event});\n                return;\n            }\n\n            // Queue the event for publishing\n            this._push(event, callback);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Submits a page view metric\n         * @param event\n         * @param callback\n         */\n        trackPageView(event, callback) {\n            event = event || {};\n            event.object_type = Metrics.Object.page;\n            event.event_type = Metrics.Event.view;\n            event.id = event.id || window.location.href;\n            event.ch = event.ch || this.defaultChannel;\n\n            // Queue the event for publishing\n            this.trackEvent(event, callback);\n        }\n\n        /**\n         * Adds an event to the queue\n         * @param event\n         * @param callback\n         * @private\n         */\n        _push(event, callback) {\n            this._queue.push({ event, callback });\n\n            // Save the queue\n            this._saveQueue(true);\n\n            // Start burning down the queue, unless the event says not to\n            if (event._noProcess) {\n                delete event._noProcess;\n            } else {\n                this._processQueue();\n            }\n        }\n\n        /**\n         * Burn down the queue\n         * @private\n         */\n        _processQueue() {\n            // If the queue is not already being processed, and there's stuff to process, continue sending them\n            if (!this._processTimeout && this._queue.length > 0) {\n                this._processTimeout = setTimeout(() => {\n\n                    // Pull the items we're going to batch out of the queue\n                    const items = this._queue.splice(0, 255);\n                    this._saveQueue(false);\n\n                    // Track the item\n                    this._batchSend(items, (err, res) => {\n                        // TODO: If there was an error, consider splicing the batch back into the queue\n\n                        // Update / Set the metric sid on the publisher\n                        /* istanbul ignore else: server barks */\n                        if (res && res.data && res.data.sid) this._updateSid(res.data.sid);\n\n                        // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                        this._processTimeout = null;\n                        this._processQueue();\n\n                        // Fire the event callbacks if there are any\n                        items.forEach((item) => {\n                            item.callback && item.callback(err, res);\n                        });\n                    });\n\n                }, 0); // break event loop, maybe\n            }\n        }\n\n        /**\n         * Sends a bunch of queued metric events\n         * @param items\n         * @param callback\n         * @private\n         */\n        _batchSend(items, callback) {\n\n            // Normalize event data\n            const events = items.map((item) => {\n                this._normalizeEvent(item.event);\n\n                // Strip duplicated data from event batch\n                delete item.event.sid;\n                delete item.event.win;\n\n                return item.event;\n            });\n\n            const payload = {\n                events,\n                win: window.location.href\n            };\n\n            const route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n            // Set sid if present\n            if (this.sid) {\n                payload.sid = this.sid;\n            }\n\n            // Send it\n            okanjo.net.request.post(\n                route,\n                payload,\n                (err, res) => {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err, res, items, route });\n                    }\n                    callback && callback(err, res);\n                }\n            );\n        }\n\n        /**\n         * Normaizes events so that they contain consistent data values\n         * @param event\n         * @private\n         */\n        _normalizeEvent(event) {\n\n            // Ensure meta is ready to receive values\n            event.m = event.m || {};\n\n            // Set key\n            event.key = event.key || event.m.key || okanjo.key || undefined;\n\n            // Set session\n            if (this.sid) event.sid = this.sid;\n\n            // Clone the metadata, since it might be a direct reference to a widget property\n            // Deleting properties on the meta object could be very destructive\n            event.m = Object.assign({}, event.m); // event.m should be flat\n\n            // Strip meta keys that should be excluded\n            Object.keys(Metrics.Meta.exclude).forEach((key) => delete event.m[key]);\n\n            // Set referral channel / context\n            if (this.sourceCh) { event.m.ref_ch = this.sourceCh; }\n            if (this.sourceCx) { event.m.ref_cx = this.sourceCx; }\n\n            // Set page group id\n            event.m.pgid = this.pageId;\n\n            // Set okanjo version\n            event.m.ok_ver = okanjo.version;\n\n            // Finalize metadata\n            event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n            // Ensure metadata strings won't exceed the imposed limit\n            Object.keys(event.m).forEach((key) => {\n                if (typeof event.m[key] === \"string\") {\n                    event.m[key] = event.m[key].substr(0, 255);\n                }\n            });\n\n            // Set page source reference\n            if (document.referrer) {\n                event.ref = document.referrer;\n            }\n\n             // Set the window location\n            event.win = window.location.href;\n        }\n\n        /**\n         * Updates the stored session identifier\n         * @param sid\n         * @private\n         */\n        _updateSid(sid) {\n            if (!this.sid && sid) {\n                this.sid = sid;\n                window.localStorage[Metrics.Params.name] = sid;\n                okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @param event\n         * @return {*|{}}\n         */\n        static addElementInfo(element, event) {\n            const page = okanjo.ui.getPageSize(),\n                size = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.pw = page.w;\n            event.m.ph = page.h;\n            event.m.x1 = size.x1;\n            event.m.y1 = size.y1;\n            event.m.x2 = size.x2;\n            event.m.y2 = size.y2;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @param event\n         * @return {*|{}}\n         */\n        static addViewportInfo(event) {\n            const vp = okanjo.ui.getViewportSize(),\n                pos = okanjo.ui.getScrollPosition();\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.vx1 = pos.x;\n            event.m.vy1 = pos.y;\n            event.m.vx2 = pos.x+vp.vw;\n            event.m.vy2 = pos.y+vp.vh;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @param event\n         * @return {*|{}}\n         */\n        static addEventInfo(jsEvent, event) {\n            const pos = okanjo.ui.getEventPosition(jsEvent);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.et = pos.et;\n            event.m.ex = pos.ex;\n            event.m.ey = pos.ey;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param event\n         * @param args\n         * @return {*|{}}\n         */\n        static addEventMeta(event, ...args) {\n            event = event || {};\n            event.m = event.m || {};\n            event.m = Object.assign.apply(Object, [event.m].concat(args));\n            \n            return event;\n        }\n\n        /**\n         * Helper to create a new fluent event structure\n         * @param data\n         * @param args\n         * @return {MetricEvent}\n         */\n        static create(data, ...args) {\n            // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n            return new MetricEvent(data, args);\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Helper to create a new fluent event structure\n         * @param args\n         * @return {*}\n         */\n        create(...args) {\n            return Metrics.create.apply(null, args);\n        }\n\n    }\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key','callback','metrics_channel_context','metrics_context','mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n    class MetricEvent {\n        constructor(data, others) {\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach((data) => {\n                    this.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n        data(data) {\n            Object.assign(this, okanjo.util.deepClone(data));\n            return this;\n        }\n\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @return {MetricEvent}\n         */\n        event(jsEvent) {\n            Metrics.addEventInfo(jsEvent, this);\n            return this;\n        }\n\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @return {MetricEvent}\n         */\n        viewport() {\n            Metrics.addViewportInfo(this);\n            return this;\n        }\n\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @return {MetricEvent}\n         */\n        element(element) {\n            Metrics.addElementInfo(element, this);\n            return this;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param args\n         * @return {MetricEvent}\n         */\n        meta(...args) {\n            Metrics.addEventMeta.apply(null, [this].concat(args));\n            return this;\n        }\n\n        /**\n         * Sets the object and event type on the event w/o having to use .data\n         * @param object_type\n         * @param event_type\n         * @return {MetricEvent}\n         */\n        type(object_type, event_type) {\n            this.object_type = object_type;\n            this.event_type = event_type;\n            return this;\n        }\n\n        /**\n         * Finalizes and sends the event\n         * @param callback\n         */\n        send(callback) {\n            okanjo.metrics.trackEvent(this, callback);\n            // DONT RETURN - BREAK THE CHAIN HERE\n        }\n\n        /**\n         * Gets the single-metric tracking url for this event\n         * @return {string}\n         */\n        toUrl() {\n            // Copy data w/o modifying it\n            const event = Object.assign({}, this);\n\n            // Extract params\n            const {\n                object_type,\n                event_type\n            } = event;\n            delete event.object_type;\n            delete event.event_type;\n\n            // Normalize event data\n            okanjo.metrics._normalizeEvent(event);\n\n            // Get the URL\n            return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type, event_type }) + '?' +\n                okanjo.net.request.stringify(event);\n        }\n    }\n\n    // Export / initialize\n    okanjo.metrics = new Metrics();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({_noProcess:true});\n    setTimeout(() => {\n        okanjo.metrics._processQueue();\n    }, 1000);\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function(window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    class EventEmitter {\n\n        constructor() {\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n        on(event, listener) {\n            if (!this._events[event]) {\n                this._events[event] = [];\n            }\n\n            this._events[event].push(listener);\n        }\n\n        /**\n         * Removes an event handler for an event\n         * @param event\n         * @param listener\n         */\n        removeListener(event, listener) {\n\n            if (this._events[event]) {\n                let idx = this._events[event].indexOf(listener);\n                if (idx >= 0) {\n                    this._events[event].splice(idx, 1);\n                }\n            }\n        }\n\n        /**\n         * Emits an event\n         * @param event\n         */\n        emit(event) {\n            let i, listeners, length, args = [].slice.call(arguments, 1);\n\n            if (this._events[event]) {\n                listeners = this._events[event].slice();\n                length = listeners.length;\n\n                for (i = 0; i < length; i++) {\n                    listeners[i].apply(this, args);\n                }\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Registers an event handler to fire only once on an event\n         * @param event\n         * @param listener\n         */\n        once(event, listener) {\n\n            const callback = () => {\n                let args = [].slice.call(arguments, 1);\n                this.removeListener(event, callback);\n                listener.apply(this, args);\n            };\n\n            this.on(event, callback);\n        }\n\n    }\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n    const DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    const DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n    class Widget extends okanjo._EventEmitter {\n\n        constructor(element, options) {\n            super();\n\n            // Verify element was given (we can't load unless we have one)\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: this, element, options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && typeof options !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + typeof options, { widget: this, element, options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            this.name = 'Widget';\n            this.element = element;\n            this.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            this.config = Object.assign({}, options);\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n        init() {\n            // process config attributes\n            this._applyConfiguration();\n\n            this._setCompatibilityOptions();\n\n            // ensure placement key\n            if (!this._ensurePlacementKey()) return;\n\n            // Tell the widget to load\n            this.load();\n        }\n\n        /**\n         * This is for extended widgets, so they may modify the configuration before loading\n         */\n        _setCompatibilityOptions() {\n            // By default, this does nothing. Must be overridden to be useful\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Widget configuration definitions\n         * @return {{}}\n         */\n        getSettings() {\n            // Override this\n            return {};\n        }\n\n        /**\n         * Main widget load function.\n         */\n        load() {\n            // Override this in the widget implementation\n        }\n\n        /**\n         * Applies data attribute settings and defaults to the widget configuration\n         * @private\n         */\n        _applyConfiguration() {\n\n            // this.config was set to the options provided in the constructor\n            // so layer data attributes on top\n\n            const data = this.getDataAttributes();\n            const settings = this.getSettings();\n            Object\n                .keys(data)\n                .forEach((key) => {\n                    let normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    let val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        this.config[normalizedKey] = val;\n                    }\n                })\n            ;\n\n            // Apply defaults from the widget settings\n            Object.keys(settings).forEach((key) => {\n                if (this.config[key] === undefined && settings[key]._default !== undefined) {\n                    this.config[key] = settings[key].value(undefined, false);\n                }\n            });\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets a copy of the configuration, suitable for transmission\n         * @return {{}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = {};\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let group = null;\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        /**\n         * Before loading, ensure that a placement key is present or abort\n         * @return {boolean}\n         * @private\n         */\n        _ensurePlacementKey() {\n\n            // Check if set on widget or globally\n            if (this.config.key) {\n                return true;\n            } else if (okanjo.key) {\n                // Copy key from global scope,\n                this.config.key = okanjo.key;\n                return true;\n            }\n\n            // No key set, can't load.\n            okanjo.report('No key provided on widget', { widget: this });\n            this.showError('Error: Missing placement key.');\n            return false;\n        }\n\n        /**\n         * Displays an error in the widget element\n         * @param message\n         */\n        showError(message) {\n            this.setMarkup(okanjo.ui.engine.render(\n                'okanjo.error',\n                this,\n                { message }\n            ));\n        }\n\n        /**\n         * Sets the markup of the widget's element\n         * @param markup\n         */\n        setMarkup(markup) {\n            this.element.innerHTML = markup;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the current page URL, sans query string and fragment.\n         * @returns {string} - URL\n         */\n        static getCurrentPageUrl() {\n            return window.location.href.replace(/([?#].*)$/, '');\n        }\n\n        /**\n         * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n         * @returns {*}\n         */\n        getDataAttributes() {\n            const data = {};\n                Array\n                    .from(this.element.attributes)\n                    .forEach((attr) => {\n                        const match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                        if (match) {\n                            data[match[1]] = attr.value;\n                        }\n                    });\n            return data;\n        }\n\n    }\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n    Widget.Field = class Field {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n        array(converter) {\n            this._convert = (val) => {\n                if (Array.isArray(val)) {\n                    if (converter) {\n                        return val.map((v) => converter(v))\n                    } else {\n                        return val;\n                    }\n                }\n                val = val.replace(/\\\\,/g, '\\0');\n                return val.split(',').map((v) => {\n                    let res = v.trim().replace('\\0', ',');\n                    if (converter) res = converter(res);\n                    return res;\n                });\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static array(converter) { return (new Field()).array(converter); }\n\n        /**\n         * Formats the value as a string\n         * @return {Field}\n         */\n        string() {\n            this._convert = (val) => {\n                if (val === null || val === undefined) return val;\n                else return \"\"+val;\n            };\n            return this;\n        }\n        static string() { return (new Field()).string(); }\n\n        /**\n         * Formats the value as a boolean (takes 1, 0, true, false)\n         * @return {Field}\n         */\n        bool() {\n            this._convert = (val) => {\n                if (typeof val === \"string\") {\n                    return (val === \"1\" || val.toLowerCase() === \"true\");\n                } else {\n                    return !!val;\n                }\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static bool() { return (new Field()).bool(); }\n\n        /**\n         * Indicates the field should not be passed on for transmission\n         * @return {Field}\n         */\n        strip() { this._strip = true; return this; }\n        static strip() { return (new Field()).strip(); }\n\n        /**\n         * Formats the value as a integer (whole) number\n         * @return {Field}\n         */\n        int() { this._convert = (val) => parseInt(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static int() { return (new Field()).int(); }\n\n        /**\n         * Formats the value as a floating point number\n         * @return {Field}\n         */\n        float() { this._convert = (val) => parseFloat(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static float() { return (new Field()).float(); }\n\n        //noinspection ReservedWordAsName\n        /**\n         * Sets the default value to use if not set\n         * @param val\n         * @return {Field}\n         */\n        default(val) {\n            this._default = val;\n            return this;\n        }\n\n        /**\n         * Assigns the property to a bucket for hierarchy\n         * @param name\n         * @return {Field}\n         */\n        group(name) {\n            this._group = name;\n            return this;\n        }\n\n        /**\n         * Gets the group the field belongs to\n         * @return {*|null}\n         */\n        getGroup() {\n            return this._group;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the formatted value of the field\n         * @param val\n         * @param strip\n         * @return {*}\n         */\n        value(val, strip=true) {\n            if (this._strip && strip) return undefined;\n            if (val !== undefined && this._convert) {\n                val = this._convert(val);\n            }\n            return val !== undefined ? val : this._default;\n        }\n\n    };\n\n    // Export\n    return okanjo._Widget = Widget;\n\n})(window);\n\n\n\n","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    //region Imports and Constants\n\n    const okanjo = window.okanjo;\n    const { string, array, float, int, bool } = okanjo._Widget.Field;\n    const Metrics = okanjo.metrics.constructor;\n    const TemplateEngine = okanjo.ui.engine.constructor;\n\n    const FILTERS = 'filters';\n    const DISPLAY = 'display';\n    const ARTICLE_META = 'article_meta';\n\n    const MINIMUM_VIEW_PX = 0.5;    // 50% of pixels must be in viewport\n    const MINIMUM_VIEW_TIME = 1000; // for 1 full second\n    const MINIMUM_VIEW_FREQ = 2;    // time / freq = interval\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n    class Placement extends okanjo._Widget {\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        constructor(element, options = {}) {\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n            super(element, options);\n\n            this.name = 'Placement';\n            this._metricBase = {}; // placeholder for metrics\n            this._response = null;\n\n            // Aggregate view watchers into a single interval fn\n            this._viewWatcherIv = null;\n            this._viewedWatchers = [];\n\n            // Start loading content\n            if (!options.no_init) this.init();\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n        getSettings() {\n            return {\n\n                // What type of response do you want\n                type: string().group(FILTERS),\n\n                // What specific products do you want\n                ids: array().group(FILTERS),\n\n                // Filter by generic query string\n                q: string().group(FILTERS),\n\n                // Filter by relation to content\n                url: string().group(FILTERS),\n                url_referrer: string().group(FILTERS).strip(),\n                url_selectors: string().group(FILTERS),\n                url_paths: array().group(FILTERS),\n                not_url_paths: array().group(FILTERS),\n\n                // Filter by hierarchy\n                organization_id: string().group(FILTERS),\n                property_id: string().group(FILTERS),\n                store_id: string().group(FILTERS),\n\n                // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                organization_name: string().group(FILTERS),\n                property_name: string().group(FILTERS),\n                store_name: string().group(FILTERS),\n\n                // Filter by integrations\n                external_id: string().group(FILTERS),\n                sku: string().group(FILTERS),\n                external_store_id: string().group(FILTERS),\n\n                // Filter by product attributes\n                condition: string().group(FILTERS),\n                manufacturer: string().group(FILTERS),\n                upc: string().group(FILTERS),\n                isbn: string().group(FILTERS),\n\n                // Filter by categorization / distribution\n                tags: array().group(FILTERS),\n                category: array().group(FILTERS),\n                pools: array().group(FILTERS),\n\n                // Filter by price range\n                min_price: float().group(FILTERS),\n                max_price: float().group(FILTERS),\n\n                // Filter by donation ranges\n                min_donation_percent: float().group(FILTERS),\n                max_donation_percent: float().group(FILTERS),\n\n                // Filter by donation recipient\n                donation_to: string().group(FILTERS),\n\n                // Sorting\n                sort_by: string().group(FILTERS),\n                sort_direction: string().group(FILTERS),\n\n                // Pagination\n                skip: int().group(FILTERS),\n                take: int().group(FILTERS),\n\n                // Placement Testing\n                placement_tests_only: bool(),\n\n                // Display settings\n                size: string().group(DISPLAY),\n                template_name: string().group(DISPLAY),\n                template_layout: string().group(DISPLAY),\n                template_theme: string().group(DISPLAY),\n                template_cta_style: string().group(DISPLAY),\n                template_cta_text: string().group(DISPLAY),\n                template_cta_color: string().group(DISPLAY),\n                adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                // Article metadata\n                url_category: array().group(ARTICLE_META),\n                url_keywords: array().group(ARTICLE_META),\n\n                // Functional settings\n                key: string().strip(), // don't need to resend key on all our requests\n                no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                proxy_url: string().strip(),\n                expandable: bool().strip().default(true),\n                disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                backwards: string().strip() // internal flag indicating port from a deprecated widget\n            };\n        }\n\n        /**\n         * Gets the widget configuration formatted using settings, suitable for transmission\n         * @return {{filters: {}, display: {}, backfill: {}, article_meta: {}}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = { filters: {}, display: {}, backfill: {}, article_meta: {} };\n            const backfillPattern = /^backfill_(.+)$/; // backfill_property\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let isBackfill = false;\n                let group = null;\n\n                // Get the property name if it was prefixed with backfill\n                let matches = backfillPattern.exec(origKey);\n                if (matches) {\n                    key = matches[1];\n                    isBackfill = true;\n                }\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = isBackfill ? out.backfill : out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Core load process\n         */\n        load() {\n            // Set metric base data (stub for all future events emitted by the widget)\n            this._setMetricBase();\n\n            // Find out what we should display here\n            this._fetchContent((err) => {\n                if (err) {\n                    // Report the widget load as declined\n                    this._reportWidgetLoad(\"fetch failed: \" + err.statusCode /* istanbul ignore next: out of scope */ || err.toString());\n                } else {\n                    // Merge display settings from response\n                    this._mergeResponseSettings();\n\n                    // Merge the referential data from the response\n                    this._updateBaseMetaFromResponse();\n\n                    // Handle rendering based on output type\n                    this._showContent();\n                }\n            });\n        }\n\n        //endregion\n\n        //region Internal Helpers\n\n        /**\n         * Initializes the common metric data for events emitted by the placement\n         * @private\n         */\n        _setMetricBase() {\n            const base = this._metricBase;\n            base.ch = Metrics.Channel.placement;\n            base.cx = this.config.backwards || 'auto';\n            base.key = this.config.key;\n            base.m = base.m || {};\n            base.m.wgid = this.instanceId;\n        }\n\n        /**\n         * Emits the widget impression event\n         * @param declined\n         * @private\n         */\n        _reportWidgetLoad(declined) {\n\n            const res = this._response || {};\n            const data = res.data || { results: [] };\n\n            // If this is declined, mark future events as declined too\n            this._metricBase.m.decl = declined || '0';\n\n            // Attach other main response attributes to all future events\n            this._metricBase.m.res_bf = data.backfilled ? 1 : 0; // whether the response used the backup fill flow\n            this._metricBase.m.res_total = data.total || 0; // how many total candidate results were available given filters\n            this._metricBase.m.res_type = data.type; // what the given resource type was\n            this._metricBase.m.res_length = data.results.length; // what the given resource type was\n\n            // Track impression\n            okanjo.metrics.create(this._metricBase)\n                .type(Metrics.Object.widget, Metrics.Event.impression)\n                .meta(this.getConfig())\n                .element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport()\n                .send();\n\n            // Start watching for a viewable impression\n            this._addOnceViewedHandler(this.element, () => {\n                okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.widget, Metrics.Event.view)\n                    .meta(this.getConfig())\n                    .element(this.element)\n                    .viewport()\n                    .send();\n            });\n        }\n\n        /**\n         * Executes the request for content to fill the placement\n         * @param callback\n         * @private\n         */\n        _fetchContent(callback) {\n            // Build request to api, starting with this placement config params\n            const query = this.getConfig();\n\n            // Extract the key\n            const key = this.config.key;\n\n            // Attach sid and referrer\n            if (okanjo.metrics.sid) query.sid = okanjo.metrics.sid;\n            query.filters.url_referrer = this.config.url_referrer || window.location.href;\n            query.wgid = this.instanceId;\n            query.pgid = okanjo.metrics.pageId;\n\n            // Send it\n            okanjo.net.request.post(\n                `${okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live')}?key=${encodeURIComponent(key)}`,\n                query,\n                (err, res) => {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: this });\n                        this.setMarkup(''); // Don't show anything\n                        this.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        this._response = res;\n\n                        // Hook point for response handling\n                        this.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                }\n            );\n        }\n\n        /**\n         * Applies response filters and display settings into the widget configuration\n         * @private\n         */\n        _mergeResponseSettings() {\n            const res = this._response;\n            const data = res.data || {};\n            const settings = data.settings || {};\n\n            if (settings.filters) {\n                Object.keys(settings.filters).forEach((key) => {\n                    this.config[key] = settings.filters[key];\n                });\n            }\n\n            if (settings.display) {\n                Object.keys(settings.display).forEach((key) => {\n                    this.config[key] = settings.display[key];\n                });\n            }\n        }\n\n        /**\n         * Applies response data to future metric events\n         * @private\n         */\n        _updateBaseMetaFromResponse() {\n            // Update the base metric data with info from the response\n            const data = (this._response|| {}).data || {};\n            this._metricBase.m = this._metricBase.m || {};\n            const meta = this._metricBase.m;\n\n            // Article\n            if (data.article) meta.aid = data.article.id;\n\n            if (data.test && data.test.enabled) {\n                meta.pten = 1;\n                meta.ptid = data.test.id;\n                meta.ptseed = data.test.seed;\n            } else {\n                meta.pten = 0;\n            }\n        }\n\n        /**\n         * Beings the render process based on the response content\n         * @private\n         */\n        _showContent() {\n            const data = (this._response|| {}).data || {};\n\n            // Known content types we can display\n            if (data.type === Placement.ContentTypes.products) {\n                this._showProducts();\n            } else if (data.type === Placement.ContentTypes.articles) {\n                this._showArticles();\n            } else if (data.type === Placement.ContentTypes.adx) {\n                this._showADX();\n            } else {\n                // Unknown response type!\n\n                // Report the widget load as declined\n                const msg = 'Unknown response content type: ' + data.type;\n                okanjo.report(msg, { placement: this });\n                this.setMarkup(''); // Don't show anything\n                this.emit('error', msg);\n                this._reportWidgetLoad(msg);\n            }\n        }\n\n        /**\n         * Generates the click url using the event, proxy_url, and additional params\n         * @param event\n         * @param url\n         * @param additionalUrlParams\n         * @return {*}\n         * @private\n         */\n        _getClickThroughURL(event, url, additionalUrlParams) {\n            const joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n            // Tack on transfer params\n            additionalUrlParams = additionalUrlParams /* istanbul ignore next: paranoia */ || {};\n            additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n            additionalUrlParams.ok_ch = this._metricBase.ch;\n            additionalUrlParams.ok_cx = this._metricBase.cx;\n            additionalUrlParams.utm_source = 'okanjo';\n            additionalUrlParams.utm_campaign = 'smartserve';\n\n\n            url += joiner + Object.keys(additionalUrlParams)\n                    .map((key) => encodeURIComponent(key)+'='+encodeURIComponent(additionalUrlParams[key]))\n                    .join('&');\n\n            // Wrap the url if we're proxying\n            if (this.config.proxy_url) {\n                url = this.config.proxy_url + encodeURIComponent(url);\n            }\n\n            // Set the url on the event\n            event.data({\n                u: url\n            });\n\n            return event.toUrl();\n        }\n\n        /**\n         * Converts a resource's link into one suitable for tracking, making middle-click safe\n         * @param type\n         * @param resource\n         * @param e\n         * @private\n         */\n        _handleResourceMouseDown(type, resource, e) {\n            // Generate a new click id for this event\n            const clickId = okanjo.util.shortid();\n\n            // Start building the event\n            const event = okanjo.metrics.create(this._metricBase, {\n                id: resource.id\n            })\n                .type(type, Metrics.Event.interaction)\n                .meta(this.getConfig())\n                .meta({ cid: clickId })\n                .meta({ bf: resource.backfill ? 1 : 0 })\n                .event(e)\n                .element(e.currentTarget)\n                .viewport();\n\n            // Pull the proper params out of the resource depending on it's type\n            let trackParam = 'url_track_param';\n            let urlParam = 'url';\n\n            if (type === Metrics.Object.product) {\n                trackParam = 'buy_url_track_param';\n                urlParam = 'buy_url';\n            }\n\n            // Attach the campaign tracking identifier\n            const additionalParams = {\n                ok_cid: clickId\n            };\n            if (resource[trackParam]) additionalParams[resource[trackParam]] = (okanjo.metrics.sid || 'unknown') + ':' + clickId;\n\n            // Update the link with the event data\n            event.data({ ea: Metrics.Action.click });\n            e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n            // Cache this on the product\n            resource._clickId = clickId;\n            resource._event = event;\n            resource._additionalParams = additionalParams;\n        }\n\n        /**\n         * Gets the template to use, accounting for configured preference if available\n         * @param contentType\n         * @param defaultName\n         * @return {string}\n         * @private\n         */\n        _getTemplate(contentType, defaultName) {\n            let templateName = this.config.template_name;\n            if (!templateName ||\n                !okanjo.ui.engine.isTemplateRegistered(`${contentType}.${templateName}`)) {\n                templateName = defaultName;\n            }\n            return `${contentType}.${templateName}`;\n        }\n\n        /**\n         * Enforces size/layout/cta restrictions\n         * @private\n         */\n        _enforceLayoutOptions() {\n            // Enforce format restrictions\n            if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n                this.config.template_cta_style = \"link\";\n            } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            }\n        }\n\n        /**\n         * Register a custom\n         * @private\n         */\n        _registerCustomBranding(prefix, buttonClass) {\n            const brandColor = this.config.template_cta_color;\n            if (brandColor) {\n                let brandCSS,\n                    brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n\n                brandCSS = `\n                    ${prefix}-block2.${brandCSSId} ${prefix}-${buttonClass} { color: ${brandColor};} \n                    ${prefix}-block2.${brandCSSId}.okanjo-cta-style-button ${prefix}-${buttonClass} { border: 1px solid ${brandColor}; } \n                    ${prefix}-block2.${brandCSSId}.okanjo-cta-style-button ${prefix}-${buttonClass}:hover { background: ${brandColor}; } \n                `;\n\n                okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                okanjo.ui.engine.ensureCss(brandCSSId);\n            }\n        }\n\n        /**\n         * When element is in view per viewability constants (50% for 1s) trigger handler once\n         * @param element\n         * @param handler\n         * @private\n         */\n        _addOnceViewedHandler(element, handler) {\n            let controller = {\n                element,\n                successfulCount: 0,\n                handler\n            };\n\n            // Add our element to the watch list and turn on the watcher if not already on\n            this._viewedWatchers.push(controller);\n            this._toggleViewWatcher(true);\n        }\n\n        /**\n         * Interval function to check viewability of registered elements\n         * @private\n         */\n        _checkViewWatchers() {\n\n            // Check each registered watcher\n            for (let i = 0, controller; i < this._viewedWatchers.length; i++) {\n                controller = this._viewedWatchers[i];\n\n                // Check if watcher is complete, then remove it from the list\n                /* istanbul ignore if: jsdom won't trigger this */\n                if (okanjo.ui.getPercentageInViewport(controller.element) >= MINIMUM_VIEW_PX) {\n                    controller.successfulCount++;\n                }\n\n                // While this could more optimally be contained within the former condition, unit-testing blocks on this\n                if (controller.successfulCount >= MINIMUM_VIEW_FREQ) {\n                    controller.handler();\n                    this._viewedWatchers.splice(i, 1);\n                    i--;\n                }\n            }\n\n            // Turn off if nobody is watching\n            if (this._viewedWatchers.length === 0) {\n                this._toggleViewWatcher(false);\n            }\n        }\n\n        /**\n         * Turns the viewability watcher on and off\n         * @param enabled\n         * @private\n         */\n        _toggleViewWatcher(enabled) {\n            if (enabled) {\n                if (this._viewWatcherIv === null) {\n                    this._viewWatcherIv = setInterval(this._checkViewWatchers.bind(this), MINIMUM_VIEW_TIME / MINIMUM_VIEW_FREQ);\n                }\n            } else {\n                clearInterval(this._viewWatcherIv);\n                this._viewWatcherIv = null;\n            }\n        }\n\n        //endregion\n\n        //region Product Handling\n\n        /**\n         * Renders a product response\n         * @private\n         */\n        _showProducts() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n            // - render\n\n            // Format products\n            data.results.forEach((offer, index) => {\n                // Disable inline buy if configured to do so\n                if (this.config.disable_inline_buy) offer.inline_buy_url = null;\n                if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                // Set primary image\n                offer._image_url = offer.image_urls ? offer.image_urls[0] : '' ;\n\n                // Escape buy url (fixme: does not include proxy_url!)\n                offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                // Make price tag pretty\n                offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                offer._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break it */\n                if (id && index >= 0) {\n                    const product = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break it */\n                    if (product) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.product, product));\n                        a.addEventListener('click', this._handleProductClick.bind(this, product));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: product.id })\n                            .type(Metrics.Object.product, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({ bf: product.backfill ? 1 : 0 })\n                            .element(a)\n                            .viewport()\n                            .send();\n\n                        // Start watching for a viewable impression\n                        this._addOnceViewedHandler(a, () => {\n                            okanjo.metrics.create(this._metricBase, { id: product.id })\n                                .type(Metrics.Object.product, Metrics.Event.view)\n                                .meta(this.getConfig())\n                                .meta({ bf: product.backfill ? 1 : 0 })\n                                .element(a)\n                                .viewport()\n                                .send();\n                        });\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the product click process\n         * @param product\n         * @param e\n         * @private\n         */\n        _handleProductClick(product, e) {\n\n            // Update the event\n            if (!product._event || !product._additionalParams || !product._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.product, product, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = product;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Determine what we're doing - native ux or redirect\n            const showNativeBuyUx = !!product.inline_buy_url,\n                showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile()\n            ;\n\n            // Show the inline buy experience or redirect\n            if (showPopupNativeBuyUx) {\n                // Mobile native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                //\n                // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                //\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ popup: 'true' });\n\n                // Get the frame url\n                let url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Open the window or redirect if that failed\n                this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                if (!this._popupFrame) {\n                    // Fallback to just replacing the window with the target, since popups don't work :(\n                    okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                    window.location.href = url;\n                }\n\n            } else if (showNativeBuyUx) {\n                // Regular native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-inline-buy-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto'\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Check whether we're allowed to expand past the bounds of the placement\n                additionalParams.expandable = this.config.expandable ? 1: 0;\n                if (!this.config.expandable) {\n                    const parent = this.element.querySelector('.okanjo-expansion-root');\n                    /* istanbul ignore else: custom templates could break this */\n                    if (parent) {\n                        frame.className += ' okanjo-ad-in-unit';\n                        frame.setAttribute('height', \"100%\");\n                        frame.setAttribute('width', \"100%\");\n\n                        parent.appendChild(frame);\n\n                        const size = okanjo.ui.getElementSize(parent);\n                        additionalParams.frame_height = size.height;\n                        additionalParams.frame_width = size.width;\n                        /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                        if (this.config.size) additionalParams.ad_size = this.config.size;\n                    }\n                }\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                // Set the frame url\n                frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Show the modal if it was not internally expanded\n                if (!frame.parentNode) {\n                    okanjo.ui.modal.show(frame);\n                }\n\n            } else {\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n            }\n        }\n\n        //endregion\n\n        //region Article Handling\n\n        /**\n         * Renders an article response\n         * @private\n         */\n        _showArticles() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n            // - render\n\n            // Format articles\n            data.results.forEach((article, index) => {\n                // Escape url (fixme: does not include proxy_url!)\n                article._escaped_url = encodeURIComponent(article.url);\n                article._index = index;\n            });\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this));\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break this */\n                if (id && index >= 0) {\n                    const article = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break this */\n                    if (article) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.article, article));\n                        a.addEventListener('click', this._handleArticleClick.bind(this, article));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: article.id })\n                            .type(Metrics.Object.article, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({ bf: article.backfill ? 1 : 0 })\n                            .element(a)\n                            .viewport()\n                            .send();\n\n                        // Start watching for a viewable impression\n                        this._addOnceViewedHandler(a, () => {\n                            okanjo.metrics.create(this._metricBase, { id: article.id })\n                                .type(Metrics.Object.article, Metrics.Event.view)\n                                .meta(this.getConfig())\n                                .meta({ bf: article.backfill ? 1 : 0 })\n                                .element(a)\n                                .viewport()\n                                .send();\n                        });\n\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the article click process\n         * @param article\n         * @param e\n         * @private\n         */\n        _handleArticleClick(article, e) {\n            // Update the event\n            if (!article._event || !article._additionalParams || !article._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.article, article, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = article;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Update the link a second time, just in case the data changed\n            e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n        }\n\n        //endregion\n\n        //region ADX Handling\n\n        /**\n         * Renders a Google DFP/ADX response\n         * @private\n         */\n        _showADX() {\n            const data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n            // Get the template we should use to render the google ad\n            const templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n            // Determine what size ad we can place here\n            let size = null;\n            if (this.config.size) {\n                if (Placement.Sizes[this.config.size]) {\n                    // Defined size, use these known dimensions\n                    size = Placement.Sizes[this.config.size];\n                } else {\n                    let match = (/^([0-9]+)x([0-9]+)$/i).exec(this.config.size);\n                    if (match) {\n                        size = { width: match[1], height: match[2] }\n                    }\n                }\n            }\n\n            // No given size, we need to guess\n            if (!size) size = Placement.Sizes.default;\n\n            // If we're using okanjo's ad slot, then track the impression\n            // otherwise decline it because we're just passing through to the publishers account\n            let adUnitPath = '/90447967/okanjo:<publisher>';\n            let declineReason;\n            if (data.settings.display && data.settings.display.adx_unit_path) {\n                adUnitPath = data.settings.display.adx_unit_path;\n                declineReason = 'custom_ad_unit';\n            }\n\n            // Pass along what the template needs to know to display the ad\n            const renderContext = {\n                size,\n                adUnitPath\n            };\n\n            // Render the container\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n            // Report the impression\n            this._reportWidgetLoad(declineReason);\n\n            // Insert the actual ad into the container\n            const container = this.element.querySelector('.okanjo-adx-container');\n            /* istanbul ignore else: custom templates could break this */\n            if (container) {\n\n                // Make the frame element\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-adx-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto',\n                    width: size.width,\n                    height: size.height\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Attach to dOM\n                container.appendChild(frame);\n\n                // Build a click-through tracking url so we know when an ad is clicked too\n                let clickUrl = okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction)\n                    .meta(this.getConfig())\n                    .meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    })\n                    .element(frame)\n                    .viewport()\n                    .toUrl();\n\n                // Transfer references to the frame window\n                // frame.contentWindow.okanjo = okanjo;\n                // frame.contentWindow.placement = this;\n                frame.contentWindow.trackImpression = () => {\n                    okanjo.metrics.create(this._metricBase)\n                        .type(Metrics.Object.thirdparty_ad, Metrics.Event.impression)\n                        .meta(this.getConfig())\n                        .meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        })\n                        .element(frame)\n                        .viewport()\n                        .send()\n                    ;\n\n                    // Start watching for a viewable impression\n                    this._addOnceViewedHandler(frame, () => {\n                        okanjo.metrics.create(this._metricBase)\n                            .type(Metrics.Object.thirdparty_ad, Metrics.Event.view)\n                            .meta(this.getConfig())\n                            .meta({\n                                ta_s: adUnitPath,\n                                ta_w: size.width,\n                                ta_h: size.height\n                            })\n                            .element(frame)\n                            .viewport()\n                            .send()\n                        ;\n                    });\n                };\n\n                // Load Google ad!\n                frame.contentWindow.document.open();\n                frame.contentWindow.document.write(\n`<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body>\n<`+`script type=\"text/javascript\" src=\"https://www.googletagservices.com/tag/js/gpt.js\">\n    googletag.pubads().addEventListener('slotRenderEnded', function(e) { \n        trackImpression(e);\n    });\n    googletag.pubads()\n        .definePassback(\"${adUnitPath.replace(/\"/g, '\\\\\"')}\", [[${size.width}, ${size.height}]])\n        .setClickUrl(\"${clickUrl}&u=\")\n        .display();\n<`+`/script>\n</body></html>`);\n                frame.contentWindow.document.close();\n\n                // TODO future event hooks\n                // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                // Impression tracking is done from within the iframe. Crazy, right?\n            }\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        //endregion\n    }\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle:       { width: 300, height: 250 }, // aka: sidekick\n        leaderboard:            { width: 728, height:  90 },\n        large_mobile_banner:    { width: 320, height: 100 },\n        half_page:              { width: 300, height: 600 }, // aka: filmstrip, sidekick\n        billboard:              { width: 970, height: 250 }, // aka: sidekick\n\n        // IAB / Others\n        button_2:               { width: 120, height:  60 },\n        micro_bar:              { width:  88, height:  31 },\n        portrait:               { width: 300, height:1050 },\n        rectangle:              { width: 180, height: 150 },\n        super_leaderboard:      { width: 970, height:  90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper:        { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard:     { width: 320, height:  50 },\n        small_square:           { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1:               { width: 120, height:  90 },\n        full_banner:            { width: 468, height:  60 },\n        half_banner:            { width: 234, height:  60 },\n        large_rectangle:        { width: 336, height: 280 },\n        pop_under:              { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper:             { width: 120, height: 600 },\n        square:                 { width: 250, height: 250 },\n        square_button:          { width: 125, height: 125 },\n        vertical_banner:        { width: 120, height: 240 },\n        vertical_rectangle:     { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n    class Product extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Product';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Set filters based on old \"mode\"\n            if (this.config.mode === 'sense') {\n                // sense\n                this.config.url = this.config.url || 'referrer';\n                this.config.take = this.config.take || 5;\n            } else if (this.config.mode === 'single') {\n                // single\n                this.config.url = null;\n                if (this.config.id) this.config.ids = [this.config.id];\n                this.config.take = 1;\n                delete this.config.id;\n            } else {\n                // browse\n                this.config.url = null;\n                this.config.take = this.config.take || 25;\n            }\n            delete this.config.mode;\n\n            // Sold by changed to store name\n            if (this.config.sold_by) {\n                this.config.store_name = this.config.sold_by;\n                delete this.config.sold_by;\n            }\n\n            // Selectors is now url_selectors\n            if (this.config.selectors) {\n                this.config.url_selectors = this.config.selectors;\n                delete this.config.selectors;\n            }\n\n            // Marketplace_id is no longer a thing, closest analog are properties.\n            if (this.config.marketplace_id) {\n                this.config.property_id = this.config.marketplace_id;\n                delete this.config.marketplace_id\n            }\n\n            // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n            if (this.config.marketplace_status === 'testing') {\n                this.config.sandbox = true;\n            }\n            delete this.config.marketplace_status;\n\n            // Deprecated\n            delete this.config.suboptimal;\n            delete this.config.text;\n        }\n\n    }\n\n    return okanjo.Product = Product;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n    class Ad extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Ad';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Id / single mode is now ids\n            this.config.url = null;\n            if (this.config.id) {\n                this.config.ids = [this.config.id];\n            } else {\n                okanjo.warn('Ad widget should have parameter `id` set.');\n            }\n            this.config.take = 1;\n            delete this.config.id;\n\n            // Content is automatically determined whether the placement element contains children\n            delete this.config.content;\n        }\n\n    }\n\n    return okanjo.Ad = Ad;\n\n})(window);","/* jshint ignore:start */\n\n(function() {\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n\n\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */"],"sourceRoot":"./"}