{"version":3,"sources":["Array.from.js","Array.prototype.find.js","Array.prototype.findIndex.js","Array.prototype.includes.js","NodeList.prototype.forEach.js","Object.Assign.js","Okanjo.js","Request.js","Cookie.js","TemplateEngine.js","Modal.js","Metrics.js","AutoPageView.js","Widget.js","Placement.js","Product.js","Ad.js","EventEmitter.js","vendor.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Array","from","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_typeof","obj","Symbol","iterator","constructor","prototype","isCallable","fn","toStr","call","toLength","value","len","number","Number","isNaN","Math","floor","abs","toInteger","min","max","maxSafeInteger","arrayLike","T","mapFn","arguments","A","k","items","find","predicate","this","thisArg","kValue","o","undefined","findIndex","includes","searchElement","fromIndex","n","x","sameValueZero","y","window","NodeList","forEach","assign","nextSource","to","nextKey","index","hasOwnProperty","navigator","userAgent","document","NOOP","pageXOffset","settings","ELLIPSIFY_PATTERN","MOBILE_PATTERN","Console","console","okanjo","version","metrics","args","err","_len","_key","messageIndex","stack","Error","split","shift","push","error","reportStack","a","arg","join","splice","concat","warn","message","apply","_len2","_key2","parent","qwery","selector","querySelector","querySelectorAll","net","metrics_batch","routes","ads","getRoute","env","route","sandboxEndpoint","params","keys","request","endpoint","util","isMobile","val","trim","getPageArguments","test","AGENT","eqIndex","query","decodeURIComponent","part","location","search","substring","queryArgs","hashArgs","indexOf","includeHashArguments","hash","deepClone","mixed","out","map","options","dateToIso","input","output","toISOString","childObject","isArray","flatten","childKey","arrayToCsv","randomByte","shortid","crypto","msCrypto","require","previousSeconds","str","counter","encode","href","ui","getScrollPosition","CSS1_COMPATIBLE","documentElement","body","scrollLeft","SUPPORTS_PAGE_OFFSET","pageYOffset","scrollTop","size","marginTop","parseInt","width","height","element","offsetHeight","style","currentStyle","getComputedStyle","includeMargin","marginBottom","marginLeft","marginRight","html","w","scrollWidth","offsetWidth","clientWidth","getViewportSize","scrollHeight","clientHeight","inHeight","innerHeight","isMobileZoom","inWidth","innerWidth","vh","getEventPosition","event","et","ex","type","pageX","ey","pageY","el","__proto__","name","clientX","clientY","getElementPosition","getBoundingClientRect","x2","contains","report","rect","y1","top","right","left","x1","bottom","e","y2","intersectionArea","s","v","elementArea","iRight","vw","iTop","iLeft","iBottom","isElementVisible","getPercentageInViewport","_okanjo$ui$_getInters","_getIntersection","ellipsify","container","replacer","text","replacedText","getElementSize","targetHeight","useTextContent","content","safety","parentNode","textContent","innerText","replace","span","createElement","setAttribute","appendChild","innerHTML","img","display","backgroundImage","backgroundSize","src","btoa","svg","$html","createElements","$modalContainer","$modalWindow","$modalOuter","$body","removeClass","addClass","Metrics","MetricEvent","Widget","DATA_REPLACE_PATTERN","TemplateEngine","DISPLAY","ARTICLE_META","MINIMUM_VIEW_PX","MINIMUM_VIEW_TIME","MINIMUM_VIEW_FREQ","FILTERS","Product","Ad","loopCounter","done","dest","Uint8Array","randomBytes","getRandomValues","shuffled","pow","REDUCE_TIME","getWindowHeight","handler","addEventListener","handleReposition","setTimeout","IS_MOBILE","setContent","getKey","keyPrefix","JSON_TEST","req","XMLHttpRequest","url","payload","callback","ActiveXObject","calledBack","timeout","statusCode","xhr","onreadystatechange","readyState","res","responseText","getResponseHeader","status","attributes","method","JSON","withCredentials","send","get","bind","put","pairs","stringify","expireDate","cookie","Date","cookieName","setDate","getDate","expireDays","secure","protocol","cookieValue","encodeURI","expires","nameTest","substr","decodeURI","_templates","_css","classDetects","template","beforeRender","nodeType","lib","parse","markup","css","id","head","styleSheet","link","model","templateName","context","okanjoMetricUrl","blockClasses","now","getTime","Mustache","render","_this","ensureCss","formatCurrency","thousandsSeparator","decimals","engine","toFixed","j","decimalSeparator","slice","openModal","initialized","$modalSkin","$modalInner","$modalFrame","$modalClose","addListener","closeModal","stopPropagation","preventDefault","modal","show","hide","_queue","_processTimeout","defaultChannel","_getStoredQueue","sid","pageId","sourceCh","sourceCx","_checkUrlForReferral","_createClass","queue","localStorage","Params","_saveQueueTimeout","_this2","clearTimeout","_saveQueue","urlSid","pageArgs","trackEvent","object_type","metric_session","event_type","correlation","ch","_noProcess","channel","localSid","sourceContext","_push","page","Event","view","getLocation","_processQueue","_this3","data","item","_updateSid","_this4","events","_normalizeEvent","post","m","exclude","ref_ch","Meta","pgid","referrer","ref","win","set","ttl","_len3","_key3","getPageSize","create","pw","ph","h","containerSize","fallback","current","resources","wix2","_fallback","wiy2","wix1","getMax","getMin","wiy1","wox1","woy1","wox2","boxes","wrps","vp","pos","vx1","vy1","vx2","vy2","jsEvent","_len4","_key4","_key5","click","article","cause","marketplace","order","order_item","user","product","store","Channel","placement","external","Environment","live","testing","others","_data","addEventInfo","_element","addWidgetInfo","_len6","_key6","addEventMeta","trackPageView","_events","EventEmitter","listener","idx","listeners","_this6","_arguments","_EventEmitter","widget","_this7","_super","instanceId","config","_assertThisInitialized","_applyConfiguration","_setCompatibilityOptions","_ensurePlacementKey","load","_this8","normalizedKey","_default","isEmpty","group","origKey","getGroup","showError","setFlexClasses","align","justify","classList","add","attr","match","DATA_ATTRIBUTE_PATTERN","exec","Field","_convert","_strip","converter","parseFloat","_group","strip","array","string","bool","_Widget","_okanjo$_Widget$Field","Placement","_inherits","_super2","_createSuper","ignoreArrays","_metricBase","_viewWatcherIv","no_init","_this10","_viewedWatchers","q","url_selectors","not_url_paths","organization_id","store_id","url_referrer","organization_name","property_name","store_name","external_id","sku","external_store_id","condition","manufacturer","upc","tags","category","min_price","float","max_price","isbn","max_donation_percent","donation_to","sort_by","sort_direction","skip","take","placement_tests_only","template_name","template_theme","template_variant","template_cta_text","adx_unit_path","template_layout","template_cta_style","custom_css_url","custom_css","url_category","verbose_click_data","utm_click_data","proxy_url","disable_inline_buy","disable_popup","backwards","backfill","shortfill","article_meta","backfillPattern","getSettings","filters","shortfillPattern","matches","isBackfill","isShortfill","_this12","_fetchContent","_mergeResponseSettings","_updateBaseMetaFromResponse","_showContent","base","cx","declined","res_sf","res_total","total","res_type","res_length","viewport","_addOnceViewedHandler","results","impression","meta","getConfig","setMarkup","_this14","_response","emit","_this15","seed","aid","enabled","pten","ptid","ptseed","ContentTypes","products","msg","articles","adx","_reportWidgetLoad","additionalUrlParams","ok_ch","_okjr","ok_cx","encodeURIComponent","toUrl","u","cid","clickId","sf","resource","currentTarget","trackParam","interaction","urlParam","bf","splitfill_segment","additionalParams","_event","ea","Action","_getClickThroughURL","_clickId","_additionalParams","contentType","defaultName","isTemplateRegistered","brandCSS","brandCSSId","registerCss","_toggleViewWatcher","successfulCount","controller","clearInterval","_this16","_getTemplate","offer","inline_buy_url","_escaped_inline_buy_url","_image_url","no_css","getAttribute","spltfl_seg","_handleResourceMouseDown","_handleProductClick","fitImages","allowfullscreen","scrolling","showPopupNativeBuyUx","showNativeBuyUx","_popupFrame","frame","mozallowfullscreen","class","hspace","webkitallowfullscreen","ok_expandable","expandable","ok_frame_width","ok_ad_size","buy_url","_this17","DefaultTemplates","_handleArticleClick","renderContext","_this18","Sizes","declineReason","adUnitPath","frameborder","vspace","ta_w","ta_h","contentWindow","trackImpression","thirdparty_ad","ta_s","close","medium_rectangle","large_mobile_banner","half_page","billboard","micro_bar","portrait","rectangle","super_leaderboard","wide_skyscraper","mobile_leaderboard","small_square","button_1","full_banner","half_banner","large_rectangle","pop_under","three_to_one_rectangle","skyscraper","square","square_button","vertical_banner","vertical_rectangle","_this19","init","mode","selectors","sold_by","marketplace_id","marketplace_status","sandbox","_this20","objectToString","toString","object","hasProperty","primitiveHasOwnProperty","primitive","propName","regExpTest","isWhitespace","nonSpaceRe","entityMap","&",">","\"","'","/","`","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","hasTag","openingTagRe","closingTagRe","closingCurlyRe","nonSpace","indentation","tagIndex","stripSpace","spaces","tokens","pop","compileTags","mustache","tagsToCompile","start","token","eos","RegExp","escapeRegExp","valueLength","scanner","Scanner","lineHasNonSpace","chr","scan","scanUntil","openSection","sections","nestTokens","collector","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","section","tail","Context","parentContext","cache","Writer","clear","_cache","re","lookup","intermediateValue","names","lookupHit","clearCache","templateCache","isCacheEnabled","cacheKey","parseTemplate","partials","getConfigTags","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","filteredIndentation","partialByNl","partial","indentPartial","indentedValue","escape","String","getConfigEscape","defaultWriter","escapeHtml","exports","module","factory","define","amd","global"],"mappings":"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","file":"okanjo.min.js","sourcesContent":["// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n    Array.from = (function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function (fn) {\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function (value) {\n            var number = Number(value);\n            if (isNaN(number)) { return 0; }\n            if (number === 0 || !isFinite(number)) { return number; }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function (value) {\n            var len = toInteger(value);\n            return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike/*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T;\n            if (typeof mapFn !== 'undefined') {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method\n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < len… (also steps a - h)\n            var kValue;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }());\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.find\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return kValue.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return kValue;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return undefined.\n            return undefined;\n        }\n    });\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nif (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n        value: function(predicate) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n            var thisArg = arguments[1];\n\n            // 5. Let k be 0.\n            var k = 0;\n\n            // 6. Repeat, while k < len\n            while (k < len) {\n                // a. Let Pk be ! ToString(k).\n                // b. Let kValue be ? Get(O, Pk).\n                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n                // d. If testResult is true, return k.\n                var kValue = o[k];\n                if (predicate.call(thisArg, kValue, k, o)) {\n                    return k;\n                }\n                // e. Increase k by 1.\n                k++;\n            }\n\n            // 7. Return -1.\n            return -1;\n        }\n    });\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n        value: function(searchElement, fromIndex) {\n\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}","// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || window;\n        for (var i = 0; i < this.length; i++) {\n            callback.call(thisArg, this[i], i, this);\n        }\n    };\n}","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign != 'function') {\n    // Must be writable: true, enumerable: false, configurable: true\n    Object.defineProperty(Object, \"assign\", {\n        value: function assign(target, varArgs) { // .length of function is 2\n            'use strict';\n            if (target == null) { // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) { // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        },\n        writable: true,\n        configurable: true\n    });\n}","\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nconst okanjo = (function(window, document) { // eslint-disable-line no-unused-vars\n\n    //region Constants\n\n    // Environment Vars\n    const SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    const CSS1_COMPATIBLE = (document.compatMode || /* istanbul ignore next: out of scope */ \"\") === \"CSS1Compat\";\n    const AGENT = window.navigator.userAgent;\n    const ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    const MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    const NOOP = () => {};\n    const Console = window.console;\n\n    // Place to pull defaults, if already set\n    const settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    const okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"%%OKANJO_VERSION\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: (...args) => {\n            let err = args.find((arg) => arg instanceof Error);\n            if (!err) {\n                let messageIndex = args.findIndex((arg) => typeof arg === \"string\");\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                let stack = (new Error()).stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter((a) => a !== err);\n            }\n\n            Console.error(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: (message, ...args) => {\n            const err = new Error(message);\n\n            Console.warn(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: (selector, parent) => {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: (route, params, env) => {\n            if (params) {\n                Object.keys(params).forEach((key) => {\n                    route = route.replace(`:${key}`, params[key]+\"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: (val) => val === null || val === undefined || (typeof val === \"string\" && val.trim().length === 0),\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: () => {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: (includeHashArguments) => {\n\n            const split = (query) => {\n                query = query || \"\";\n                const params = {};\n                const parts = query.split('&');\n                parts.forEach((part) => {\n                    const eqIndex = part.indexOf('=');\n                    let key, value;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            const queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            const hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach((key) => queryArgs[key] = hashArgs[key]);\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = (mixed, out) => {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map((val) => okanjo.util.deepClone(val)));\n        } else if (typeof mixed === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach((key) => {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = (input, options = {}) => {\n        const output = {};\n\n        if (input !== undefined && input !== null) {\n            Object\n                .keys(input)\n                .forEach((key) => {\n                    // Convert object ids to hex strings\n                    if (input[key] instanceof Date) {\n                        if (options.dateToIso) {\n                            output[key] = input[key].toISOString(); // convert to iso\n                        } else {\n                            output[key] = input[key]; // as-is\n                        }\n                    } else if (typeof input[key] === 'object' && input[key] !== null) {\n                        // Allow ignoring arrays if desired\n                        if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                            output[key] = input[key];\n                        } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                            output[key] = input[key].join(',');\n                        } else {\n                            // Make child objects flat too (always returns object so Object.keys is safe)\n                            const childObject = okanjo.util.flatten(input[key], options);\n                            Object\n                                .keys(childObject)\n                                .forEach((childKey) => {\n                                    output[key + '_' + childKey] = childObject[childKey];\n                                })\n                            ;\n                        }\n                    } else {\n                        // Copy value references\n                        output[key] = input[key];\n                    }\n                })\n            ;\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = (function(clusterWorkerId) {\n\n        const shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n\n            crypto = window.crypto || window.msCrypto || (typeof require === \"function\" && require('crypto')),\n\n            randomByte = () => {\n                /* istanbul ignore next: platform diffs out of scope */\n                if (crypto && crypto.randomBytes) {\n                    return crypto.randomBytes(1)[0] & 0x30;\n                } else if (!crypto || !crypto.getRandomValues) {\n                    return Math.floor(Math.random() * 256) & 0x30;\n                }\n                /* istanbul ignore next: platform diffs out of scope */\n                const dest = new Uint8Array(1);\n                /* istanbul ignore next: platform diffs out of scope */\n                crypto.getRandomValues(dest);\n                /* istanbul ignore next: platform diffs out of scope */\n                return dest[0] & 0x30;\n            },\n\n            encode = (number) => {\n                let loopCounter = 0,\n                    done,\n                    str = '';\n\n                while (!done) {\n                    str = str + shuffled[ ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() ];\n                    done = number < (Math.pow(16, loopCounter + 1 ) );\n                    loopCounter++;\n                }\n                return str;\n            },\n\n            // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n            // This number should be updated every year or so to keep the generated id short.\n            // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n            REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        let counter,\n            previousSeconds;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function() {\n            let str = '',\n                seconds = Math.floor(((new Date()).getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    })();\n\n    /**\n     * Gets the best URL for where we are operating\n     * @returns {string|*}\n     */\n    okanjo.util.getLocation = () => {\n        /* istanbul ignore if: hard to reproduce in jsdom at the moment */\n        if (window.location !== window.parent.location) {\n            // attempt to see if the frame is friendly and get the parent\n            try {\n                return window.parent.location.href;\n            } catch (e) {\n                // Not friendly :(\n            }\n\n            // prefer the frame referrer (at least the same as the origin site) over the ad server url\n            if (document.referrer) return document.referrer;\n            return document.referrer;\n        }\n\n        // Direct on page or frame is goofy\n        return window.location.href\n    }\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: () => {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: (element, includeMargin) => {\n            const size = {\n                height: element.offsetHeight,\n                width : element.offsetWidth\n            };\n            const style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: () => {\n            const body = document.querySelector('body');\n            const html = document.documentElement;\n\n            return {\n                w: Math.max(\n                    body.scrollWidth,\n                    body.offsetWidth,\n                    html.clientWidth,\n                    html.scrollWidth,\n                    html.offsetWidth\n                ),\n\n                h: Math.max(\n                    body.scrollHeight,\n                    body.offsetHeight,\n                    html.clientHeight,\n                    html.scrollHeight,\n                    html.offsetHeight\n                )\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: () => {\n            const element = CSS1_COMPATIBLE ? document.documentElement : /* istanbul ignore next: browser diffs */ document.body;\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const inWidth = window.innerWidth || /* istanbul ignore next: browser diffs */ 0;\n            const inHeight = window.innerHeight || /* istanbul ignore next: browser diffs */ 0;\n            const isMobileZoom = (inWidth && width > inWidth) || (inHeight && height > inHeight);\n\n            return {\n                vw: isMobileZoom ? /* istanbul ignore next: browser diffs */ inWidth : width,\n                vh: isMobileZoom ? /* istanbul ignore next: browser diffs */ inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: (event) => {\n            const ex = event.pageX;\n            const ey = event.pageY;\n            const body = document.body;\n            const el = document.documentElement;\n            const scrollLeft = 'scrollLeft';\n            const scrollTop = 'scrollTop';\n            const type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: (element) => {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            const err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                let rect = element.getBoundingClientRect();\n                let body = document.body.getBoundingClientRect();\n                // let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    // x1: rect.left + pos.x,\n                    // y1: rect.top + pos.y,\n                    // x2: rect.right + pos.x,\n                    // y2: rect.bottom + pos.y\n\n                    // This might fix\n                    x1: rect.left - body.left,\n                    y1: rect.top - body.top,\n                    x2: rect.right - body.left,\n                    y2: rect.bottom - body.top,\n\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: (e, s, v) => {\n            let iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x+v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y+v.vh),\n\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea,\n                elementArea\n            };\n        },\n\n        /**\n         * Checks whether the element is actually displayed on the DOM\n         * @param element\n         * @return {boolean}\n         */\n        isElementVisible: (element) => {\n            /* istanbul ignore next: jsdom won't trigger this */\n            return element.offsetWidth > 0 && element.offsetHeight > 0;\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: (element) => {\n            let e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n            let { intersectionArea, elementArea } = okanjo.ui._getIntersection(e,s,v);\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function(element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        const parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        let text = useTextContent ? element.textContent : /* istanbul ignore next: browser diffs */ element.innerText,\n            replacedText = \"\",\n            safety = 5000, // Safety switch to bust out of the loop in the event something goes terribly wrong\n            replacer = /* istanbul ignore next: n/a to jsdom */ (match) => {\n                replacedText = match.substring(0, match.length-3) + replacedText;\n                return '...';\n            };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && (safety-- > 0)) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            let content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class','okanjo-ellipses');\n            span.setAttribute('class','okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substring(0, text.length-3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substring(0, text.length-3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n\n    };\n\n    /**\n     * Locates images with the class okanjo-fit and ensures that they get filled.\n     * This is basically a object-fit hacky workaround\n     * @param element\n     */\n    okanjo.ui.fitImages = function(element) {\n        // Detect objectFit support\n        /* istanbul ignore if: jsdom has objectFit defined and refuses to let you hack it */\n        if (!('objectFit' in document.documentElement.style)) {\n            // Find images to fit\n            element.querySelectorAll('img.okanjo-fit').forEach((img) => {\n\n                // Hide the image\n                img.style.display = 'none';\n\n                // Update the parent w/ the background\n                let parent = img.parentNode;\n                parent.style.backgroundSize = 'cover';\n                parent.style.backgroundImage = 'url('+img.src+')';\n                parent.style.backgroundposition = 'center center';\n            });\n        }\n    };\n\n    /**\n     * Returns the SVG content for an article icon\n     * @return {string}\n     */\n    okanjo.ui.articleSVG = function() {\n        return `<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 48 48\" style=\"enable-background:new 0 0 48 48;\" xml:space=\"preserve\"> <g id=\"newspaper_1_\"> <g id=\"newspaper_2_\"> <path id=\"newspaper_6_\" d=\"M21.5,23h-5c-0.276,0-0.5-0.224-0.5-0.5v-5c0-0.276,0.224-0.5,0.5-0.5h5c0.276,0,0.5,0.224,0.5,0.5v5 C22,22.776,21.776,23,21.5,23z M37,32c0,1.654-1.346,3-3,3h-2H15c-1.654,0-3-1.346-3-3V14c0-0.552,0.448-1,1-1h17 c0.552,0,1,0.448,1,1v18c0,0.552,0.449,1,1,1h2c0.551,0,1-0.448,1-1V17h-1v14.75c0,0.138-0.112,0.25-0.25,0.25h-1.5 C32.112,32,32,31.888,32,31.75V16c0-0.552,0.448-1,1-1h3c0.552,0,1,0.448,1,1v1V32z M15,33h14.184C29.072,32.686,29,32.352,29,32 V15H14v17C14,32.552,14.449,33,15,33z M26.5,19h-2c-0.276,0-0.5-0.224-0.5-0.5v-1c0-0.276,0.224-0.5,0.5-0.5h2 c0.276,0,0.5,0.224,0.5,0.5v1C27,18.776,26.776,19,26.5,19z M26.5,23h-2c-0.276,0-0.5-0.224-0.5-0.5v-1c0-0.276,0.224-0.5,0.5-0.5 h2c0.276,0,0.5,0.224,0.5,0.5v1C27,22.776,26.776,23,26.5,23z M26.5,27h-10c-0.276,0-0.5-0.224-0.5-0.5v-1 c0-0.276,0.224-0.5,0.5-0.5h10c0.276,0,0.5,0.224,0.5,0.5v1C27,26.776,26.776,27,26.5,27z M26.5,31h-10 c-0.276,0-0.5-0.224-0.5-0.5v-1c0-0.276,0.224-0.5,0.5-0.5h10c0.276,0,0.5,0.224,0.5,0.5v1C27,30.776,26.776,31,26.5,31z\"/> </g> </g> </svg>`;\n    };\n\n    /**\n     * Returns the SVG content for a product icon\n     * @return {string}\n     */\n    okanjo.ui.productSVG = function () {\n        return `<svg id=\"glyphicons-basic\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"> <path id=\"cart\" d=\"M13,26.5A1.5,1.5,0,1,1,11.5,25,1.5,1.5,0,0,1,13,26.5ZM21.5,25A1.5,1.5,0,1,0,23,26.5,1.5,1.5,0,0,0,21.5,25ZM27.96436,8.82544l-2,9A1.49988,1.49988,0,0,1,24.5,19H11.77l.4375,2H23a1,1,0,0,1,1,1v1a1,1,0,0,1-1,1H11a1.5,1.5,0,0,1-1.46533-1.17944L6.29248,8H4A1,1,0,0,1,3,7V6A1,1,0,0,1,4,5H7.5A1.49993,1.49993,0,0,1,8.96533,6.17944L9.14484,7H26.5a1.50029,1.50029,0,0,1,1.46436,1.82544ZM24.62988,10H9.80115l1.31256,6H23.29688Z\"/></svg>`;\n    }\n\n    /**\n     * Returns the inline SVG src attribute\n     * @param svg\n     * @return {string}\n     */\n    okanjo.ui.inlineSVG = function(svg) {\n        return 'data:image/svg+xml;base64,' + btoa('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>' + svg);\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n\n})(window, document);","\"use strict\";\n\n(function(window) {\n\n    const JSON_TEST = /^application\\/json/;\n    const okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        const req = new (window.XMLHttpRequest || /* istanbul ignore next: old ie */ window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        let calledBack = false;\n\n        // Normalized done handler\n        const done = function(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function(e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function(e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    let res;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST','PUT','PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    const encode = (val) => {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent(''+val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    const getKey = (key, keyPrefix) => {\n        if (keyPrefix) {\n            return `${keyPrefix}[${encode(key)}]`;\n        } else {\n            return encode(key)\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = (obj, keyPrefix) => {\n        let pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach((v) => pairs.push(getKey(key, keyPrefix) + '=' + encode(v))); // Does not do that PHP garbage with key[]=val\n            } else if (typeof value === \"object\" && value !== null) {\n                // Recurse\n                let res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: (cookieName, value, expireDays) => {\n            const expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            const expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            const path = \" Path=/\";\n            const secure = window.location.protocol === 'https:' ? ' Secure;' : '';\n            // const secure = ' Secure;';\n            const cookieValue = `${encodeURI(value)};${expires}${secure} SameSite=None;${path}`;\n            // console.log('setting cookie', cookieName, cookieValue)\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: (cookieName) => {\n            let output = null;\n            document.cookie\n                .split(\";\")\n                .find((cookie) => {\n                    let nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                    let value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                    if (nameTest === cookieName) {\n                        output = decodeURI(value);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                })\n            ;\n            return output;\n        }\n    };\n\n})(window, document);","\"use strict\";\n\n//noinspection JSUnusedLocalSymbols,ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * UI Rendering Engine\n     */\n    class TemplateEngine {\n\n        constructor() {\n\n            // Load initial templates from options\n            this._templates = {};\n            this._css = {};\n\n            // Hook point for adding custom styles to ui elements\n            this.classDetects = '';\n        }\n\n        /**\n         * Registers a template for use\n         * @param name\n         * @param template\n         * @param beforeRender\n         * @param options\n         */\n        registerTemplate(name, template, beforeRender, options) {\n\n            if (typeof template === \"object\") {\n                //noinspection JSValidateTypes\n                if (template.nodeType === undefined) {\n                    throw new Error('Parameter template must be a string or a DOM element');\n                } else {\n                    template = template.innerHTML;\n                    okanjo.lib.Mustache.parse(template);\n                }\n            } else if (typeof template !== \"string\") {\n                throw new Error('Parameter template must be a string or a DOM element');\n            }\n\n            // Shift options if only have 3 params\n            if (arguments.length === 3 && typeof beforeRender === \"object\") {\n                options = beforeRender;\n                beforeRender = null;\n            } else {\n                options = options || {};\n            }\n\n            if (beforeRender && typeof beforeRender !== \"function\") {\n                throw new Error('Parameter beforeRender must be a function');\n            }\n\n            // Assign the template\n            this._templates[name] = {\n                markup: template,\n                options,\n                beforeRender\n            };\n        }\n\n        /**\n         * Registers a CSS payload for use\n         * @param name\n         * @param css\n         * @param options\n         */\n        registerCss(name, css, options) {\n            options = options || {};\n\n            if (typeof css === \"object\") {\n                //noinspection JSValidateTypes\n                if (css.nodeType === undefined) {\n                    throw new Error('Parameter css must be a string or a DOM element');\n                }\n            } else if (typeof css !== \"string\") {\n                throw new Error('Parameter css must be a string or a DOM element');\n            }\n\n            this._css[name] = {\n                markup: css,\n                options: options\n            };\n        }\n\n        /**\n         * Checks whether a template is registered\n         * @param name\n         * @return {boolean}\n         */\n        isTemplateRegistered(name) {\n            return !!this._templates[name];\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Checks whether a CSS payload is registered\n         * @param name\n         * @return {boolean}\n         */\n        isCssRegistered(name) {\n            return !!this._css[name];\n        }\n\n        /**\n         * Ensures that a CSS payload has been added to the DOM\n         * @param name\n         */\n        ensureCss(name) {\n            if (this._css[name]) {\n                //noinspection JSValidateTypes\n                const css = this._css[name],\n                    id = css.markup.nodeType === undefined ? css.options.id || \"okanjo-css-\" + name : null; // If it's a DOM element, just forget it cuz it's already on the page\n\n                // Check for css element on page, if we have an ID to look for\n                if (id) {\n                    const element = document.querySelector('#' + id.replace(/\\./g, '\\\\.'));\n                    if (!element) {\n                        const head = document.head,\n                            style = document.createElement('style');\n\n                        style.id = id;\n                        style.setAttribute('type', 'text/css');\n\n                        /* istanbul ignore else: old ie */\n                        if (style.hasOwnProperty) { // old ie\n                            style.textContent = css.markup;\n                        } else {\n                            style.styleSheet.cssText = css.markup;\n                        }\n\n                        if (head) {\n                            head.appendChild(style);\n                        } else {\n                            // NO HEAD, just prepend to body then\n                            const body = document.body;\n                            if (body) {\n                                body.appendChild(style);\n                            } else {\n                                // And if this doesn't work, just give up\n                                okanjo.report('Cannot add CSS template to document. Does it not have a body or head?');\n                            }\n                        }\n                    }\n                }\n            } else {\n                okanjo.report('Attempted to add CSS template \"'+name+'\" to the DOM, however it does not appear to be registered?');\n            }\n        }\n\n        /**\n         * Ensures that a custom CSS stylesheet has been added to the DOM\n         * @param url\n         */\n        ensureExternalCss(url) {\n            const id = 'okanjo-custom-css-'+url;\n            if (document.getElementById(id)) return;\n\n            const head = document.head,\n                link = document.createElement('link');\n\n            link.id = id;\n            link.setAttribute('rel', 'stylesheet');\n            link.setAttribute('href', url);\n\n            if (head) {\n                head.appendChild(link);\n            } else {\n                // NO HEAD, just prepend to body then\n                const body = document.body;\n                if (body) {\n                    body.appendChild(link);\n                } else {\n                    // And if this doesn't work, just give up\n                    okanjo.report('Cannot add custom CSS stylesheet to document. Does it not have a body or head?');\n                }\n            }\n        }\n\n        /**\n         * Renders a template and returns the markup\n         * @param templateName\n         * @param context\n         * @param model\n         * @return {string}\n         */\n        render(templateName, context, model) {\n\n            model = model || {};\n            const template = this._templates[templateName];\n\n            // If there's a data controller closure set, and if so, run the data through there\n            if (template.beforeRender) {\n                model = template.beforeRender.call(context, model);\n            }\n\n            // Attach globals\n            model.okanjo = okanjo;\n            model.okanjoMetricUrl = okanjo.net.endpoint.replace(/^https?:\\/\\//,''); // Url w/o scheme to prevent mixed-content warnings\n            model.now = function() { return (new Date()).getTime(); };\n            model.classDetects = this.classDetects;\n\n            //noinspection JSUnresolvedVariable\n            if (model.blockClasses && Array.isArray(model.blockClasses)) {\n                model.classDetects += \" \" + model.blockClasses.join(' ');\n                delete model.blockClasses;\n            }\n\n            // Add CSS unless we are told not to\n            if (model.css !== false && template.options.css && template.options.css.length > 0) {\n                template.options.css.forEach((css) => this.ensureCss(css));\n                delete model.css;\n            }\n\n            // Render the template and return the result\n            return okanjo.lib.Mustache.render(template.markup, model);\n        }\n\n    }\n\n    /**\n     * Formats a number into a currency string (rounded, decimal points, thousands separators)\n     * See: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\n     *\n     * @param value – the number to format\n     * @param [decimals] - The number of decimals to show\n     * @param [decimalSeparator] – The decimals separator, default: .\n     * @param [thousandsSeparator] – The thousands separator, default: ,\n     * @returns {string} – Formatted currency string\n     */\n    TemplateEngine.formatCurrency = (value, decimals=2, decimalSeparator='.', thousandsSeparator=',') => {\n        const s = value < 0 ? \"-\" : \"\",\n            i = parseInt(value = Math.abs(+value || 0).toFixed(decimals)) + \"\";\n        let j = i.length;\n        j = (j) > 3 ? j % 3 : 0;\n        return s + (j ? i.substr(0, j) + thousandsSeparator : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousandsSeparator) + (decimals ? decimalSeparator + Math.abs(value - i).toFixed(decimals).slice(2) : \"\");\n    };\n\n    // Export\n    okanjo.ui.engine = new TemplateEngine();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    /*\n\n     div .modal-container .fade-out .hidden\n     | div .modal-window .clearfix\n     | |\n     | | div .modal-window-skin\n     | | | div .modal-window-outer\n     | | | | div .modal-window-inner\n     | | | | | iframe .okanjo-inline-buy-frame\n     | | | | /div\n     | | | /div\n     | | /div\n     | |\n     | | div .close-button\n     | | | ×\n     | | /div\n     | |\n     | /div\n     /div\n\n     */\n\n    const okanjo = window.okanjo;\n    const IS_MOBILE = okanjo.util.isMobile();\n\n    let initialized = false,\n        // scrollY = null,\n\n        // Selectors\n        $html, $body, $modalContainer, $modalWindow, $modalSkin, $modalOuter, $modalInner, $modalClose, $modalFrame,\n\n        createElements = function() {\n\n            // Page elements\n            //noinspection JSUnresolvedFunction\n            $html = document.documentElement || /* istanbul ignore next: old browsers */ document.querySelector('html');\n            //noinspection JSUnresolvedFunction\n            $body = document.body || /* istanbul ignore next: old browsers */ document.querySelector('body');\n\n            // Modal elements\n            $modalContainer = document.createElement('div');\n            $modalWindow = document.createElement('div');\n            $modalSkin = document.createElement('div');\n            $modalOuter = document.createElement('div');\n            $modalInner = document.createElement('div');\n            $modalClose = document.createElement('div');\n            $modalFrame = document.createElement('iframe');\n\n            $modalContainer.setAttribute('class', 'okanjo-modal-container okanjo-modal-hidden ' /*+ okanjo.util.detectClasses().join(' ')*/);\n            $modalWindow.setAttribute('class', 'okanjo-modal-window');\n            $modalSkin.setAttribute('class', 'okanjo-modal-window-skin');\n            $modalOuter.setAttribute('class', 'okanjo-modal-window-outer');\n            $modalInner.setAttribute('class', 'okanjo-modal-window-inner');\n            $modalClose.setAttribute('class', 'okanjo-modal-close-button');\n\n            $modalFrame.setAttribute('class', 'okanjo-inline-buy-frame');\n            $modalFrame.setAttribute('frameborder', '0');\n            $modalFrame.setAttribute('vspace', '0');\n            $modalFrame.setAttribute('hspace', '0');\n            $modalFrame.setAttribute('webkitallowfullscreen', '');\n            $modalFrame.setAttribute('mozallowfullscreen', '');\n            $modalFrame.setAttribute('allowfullscreen', '');\n            $modalFrame.setAttribute('scrolling', 'auto');\n\n            $modalClose.innerHTML = '×';\n\n            // Create the modal element tree\n            $modalInner.appendChild($modalFrame);\n            $modalOuter.appendChild($modalInner);\n            $modalSkin.appendChild($modalOuter);\n            $modalWindow.appendChild($modalSkin);\n            $modalWindow.appendChild($modalClose);\n            $modalContainer.appendChild($modalWindow);\n\n            // Add the modal stuff to the body\n            $body.appendChild($modalContainer);\n        },\n\n        addListener = function(el, event, handler) {\n            /* istanbul ignore else: old browsers */\n            if (el.addEventListener) {\n                el.addEventListener(event, handler, false);\n            } else {\n                el.attachEvent(\"on\" + event, handler);\n            }\n        },\n\n        getWindowHeight = function() {\n            return window.innerHeight || /* istanbul ignore next: old browsers */ document.documentElement.clientHeight;\n        },\n\n        handleReposition = function() {\n            // scrollY = okanjo.ui.getScrollPosition().y;\n            //$modalWindow.style.marginTop = scrollY + 40 + \"px\";\n            $modalWindow.style.height = (getWindowHeight() - 80) + \"px\";\n        },\n\n        bindEvents = function() {\n\n            // If the device orientation changes, adjust the modal view port\n            addListener(window, 'orientationchange', function() {\n                for (let t = 0; t < 2; t++) {\n                    setTimeout(handleReposition, 1000 * t + 10);\n                }\n            });\n\n            // If the window changes size, also adjust the modal view port\n            addListener(window, 'resize', function() {\n                setTimeout(handleReposition, 100);\n            });\n\n            // Click the overlay to close the modal\n            addListener($modalContainer, 'click', closeModal);\n\n            // If you click in the modal, don't close it!\n            addListener($modalWindow, 'click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Click the close button to close it\n            addListener($modalClose, 'click', function(e) {\n\n                // Don't close it twice\n                e.preventDefault();\n                e.stopPropagation();\n\n                closeModal();\n            });\n\n        },\n\n        //removeListener = function(el, event, handler) {\n        //    if (el.removeEventListener) {\n        //        el.removeEventListener(event, handler);\n        //    } else {\n        //        el.detachEvent(\"on\" + event, handler);\n        //    }\n        //},\n\n        addClass = function(el, name) {\n            el.className += \" \" + name;\n        },\n\n        removeClass = function(el, name) {\n            el.className = el.className.replace(new RegExp(' *?'+name), '');\n        },\n\n        openModal = function() {\n\n            // scrollY = document.body.scrollTop;\n\n            removeClass($modalContainer, 'okanjo-modal-hidden');\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            handleReposition();\n\n            addClass($html, \"okanjo-modal-active\");\n\n            if (!IS_MOBILE) {\n                addClass($html, \"okanjo-modal-margin-fix\");\n            }\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n            }, 10);\n\n            // Click the overlay to close the modal\n            //addListener($body, 'click', closeModal);\n\n        },\n\n        closeModal = function() {\n            addClass($modalContainer, 'okanjo-modal-fade-out');\n\n            setTimeout(function() {\n                removeClass($modalContainer, 'okanjo-modal-fade-out');\n                addClass($modalContainer, \"okanjo-modal-hidden\");\n\n                removeClass($html, \"okanjo-modal-active\");\n                if (!IS_MOBILE) {\n                    removeClass($html, \"okanjo-modal-margin-fix\");\n                }\n            }, 210);\n\n            // Click the overlay to close the modal\n            //removeListener($body, 'click', closeModal);\n        },\n\n        /**\n         * Insert an element or markup into the modal\n         * @param content\n         */\n        setContent = function(content) {\n\n            // Remove existing content\n            $modalInner.innerHTML = \"\";\n\n            // Insert new content\n            if (typeof content === \"string\") {\n                $modalInner.innerHTML = content;\n            } else {\n                $modalInner.appendChild(content);\n            }\n        };\n\n\n    // Expose the modal functions\n    okanjo.ui.modal = {\n\n        show: function(content) {\n\n            if (!initialized) {\n                initialized = true;\n                createElements();\n                bindEvents();\n            }\n\n            setContent(content);\n            openModal();\n        },\n\n        hide: function() {\n            closeModal();\n        }\n\n    };\n\n    return okanjo.ui.modal;\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n    class Metrics {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n        _getStoredQueue() {\n            if (window.localStorage[Metrics.Params.queue]) {\n                try {\n                    let queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                    if (Array.isArray(queue)) {\n                        return queue;\n                    } else {\n                        okanjo.report('Stored queue is not a queue', {queue});\n                        return [];\n                    }\n                } catch (e) {\n                    okanjo.report('Failed to load metric queue from storage', {err: e});\n                    return [];\n                }\n            } else {\n                // not stored\n                return [];\n            }\n        }\n\n        /**\n         * Updates the queue stored in storage, in the event we can't complete our submissions\n         * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n         * @private\n         */\n        _saveQueue(delay) {\n            if (delay) {\n                if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                this._saveQueueTimeout = setTimeout(() => {\n                    this._saveQueue(false);\n                    this._saveQueueTimeout = null;\n                }, 100);\n            } else {\n                window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n            }\n        }\n\n        /**\n         * Extract contextual pass-through data from the URL, if present\n         * @private\n         */\n        _checkUrlForReferral() {\n            const pageArgs = okanjo.util.getPageArguments(true),\n                urlSid = pageArgs[Metrics.Params.name],\n                localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name), // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                sourceChannel = pageArgs[Metrics.Params.channel];\n\n            // If for some reason, both are set, record the incident as a possible correlation\n            if (urlSid && localSid && urlSid !== localSid) {\n                this.trackEvent({\n                    object_type: Metrics.Object.metric_session,\n                    event_type: Metrics.Event.correlation,\n                    id: urlSid+\"_\"+localSid,\n                    ch: this.defaultChannel,\n                    _noProcess: true\n                });\n            }\n\n            // Update local values\n            this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n            this.sourceCh = sourceChannel || null;\n            this.sourceCx = sourceContext || null;\n        }\n\n        /**\n         * Submits an individual event metric\n         * @param event\n         * @param callback\n         */\n        trackEvent(event, callback) {\n            // Ensure the event contains the required fields\n            if (!event.object_type || !event.event_type) {\n                okanjo.report('Invalid metric to track (missing object_type or event_type)', {event});\n                return;\n            }\n\n            // Queue the event for publishing\n            this._push(event, callback);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Submits a page view metric\n         * @param event\n         * @param callback\n         */\n        trackPageView(event, callback) {\n            event = event || {};\n            event.object_type = Metrics.Object.page;\n            event.event_type = Metrics.Event.view;\n            event.id = event.id || okanjo.util.getLocation();\n            event.ch = event.ch || this.defaultChannel;\n\n            // Queue the event for publishing\n            this.trackEvent(event, callback);\n        }\n\n        /**\n         * Adds an event to the queue\n         * @param event\n         * @param callback\n         * @private\n         */\n        _push(event, callback) {\n            this._queue.push({ event, callback });\n\n            // Save the queue\n            this._saveQueue(true);\n\n            // Start burning down the queue, unless the event says not to\n            if (event._noProcess) {\n                delete event._noProcess;\n            } else {\n                this._processQueue();\n            }\n        }\n\n        /**\n         * Burn down the queue\n         * @private\n         */\n        _processQueue() {\n            // If the queue is not already being processed, and there's stuff to process, continue sending them\n            if (!this._processTimeout && this._queue.length > 0) {\n                this._processTimeout = setTimeout(() => {\n\n                    // Pull the items we're going to batch out of the queue\n                    const items = this._queue.splice(0, 255);\n                    this._saveQueue(false);\n\n                    // Track the item\n                    this._batchSend(items, (err, res) => {\n                        // TODO: If there was an error, consider splicing the batch back into the queue\n\n                        // Update / Set the metric sid on the publisher\n                        /* istanbul ignore else: server barks */\n                        if (res && res.data && res.data.sid) this._updateSid(res.data.sid);\n\n                        // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                        this._processTimeout = null;\n                        this._processQueue();\n\n                        // Fire the event callbacks if there are any\n                        items.forEach((item) => {\n                            item.callback && item.callback(err, res);\n                        });\n                    });\n\n                }, 0); // break event loop, maybe\n            }\n        }\n\n        /**\n         * Sends a bunch of queued metric events\n         * @param items\n         * @param callback\n         * @private\n         */\n        _batchSend(items, callback) {\n\n            // Normalize event data\n            const events = items.map((item) => {\n                this._normalizeEvent(item.event);\n\n                // Strip duplicated data from event batch\n                delete item.event.sid;\n                delete item.event.win;\n\n                return item.event;\n            });\n\n            const payload = {\n                events,\n                win: okanjo.util.getLocation()\n            };\n\n            const route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n            // Set sid if present\n            if (this.sid) {\n                payload.sid = this.sid;\n            }\n\n            // Send it\n            okanjo.net.request.post(\n                route,\n                payload,\n                (err, res) => {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err, res, items, route });\n                    }\n                    callback && callback(err, res);\n                }\n            );\n        }\n\n        /**\n         * Normaizes events so that they contain consistent data values\n         * @param event\n         * @private\n         */\n        _normalizeEvent(event) {\n\n            // Ensure meta is ready to receive values\n            event.m = event.m || {};\n\n            // Set key\n            event.key = event.key || event.m.key || okanjo.key || undefined;\n\n            // Set session\n            if (this.sid) event.sid = this.sid;\n\n            // Clone the metadata, since it might be a direct reference to a widget property\n            // Deleting properties on the meta object could be very destructive\n            event.m = Object.assign({}, event.m); // event.m should be flat\n\n            // Strip meta keys that should be excluded\n            Object.keys(Metrics.Meta.exclude).forEach((key) => delete event.m[key]);\n\n            // Set referral channel / context\n            if (this.sourceCh) { event.m.ref_ch = this.sourceCh; }\n            if (this.sourceCx) { event.m.ref_cx = this.sourceCx; }\n\n            // Set page group id\n            event.m.pgid = this.pageId;\n\n            // Set okanjo version\n            event.m.ok_ver = okanjo.version;\n\n            // Finalize metadata\n            event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n            // Ensure metadata strings won't exceed the imposed limit\n            Object.keys(event.m).forEach((key) => {\n                if (typeof event.m[key] === \"string\") {\n                    event.m[key] = event.m[key].substr(0, 255);\n                }\n            });\n\n            // Set page source reference\n            /* istanbul ignore else: jsdom setup with referrer */\n            if (document.referrer) {\n                event.ref = document.referrer;\n            }\n\n             // Set the window location\n            event.win = okanjo.util.getLocation();\n        }\n\n        /**\n         * Updates the stored session identifier\n         * @param sid\n         * @private\n         */\n        _updateSid(sid) {\n            // Not set or changed?\n            if (sid && (!this.sid || this.sid !== sid) ) {\n                this.sid = sid;\n                window.localStorage[Metrics.Params.name] = sid;\n                okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @param event\n         * @return {*|{}}\n         */\n        static addElementInfo(element, event) {\n            const page = okanjo.ui.getPageSize(),\n                size = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.pw = page.w;\n            event.m.ph = page.h;\n            event.m.x1 = size.x1;\n            event.m.y1 = size.y1;\n            event.m.x2 = size.x2;\n            event.m.y2 = size.y2;\n\n            return event;\n        }\n\n        static addWidgetInfo(element, event) {\n            const containerSize = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n\n            // placement div size\n            event.m.wox1 = containerSize.x1;\n            event.m.woy1 = containerSize.y1;\n            event.m.wox2 = containerSize.x2;\n            event.m.woy2 = containerSize.y2;\n\n            // Inner size is the min/max of the child elements since they may be floating and have no official height/width\n            const resources = okanjo.qwery('.okanjo-resource, .okanjo-adx-container', element);\n            let size, wix1, wiy1, wix2, wiy2, boxes = [];\n            const getMin = (val, current) => typeof current === \"undefined\" || val < current ? val : current;\n            const getMax = (val, current) => typeof current === \"undefined\" || val > current ? val : current;\n            const fallback = (val, fallback) => typeof val === \"undefined\" ? fallback : val;\n\n            resources.forEach(e => {\n                size = okanjo.ui.getElementPosition(e);\n                wix1 = getMin(size.x1, wix1);\n                wiy1 = getMin(size.y1, wiy1);\n                wix2 = getMax(size.x2, wix2);\n                wiy2 = getMax(size.y2, wiy2);\n                boxes.push(size.x1, size.y1, size.x2, size.y2);\n            });\n\n            // inner size (might be centered or something)\n            // noinspection JSUnusedAssignment\n            event.m.wix1 = fallback(wix1, containerSize.x1); // noinspection JSUnusedAssignment\n            event.m.wiy1 = fallback(wiy1, containerSize.y1); // noinspection JSUnusedAssignment\n            event.m.wix2 = fallback(wix2, containerSize.x2); // noinspection JSUnusedAssignment\n            event.m.wiy2 = fallback(wiy2, containerSize.y2);\n            event.m.wrps = boxes.map(v => Math.floor(v)).join(','); // all resource positions x1,y1,x2,y2,...\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @param event\n         * @return {*|{}}\n         */\n        static addViewportInfo(event) {\n            const vp = okanjo.ui.getViewportSize(),\n                pos = okanjo.ui.getScrollPosition();\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.vx1 = pos.x;\n            event.m.vy1 = pos.y;\n            event.m.vx2 = pos.x+vp.vw;\n            event.m.vy2 = pos.y+vp.vh;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @param event\n         * @return {*|{}}\n         */\n        static addEventInfo(jsEvent, event) {\n            const pos = okanjo.ui.getEventPosition(jsEvent);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.et = pos.et;\n            event.m.ex = pos.ex;\n            event.m.ey = pos.ey;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param event\n         * @param args\n         * @return {*|{}}\n         */\n        static addEventMeta(event, ...args) {\n            event = event || {};\n            event.m = event.m || {};\n            event.m = Object.assign.apply(Object, [event.m].concat(args));\n            \n            return event;\n        }\n\n        /**\n         * Helper to create a new fluent event structure\n         * @param data\n         * @param args\n         * @return {MetricEvent}\n         */\n        static create(data, ...args) {\n            // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n            return new MetricEvent(data, args);\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Helper to create a new fluent event structure\n         * @param args\n         * @return {*}\n         */\n        create(...args) {\n            return Metrics.create.apply(null, args);\n        }\n\n    }\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key','callback','metrics_channel_context','metrics_context','mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n    class MetricEvent {\n        constructor(data, others) {\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach((data) => {\n                    this.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n        data(data) {\n            Object.assign(this, okanjo.util.deepClone(data));\n            return this;\n        }\n\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @return {MetricEvent}\n         */\n        event(jsEvent) {\n            Metrics.addEventInfo(jsEvent, this);\n            return this;\n        }\n\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @return {MetricEvent}\n         */\n        viewport() {\n            Metrics.addViewportInfo(this);\n            return this;\n        }\n\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @return {MetricEvent}\n         */\n        element(element) {\n            Metrics.addElementInfo(element, this);\n            return this;\n        }\n\n        /**\n         * Adds widget DOM element dimensions / positional data to the event\n         * @param element\n         * @returns {MetricEvent}\n         */\n        widget(element) {\n            Metrics.addWidgetInfo(element, this);\n            return this;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param args\n         * @return {MetricEvent}\n         */\n        meta(...args) {\n            Metrics.addEventMeta.apply(null, [this].concat(args));\n            return this;\n        }\n\n        /**\n         * Sets the object and event type on the event w/o having to use .data\n         * @param object_type\n         * @param event_type\n         * @return {MetricEvent}\n         */\n        type(object_type, event_type) {\n            this.object_type = object_type;\n            this.event_type = event_type;\n            return this;\n        }\n\n        /**\n         * Finalizes and sends the event\n         * @param callback\n         */\n        send(callback) {\n            okanjo.metrics.trackEvent(this, callback);\n            // DONT RETURN - BREAK THE CHAIN HERE\n        }\n\n        /**\n         * Gets the single-metric tracking url for this event\n         * @return {string}\n         */\n        toUrl() {\n            // Copy data w/o modifying it\n            const event = Object.assign({}, this);\n\n            // Extract params\n            const {\n                object_type,\n                event_type\n            } = event;\n            delete event.object_type;\n            delete event.event_type;\n\n            // Normalize event data\n            okanjo.metrics._normalizeEvent(event);\n\n            // Get the URL\n            return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type, event_type }) + '?' +\n                okanjo.net.request.stringify(event);\n        }\n    }\n\n    // Export / initialize\n    okanjo.metrics = new Metrics();\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    // Track the page view, but don't send it right away.\n    // Send it in one full second unless something else pushes an event\n    // This way, we have a chance that a placement key will be set globally\n    okanjo.metrics.trackPageView({_noProcess:true});\n    setTimeout(() => {\n        okanjo.metrics._processQueue();\n    }, 1000);\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n    const DATA_ATTRIBUTE_PATTERN = /^data-(.+)$/;\n    const DATA_REPLACE_PATTERN = /-/g;\n\n    /**\n     * Base widget class\n     */\n    class Widget extends okanjo._EventEmitter {\n\n        constructor(element, options) {\n            super();\n\n            // Verify element was given (we can't load unless we have one)\n            if (!element || element === null || element.nodeType === undefined) {\n                okanjo.report('Invalid or missing element on widget construction', { widget: this, element, options });\n                throw new Error('Okanjo: Invalid element - make sure to pass a valid DOM element when constructing Okanjo Widgets.');\n            }\n\n            // Verify configuration is OK\n            if (options && typeof options !== \"object\") {\n                // Warn and fix it\n                okanjo.report('Invalid widget options. Expected object, got: ' + typeof options, { widget: this, element, options });\n                options = {};\n            } else {\n                options = options || {};\n            }\n\n            // Store basics\n            this.name = 'Widget';\n            this.element = element;\n            this.instanceId = okanjo.util.shortid();\n\n            // Clone initial config, breaking the top-level reference\n            this.config = Object.assign({}, options);\n        }\n\n        /**\n         * Base widget initialization procedures\n         */\n        init() {\n            // process config attributes\n            this._applyConfiguration();\n\n            this._setCompatibilityOptions();\n\n            // ensure placement key\n            if (!this._ensurePlacementKey()) return;\n\n            // Tell the widget to load\n            this.load();\n        }\n\n        /**\n         * This is for extended widgets, so they may modify the configuration before loading\n         */\n        _setCompatibilityOptions() {\n            // By default, this does nothing. Must be overridden to be useful\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Widget configuration definitions\n         * @return {{}}\n         */\n        getSettings() {\n            // Override this\n            return {};\n        }\n\n        /**\n         * Main widget load function.\n         */\n        load() {\n            // Override this in the widget implementation\n        }\n\n        /**\n         * Applies data attribute settings and defaults to the widget configuration\n         * @private\n         */\n        _applyConfiguration() {\n\n            // this.config was set to the options provided in the constructor\n            // so layer data attributes on top\n\n            const data = this.getDataAttributes();\n            const settings = this.getSettings();\n            Object\n                .keys(data)\n                .forEach((key) => {\n                    let normalizedKey = key.replace(DATA_REPLACE_PATTERN, '_');\n\n                    let val = data[key];\n\n                    // Attempt to convert the value if there's a setting for it\n                    if (settings[normalizedKey]) val = settings[normalizedKey].value(val, false);\n\n                    if (!okanjo.util.isEmpty(val)) {\n                        this.config[normalizedKey] = val;\n                    }\n                })\n            ;\n\n            // Apply defaults from the widget settings\n            Object.keys(settings).forEach((key) => {\n                if (this.config[key] === undefined && settings[key]._default !== undefined) {\n                    this.config[key] = settings[key].value(undefined, false);\n                }\n            });\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets a copy of the configuration, suitable for transmission\n         * @return {{}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = {};\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let group = null;\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        /**\n         * Before loading, ensure that a placement key is present or abort\n         * @return {boolean}\n         * @private\n         */\n        _ensurePlacementKey() {\n\n            // Check if set on widget or globally\n            if (this.config.key) {\n                return true;\n            } else if (okanjo.key) {\n                // Copy key from global scope,\n                this.config.key = okanjo.key;\n                return true;\n            }\n\n            // No key set, can't load.\n            okanjo.report('No key provided on widget', { widget: this });\n            this.showError('Error: Missing placement key.');\n            return false;\n        }\n\n        /**\n         * Displays an error in the widget element\n         * @param message\n         */\n        showError(message) {\n            this.setMarkup(okanjo.ui.engine.render(\n                'okanjo.error',\n                this,\n                { message }\n            ));\n        }\n\n        /**\n         * Sets the markup of the widget's element\n         * @param markup\n         */\n        setMarkup(markup) {\n            this.element.innerHTML = markup;\n            this.setFlexClasses(); // implicitly set the classes\n        }\n\n        /**\n         * Sets the flex classes for the placement container element\n         */\n        setFlexClasses() {\n            const align = this.config.align;\n            const justify = this.config.justify;\n            if (align) this.element.classList.add('okanjo-align-'+align);\n            if (justify) this.element.classList.add('okanjo-justify-'+justify);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the current page URL, sans query string and fragment.\n         * @returns {string} - URL\n         */\n        static getCurrentPageUrl() {\n            return window.location.href.replace(/([?#].*)$/, '');\n        }\n\n        /**\n         * Instead of using HTML5 dataset, just rip through attributes and return data attributes\n         * @returns {*}\n         */\n        getDataAttributes() {\n            const data = {};\n                Array\n                    .from(this.element.attributes)\n                    .forEach((attr) => {\n                        const match = DATA_ATTRIBUTE_PATTERN.exec(attr.name);\n                        if (match) {\n                            data[match[1]] = attr.value;\n                        }\n                    });\n            return data;\n        }\n\n    }\n\n    /**\n     * Fluent configuration helper for organizing and formatting ad-hoc configuration values\n     * @type {Field}\n     */\n    Widget.Field = class Field {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n            this._convert = null;\n            this._strip = false;\n            this._default = undefined;\n            this._group = null;\n        }\n\n        /**\n         * Formats the value as an array of strings\n         * @param converter\n         * @return {Field}\n         */\n        array(converter) {\n            this._convert = (val) => {\n                if (Array.isArray(val)) {\n                    if (converter) {\n                        return val.map((v) => converter(v))\n                    } else {\n                        return val;\n                    }\n                }\n                val = val.replace(/\\\\,/g, '\\0');\n                return val.split(',').map((v) => {\n                    let res = v.trim().replace('\\0', ',');\n                    if (converter) res = converter(res);\n                    return res;\n                });\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static array(converter) { return (new Field()).array(converter); }\n\n        /**\n         * Formats the value as a string\n         * @return {Field}\n         */\n        string() {\n            this._convert = (val) => {\n                if (val === null || val === undefined) return val;\n                else return \"\"+val;\n            };\n            return this;\n        }\n        static string() { return (new Field()).string(); }\n\n        /**\n         * Formats the value as a boolean (takes 1, 0, true, false)\n         * @return {Field}\n         */\n        bool() {\n            this._convert = (val) => {\n                if (typeof val === \"string\") {\n                    return (val === \"1\" || val.toLowerCase() === \"true\");\n                } else {\n                    return !!val;\n                }\n            };\n            return this;\n        }\n        //noinspection JSUnusedGlobalSymbols\n        static bool() { return (new Field()).bool(); }\n\n        /**\n         * Indicates the field should not be passed on for transmission\n         * @return {Field}\n         */\n        strip() { this._strip = true; return this; }\n        static strip() { return (new Field()).strip(); }\n\n        /**\n         * Formats the value as a integer (whole) number\n         * @return {Field}\n         */\n        int() { this._convert = (val) => parseInt(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static int() { return (new Field()).int(); }\n\n        /**\n         * Formats the value as a floating point number\n         * @return {Field}\n         */\n        float() { this._convert = (val) => parseFloat(val); return this; }\n        //noinspection JSUnusedGlobalSymbols\n        static float() { return (new Field()).float(); }\n\n        //noinspection ReservedWordAsName\n        /**\n         * Sets the default value to use if not set\n         * @param val\n         * @return {Field}\n         */\n        default(val) {\n            this._default = val;\n            return this;\n        }\n\n        /**\n         * Assigns the property to a bucket for hierarchy\n         * @param name\n         * @return {Field}\n         */\n        group(name) {\n            this._group = name;\n            return this;\n        }\n\n        /**\n         * Gets the group the field belongs to\n         * @return {*|null}\n         */\n        getGroup() {\n            return this._group;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Gets the formatted value of the field\n         * @param val\n         * @param strip\n         * @return {*}\n         */\n        value(val, strip=true) {\n            if (this._strip && strip) return undefined;\n            if (val !== undefined && this._convert) {\n                val = this._convert(val);\n            }\n            return val !== undefined ? val : this._default;\n        }\n\n    };\n\n    // Export\n    return okanjo._Widget = Widget;\n\n})(window);\n\n\n\n","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    //region Imports and Constants\n\n    const okanjo = window.okanjo;\n    const { string, array, float, int, bool } = okanjo._Widget.Field;\n    const Metrics = okanjo.metrics.constructor;\n    const TemplateEngine = okanjo.ui.engine.constructor;\n\n    const FILTERS = 'filters';\n    const DISPLAY = 'display';\n    const ARTICLE_META = 'article_meta';\n\n    const MINIMUM_VIEW_PX = 0.5;    // 50% of pixels must be in viewport\n    const MINIMUM_VIEW_TIME = 1000; // for 1 full second\n    const MINIMUM_VIEW_FREQ = 2;    // time / freq = interval\n\n    //endregion\n\n    /**\n     * Placement widget\n     */\n    class Placement extends okanjo._Widget {\n\n        //region Configuration & Overrides\n\n        /**\n         * Initializes a new placement\n         * @param element\n         * @param options\n         */\n        constructor(element, options = {}) {\n\n            // Flatten the options before passing on\n            options = okanjo.util.flatten(options, { ignoreArrays: true });\n            super(element, options);\n\n            this.name = 'Placement';\n            this._metricBase = {}; // placeholder for metrics\n            this._response = null;\n\n            // Aggregate view watchers into a single interval fn\n            this._viewWatcherIv = null;\n            this._viewedWatchers = [];\n\n            // Start loading content\n            if (!options.no_init) this.init();\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Gets the widget settings configuration\n         * @return {{type: *, ids: *, q: *, url: *, url_referrer: *, url_selectors: *, organization_id: *, property_id: *, store_id: *, organization_name: *, property_name: *, store_name: *, external_id: *, sku: *, external_store_id: *, condition: *, manufacturer: *, upc: *, isbn: *, tags: *, category: *, pools: *, min_price: *, max_price: *, min_donation_percent: *, max_donation_percent: *, donation_to: *, sort_by: *, sort_direction: *, skip: *, take: *, placement_tests_only: *, size: *, template_name: *, template_layout: *, template_theme: *, template_cta_style: *, template_cta_text: *, template_cta_color: *, adx_unit_path: *, url_category: *, url_keywords: *, no_init: *, proxy_url: *, expandable, disable_inline_buy, disable_popup, backwards: *}}\n         */\n        getSettings() {\n            return {\n\n                // What type of response do you want\n                type: string().group(FILTERS),\n\n                // What specific products do you want\n                ids: array().group(FILTERS),\n\n                // Filter by generic query string\n                q: string().group(FILTERS),\n\n                // Filter by relation to content\n                url: string().group(FILTERS),\n                url_referrer: string().group(FILTERS).strip(),\n                url_selectors: string().group(FILTERS),\n                url_paths: array().group(FILTERS),\n                not_url_paths: array().group(FILTERS),\n\n                // Filter by hierarchy\n                organization_id: string().group(FILTERS),\n                property_id: string().group(FILTERS),\n                store_id: string().group(FILTERS),\n\n                // Filter by hierarchy names (use *_id where possible, this might not work as you might expect)\n                organization_name: string().group(FILTERS),\n                property_name: string().group(FILTERS),\n                store_name: string().group(FILTERS),\n\n                // Filter by integrations\n                external_id: string().group(FILTERS),\n                sku: string().group(FILTERS),\n                external_store_id: string().group(FILTERS),\n\n                // Filter by product attributes\n                condition: string().group(FILTERS),\n                manufacturer: string().group(FILTERS),\n                upc: string().group(FILTERS),\n                isbn: string().group(FILTERS),\n\n                // Filter by categorization / distribution\n                tags: array().group(FILTERS),\n                category: array().group(FILTERS),\n                pools: array().group(FILTERS),\n\n                // Filter by price range\n                min_price: float().group(FILTERS),\n                max_price: float().group(FILTERS),\n\n                // Filter by donation ranges\n                min_donation_percent: float().group(FILTERS),\n                max_donation_percent: float().group(FILTERS),\n\n                // Filter by donation recipient\n                donation_to: string().group(FILTERS),\n\n                // Sorting\n                sort_by: string().group(FILTERS),\n                sort_direction: string().group(FILTERS),\n\n                // Pagination\n                skip: int().group(FILTERS),\n                take: int().group(FILTERS),\n\n                // Placement Testing\n                placement_tests_only: bool(),\n\n                // Display settings\n                size: string().group(DISPLAY),\n                template_name: string().group(DISPLAY),\n                template_layout: string().group(DISPLAY),\n                template_theme: string().group(DISPLAY),\n                template_variant: string().group(DISPLAY),\n                template_cta_style: string().group(DISPLAY),\n                template_cta_text: string().group(DISPLAY),\n                template_cta_color: string().group(DISPLAY),\n                adx_unit_path: string().group(DISPLAY), // Custom DFP ad unit path\n\n                // Flexbox\n                align: string().group(DISPLAY),\n                justify: string().group(DISPLAY),\n\n                // Custom CSS\n                custom_css_url: string().group(DISPLAY),\n                custom_css: string().group(DISPLAY),\n\n                // Article metadata\n                url_category: array().group(ARTICLE_META),\n                url_keywords: array().group(ARTICLE_META),\n\n                // Functional settings\n                key: string().strip(), // don't need to resend key on all our requests\n                no_init: bool().strip(), // don't automatically load the placement, do it manually (e.g. (new Placement({no_init:true})).init()\n                no_css: bool().strip(), // don't automatically include stylesheets\n                verbose_click_data: bool().strip().default(false), // when enabled, sends ok_msid, ok_ch, ok_cx, _okjr to the destination url\n                utm_click_data: bool().strip().default(true), // when enabled, sends url_source, utm_campaign, and utm_medium to the destination url\n                proxy_url: string().strip(),\n                expandable: bool().strip().default(true),\n                disable_inline_buy: bool().strip().default(false), // stops inline buy functionality\n                disable_popup: bool().strip().default(false), // stops new window on mobile for inline buy functionality\n                backwards: string().strip(), // internal flag indicating port from a deprecated widget\n                testing: bool().strip() // metrics flag to indicate testing\n            };\n        }\n\n        /**\n         * Gets the widget configuration formatted using settings, suitable for transmission\n         * @return {{filters: {}, display: {}, backfill: {}, shortfill: {}, article_meta: {}}}\n         */\n        getConfig() {\n            const settings = this.getSettings();\n            const out = { filters: {}, display: {}, backfill: {}, shortfill: {}, article_meta: {} };\n            const backfillPattern = /^backfill_(.+)$/; // backfill_property\n            const shortfillPattern = /^shortfill_(.+)$/; // shortfill_property\n\n            Object.keys(this.config).forEach((origKey) => {\n                let val = this.config[origKey];\n                let key = origKey;\n                let isBackfill = false;\n                let isShortfill = false;\n                let group = null;\n\n                // Get the property name if it was prefixed with backfill\n                let matches = backfillPattern.exec(origKey);\n                if (matches) {\n                    key = matches[1];\n                    isBackfill = true;\n                } else {\n                    // Get the property name if it was prefixed with shortfill\n                    matches = shortfillPattern.exec(origKey);\n                    if (matches) {\n                        key = matches[1];\n                        isShortfill = true;\n                    }\n                }\n\n                // Check if this is a known property\n                if (settings[key]) {\n                    val = settings[key].value(val);\n                    group = settings[key].getGroup();\n                }\n\n                // Init the target/group if not already setup\n                let target = out;\n                if (isBackfill) {\n                    target = out.backfill;\n                } else if (isShortfill) {\n                    target = out.shortfill;\n                }\n\n                // Set the target to the bucket in the settings container\n                // except shortfill - can only apply settings directly to the bucket\n                // e.g. backfill_url -> { backfill: { filters: { url: xxx } } }\n                // e.g. shortfill_url-> { shortfill: { url: xxx } }\n                if (!isShortfill && group) {\n                    target[group] = target[group] || {};\n                    target = target[group];\n                }\n\n                // Set the value on the target if set\n                if (val === null) {\n                    target[key] = ''; // format null values as empty strings for transmission\n                } else if (val !== undefined) {\n                    target[key] = val;\n                }\n            });\n\n            return out;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Core load process\n         */\n        load() {\n            // Set metric base data (stub for all future events emitted by the widget)\n            this._setMetricBase();\n\n            // Find out what we should display here\n            this._fetchContent((err) => {\n                if (err) {\n                    // Report the widget load as declined\n                    this._reportWidgetLoad(\"fetch failed: \" + err.statusCode || /* istanbul ignore next: out of scope */ err.toString());\n                } else {\n                    // Merge display settings from response\n                    this._mergeResponseSettings();\n\n                    // Merge the referential data from the response\n                    this._updateBaseMetaFromResponse();\n\n                    // Handle rendering based on output type\n                    this._showContent();\n                }\n            });\n        }\n\n        //endregion\n\n        //region Internal Helpers\n\n        /**\n         * Initializes the common metric data for events emitted by the placement\n         * @private\n         */\n        _setMetricBase() {\n            const base = this._metricBase;\n            base.ch = Metrics.Channel.placement;\n            base.cx = this.config.backwards || 'auto';\n            base.key = this.config.key;\n            base.m = base.m || {};\n            base.m.wgid = this.instanceId;\n\n            if (this.config.testing) base.env = Metrics.Environment.testing;\n        }\n\n        /**\n         * Emits the widget impression event\n         * @param declined\n         * @private\n         */\n        _reportWidgetLoad(declined) {\n\n            const res = this._response || {};\n            const data = res.data || { results: [] };\n\n            // If this is declined, mark future events as declined too\n            this._metricBase.m.decl = declined || '0';\n\n            // Attach other main response attributes to all future events\n            this._metricBase.m.res_bf = data.backfilled ? 1 : 0; // whether the response used the back fill flow\n            this._metricBase.m.res_sf = data.shortfilled ? 1 : 0; // whether the response used the short fill flow\n            this._metricBase.m.res_spltfl = data.splitfilled ? 1 : 0; // whether the response used the short fill flow\n            this._metricBase.m.res_total = data.total || 0; // how many total candidate results were available given filters\n            this._metricBase.m.res_type = data.type; // what the given resource type was\n            this._metricBase.m.res_length = data.results.length; // number of resources delivered\n\n            // Track impression\n            okanjo.metrics.create(this._metricBase)\n                .type(Metrics.Object.widget, Metrics.Event.impression)\n                .meta(this.getConfig())\n                .element(this.element) // this might not be all that useful cuz the content hasn't been rendered yet\n                .viewport()\n                .widget(this.element)\n                .send();\n\n            // Start watching for a viewable impression\n            this._addOnceViewedHandler(this.element, () => {\n                okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.widget, Metrics.Event.view)\n                    .meta(this.getConfig())\n                    .element(this.element)\n                    .viewport()\n                    .widget(this.element)\n                    .send();\n            });\n        }\n\n        /**\n         * Executes the request for content to fill the placement\n         * @param callback\n         * @private\n         */\n        _fetchContent(callback) {\n            // Build request to api, starting with this placement config params\n            const query = this.getConfig();\n\n            // Extract the key\n            const key = this.config.key;\n\n            // Attach sid and referrer\n            if (okanjo.metrics.sid) query.sid = okanjo.metrics.sid;\n            query.filters.url_referrer = this.config.url_referrer || window.location.href;\n            query.wgid = this.instanceId;\n            query.pgid = okanjo.metrics.pageId;\n\n            // Send it\n            okanjo.net.request.post(\n                `${okanjo.net.getRoute(okanjo.net.routes.ads, null, this.config.sandbox ? 'sandbox' : 'live')}?key=${encodeURIComponent(key)}`,\n                query,\n                (err, res) => {\n                    if (err) {\n                        okanjo.report('Failed to retrieve placement content', err, { placement: this });\n                        this.setMarkup(''); // Don't show anything\n                        this.emit('error', err);\n                        callback && callback(err);\n                    } else {\n\n                        // Store the raw response\n                        this._response = res;\n\n                        // Hook point for response handling\n                        this.emit('data');\n\n                        // Return\n                        callback && callback();\n                    }\n                }\n            );\n        }\n\n        /**\n         * Applies response filters and display settings into the widget configuration\n         * @private\n         */\n        _mergeResponseSettings() {\n            const res = this._response;\n            const data = res.data || {};\n            const settings = data.settings || {};\n\n            if (settings.filters) {\n                Object.keys(settings.filters).forEach((key) => {\n                    this.config[key] = settings.filters[key];\n                });\n            }\n\n            if (settings.display) {\n                Object.keys(settings.display).forEach((key) => {\n                    this.config[key] = settings.display[key];\n                });\n            }\n        }\n\n        /**\n         * Applies response data to future metric events\n         * @private\n         */\n        _updateBaseMetaFromResponse() {\n            // Update the base metric data with info from the response\n            const data = (this._response|| {}).data || {};\n            this._metricBase.m = this._metricBase.m || {};\n            const meta = this._metricBase.m;\n\n            // Article\n            if (data.article) meta.aid = data.article.id;\n\n            if (data.test && data.test.enabled) {\n                meta.pten = 1;\n                meta.ptid = data.test.id;\n                meta.ptseed = data.test.seed;\n            } else {\n                meta.pten = 0;\n            }\n        }\n\n        /**\n         * Beings the render process based on the response content\n         * @private\n         */\n        _showContent() {\n            const data = (this._response|| {}).data || {};\n\n            // Known content types we can display\n            if (data.type === Placement.ContentTypes.products) {\n                this._showProducts();\n            } else if (data.type === Placement.ContentTypes.articles) {\n                this._showArticles();\n            } else if (data.type === Placement.ContentTypes.adx) {\n                this._showADX();\n            } else {\n                // Unknown response type!\n\n                // Report the widget load as declined\n                const msg = 'Unknown response content type: ' + data.type;\n                okanjo.report(msg, { placement: this });\n                this.setMarkup(''); // Don't show anything\n                this.emit('error', msg);\n                this._reportWidgetLoad(msg);\n            }\n        }\n\n        /**\n         * Generates the click url using the event, proxy_url, and additional params\n         * @param event\n         * @param url\n         * @param additionalUrlParams\n         * @return {*}\n         * @private\n         */\n        _getClickThroughURL(event, url, additionalUrlParams) {\n            const joiner = url.indexOf('?') >= 0 ? '&' : '?';\n\n            // Tack on transfer params\n            additionalUrlParams = additionalUrlParams || /* istanbul ignore next: paranoia */ {};\n            additionalUrlParams.ok_msid = okanjo.metrics.sid || 'unknown';\n            if (this.config.verbose_click_data) {\n                additionalUrlParams.ok_ch = this._metricBase.ch;\n                additionalUrlParams.ok_cx = this._metricBase.cx;\n                additionalUrlParams._okjr = btoa(window.location.href.split(/[?#]/)[0]); // mod_security by default 403's when urls are present as query args\n            }\n            if (this.config.utm_click_data) {\n                additionalUrlParams.utm_source = 'okanjo';\n                additionalUrlParams.utm_medium = 'smartserve';\n                // additionalUrlParams.utm_source = window.location.hostname;\n                // additionalUrlParams.utm_campaign = 'smartserve';\n            }\n\n            url += joiner + Object.keys(additionalUrlParams)\n                    .map((key) => encodeURIComponent(key)+'='+encodeURIComponent(additionalUrlParams[key]))\n                    .join('&');\n\n            // Wrap the url if we're proxying\n            if (this.config.proxy_url) {\n                url = this.config.proxy_url + encodeURIComponent(url);\n            }\n\n            // Set the url on the event\n            event.data({\n                u: url\n            });\n\n            return event.toUrl();\n        }\n\n        /**\n         * Converts a resource's link into one suitable for tracking, making middle-click safe\n         * @param type\n         * @param resource\n         * @param e\n         * @private\n         */\n        _handleResourceMouseDown(type, resource, e) {\n            // Generate a new click id for this event\n            // const clickId = okanjo.util.shortid();\n            const clickId = resource._cid;\n\n            // Start building the event\n            const event = okanjo.metrics.create(this._metricBase, {\n                id: resource.id\n            })\n                .type(type, Metrics.Event.interaction)\n                .meta(this.getConfig())\n                .meta({ cid: clickId })\n                .meta({\n                    bf: resource.backfill ? 1 : 0,\n                    sf: resource.shortfill ? 1 : 0,\n                    spltfl_seg: resource.splitfill_segment || null\n                })\n                .event(e)\n                .element(e.currentTarget)\n                .viewport()\n                .widget(this.element);\n\n            // Pull the proper params out of the resource depending on it's type\n            let trackParam = 'url_track_param';\n            let urlParam = 'url';\n\n            if (type === Metrics.Object.product) {\n                trackParam = 'buy_url_track_param';\n                urlParam = 'buy_url';\n            }\n\n            // Attach the campaign tracking identifier\n            const additionalParams = {\n                ok_cid: clickId\n            };\n            if (resource[trackParam]) additionalParams[resource[trackParam]] = clickId;\n\n            // Update the link with the event data\n            event.data({ ea: Metrics.Action.click });\n            e.currentTarget.href = this._getClickThroughURL(event, resource[urlParam], additionalParams);\n\n            // Cache this on the product\n            resource._clickId = clickId;\n            resource._event = event;\n            resource._additionalParams = additionalParams;\n        }\n\n        /**\n         * Gets the template to use, accounting for configured preference if available\n         * @param contentType\n         * @param defaultName\n         * @return {string}\n         * @private\n         */\n        _getTemplate(contentType, defaultName) {\n            let templateName = this.config.template_name;\n            if (!templateName ||\n                !okanjo.ui.engine.isTemplateRegistered(`${contentType}.${templateName}`)) {\n                templateName = defaultName;\n            }\n            return `${contentType}.${templateName}`;\n        }\n\n        /**\n         * Enforces size/layout/cta restrictions\n         * @private\n         */\n        _enforceLayoutOptions() {\n            // Enforce format restrictions\n            if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n                this.config.template_cta_style = \"link\";\n            } else if (this.config.size === \"half_page\" || this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            }\n        }\n\n        /**\n         * Enforces\n         * @private\n         */\n        _enforceSlabLayoutOptions() {\n            if (this.config.size === \"medium_rectangle\" || this.config.size === \"billboard\") {\n                // no list view\n                this.config.template_layout = \"grid\";\n\n                // no buttons\n                if (this.config.template_cta_style === \"button\") {\n                    this.config.template_cta_style = \"link\";\n                }\n            } else if (this.config.size === \"half_page\") {\n                this.config.template_layout = \"grid\";\n            } else if (this.config.size === \"leaderboard\" || this.config.size === \"large_mobile_banner\") {\n                this.config.template_layout = \"list\";\n\n                // no button\n                if (this.config.template_cta_style === \"button\") {\n                    this.config.template_cta_style = \"link\";\n                }\n            } else if (this.config.size === \"auto\") {\n                this.config.template_layout = \"list\";\n            } else if (this.config.size === \"responsive\") {\n                // no button in responsive mode\n                if (this.config.template_cta_style === \"button\") {\n                    this.config.template_cta_style = \"link\";\n                }\n            }\n        }\n\n        /**\n         * Handles custom styling display settings\n         * @private\n         */\n        _registerCustomBranding(/*prefix, buttonClass*/) {\n            const brandColor = this.config.template_cta_color,\n                brandCSSId = \"okanjo-wgid-\" + this.instanceId;\n            let brandCSS = '';\n\n            if (brandColor) {\n                brandCSS = `\n                    .okanjo-block2.${brandCSSId} .okanjo-resource-cta-button, .okanjo-block2.${brandCSSId} .okanjo-resource-buy-button { color: ${brandColor} !important; } \n                    .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-cta-button, .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-buy-button { border-color: ${brandColor} !important; } \n                    .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-cta-button:hover, .okanjo-block2.${brandCSSId}.okanjo-cta-style-button .okanjo-resource-buy-button:hover { background: ${brandColor} !important; color: #fff !important; } \n                `;\n            }\n\n            // Append custom inline css to the element\n            if (this.config.custom_css) {\n                brandCSS += '\\n\\n' + this.config.custom_css;\n            }\n\n            // Custom external stylesheet first (so inline styles can get priority)\n            if (this.config.custom_css_url) {\n                okanjo.ui.engine.ensureExternalCss(this.config.custom_css_url);\n            }\n\n            // Append the custom widget css to the dom\n            if (brandCSS) {\n                okanjo.ui.engine.registerCss(brandCSSId, brandCSS, { id: brandCSSId });\n                okanjo.ui.engine.ensureCss(brandCSSId);\n            }\n        }\n\n        /**\n         * When element is in view per viewability constants (50% for 1s) trigger handler once\n         * @param element\n         * @param handler\n         * @private\n         */\n        _addOnceViewedHandler(element, handler) {\n            let controller = {\n                element,\n                successfulCount: 0,\n                handler\n            };\n\n            // Add our element to the watch list and turn on the watcher if not already on\n            this._viewedWatchers.push(controller);\n            this._toggleViewWatcher(true);\n        }\n\n        /**\n         * Interval function to check viewability of registered elements\n         * @private\n         */\n        _checkViewWatchers() {\n\n            // Check each registered watcher\n            for (let i = 0, controller; i < this._viewedWatchers.length; i++) {\n                controller = this._viewedWatchers[i];\n\n                // Check if watcher is complete, then remove it from the list\n                /* istanbul ignore next: jsdom won't trigger this */\n                if (okanjo.ui.isElementVisible(controller.element) &&\n                    okanjo.ui.getPercentageInViewport(controller.element) >= MINIMUM_VIEW_PX) {\n                    controller.successfulCount++;\n                }\n\n                // While this could more optimally be contained within the former condition, unit-testing blocks on this\n                if (controller.successfulCount >= MINIMUM_VIEW_FREQ) {\n                    controller.handler();\n                    this._viewedWatchers.splice(i, 1);\n                    i--;\n                }\n            }\n\n            // Turn off if nobody is watching\n            if (this._viewedWatchers.length === 0) {\n                this._toggleViewWatcher(false);\n            }\n        }\n\n        /**\n         * Turns the viewability watcher on and off\n         * @param enabled\n         * @private\n         */\n        _toggleViewWatcher(enabled) {\n            if (enabled) {\n                if (this._viewWatcherIv === null) {\n                    this._viewWatcherIv = setInterval(this._checkViewWatchers.bind(this), MINIMUM_VIEW_TIME / MINIMUM_VIEW_FREQ);\n                }\n            } else {\n                clearInterval(this._viewWatcherIv);\n                this._viewWatcherIv = null;\n            }\n        }\n\n        //endregion\n\n        //region Product Handling\n\n        /**\n         * Renders a product response\n         * @private\n         */\n        _showProducts() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.products, Placement.DefaultTemplates.products);\n\n            // - render\n\n            // Format products\n            data.results.forEach((offer, index) => {\n                // Disable inline buy if configured to do so\n                if (this.config.disable_inline_buy) offer.inline_buy_url = null;\n                if (offer.inline_buy_url) offer._escaped_inline_buy_url = encodeURIComponent(offer.inline_buy_url);\n\n                // Set primary image\n                offer._image_url = offer.image_urls ? offer.image_urls[0] : '' ;\n\n                // Escape buy url (fixme: does not include proxy_url!)\n                offer._escaped_buy_url = encodeURIComponent(offer.buy_url);\n\n                // Make price tag pretty\n                offer._price_formatted = TemplateEngine.formatCurrency(offer.price);\n                offer._index = index;\n            });\n\n            const model = {\n                css: !this.config.no_css\n            };\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, model));\n\n            // Detect broken images\n            this.element.querySelectorAll('.okanjo-resource-image').forEach((img) => {\n                img.addEventListener('error', () => {\n                    img.src = okanjo.ui.inlineSVG(okanjo.ui.productSVG());\n                    console.error('[okanjo] Failed to load product image: ' + img.getAttribute('data-id'));\n                    // TODO: notify of resource failure\n                });\n            });\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break it */\n                if (id && index >= 0) {\n                    const product = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break it */\n                    if (product) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.product, product));\n                        a.addEventListener('click', this._handleProductClick.bind(this, product));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: product.id })\n                            .type(Metrics.Object.product, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({\n                                bf: product.backfill ? 1 : 0,\n                                sf: product.shortfill ? 1 : 0,\n                                spltfl_seg: product.splitfill_segment || null\n                            })\n                            .element(a)\n                            .viewport()\n                            .widget(this.element)\n                            .send();\n\n                        // Start watching for a viewable impression\n                        this._addOnceViewedHandler(a, () => {\n                            okanjo.metrics.create(this._metricBase, { id: product.id })\n                                .type(Metrics.Object.product, Metrics.Event.view)\n                                .meta(this.getConfig())\n                                .meta({\n                                    bf: product.backfill ? 1 : 0,\n                                    sf: product.shortfill ? 1 : 0,\n                                    spltfl_seg: product.splitfill_segment || null\n                                })\n                                .element(a)\n                                .viewport()\n                                .widget(this.element)\n                                .send();\n                        });\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Fit images\n            okanjo.ui.fitImages(this.element);\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the product click process\n         * @param product\n         * @param e\n         * @private\n         */\n        _handleProductClick(product, e) {\n\n            // Update the event\n            if (!product._event || !product._additionalParams || !product._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.product, product, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = product;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Determine what we're doing - native ux or redirect\n            const showNativeBuyUx = !!product.inline_buy_url,\n                showPopupNativeBuyUx = !this.config.disable_popup && showNativeBuyUx && okanjo.util.isMobile()\n            ;\n\n            // Show the inline buy experience or redirect\n            if (showPopupNativeBuyUx) {\n                // Mobile native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                //\n                // Mobile devices (especially iOS) have real janky UX when interacting with iframes.\n                // So, we'll choose to popup a window with the native buy experience, so we can ensure\n                // a positive user experience. Nobody likes bouncy form fields and really weird zooming.\n                //\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ popup: 'true' });\n\n                // Get the frame url\n                let url = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Open the window or redirect if that failed\n                this._popupFrame = window.open(url, \"okanjo-inline-buy-frame\", \"width=400,height=400,location=yes,resizable=yes,scrollbars=yes\");\n                /* istanbul ignore else: jsdom doesn't support window.open or setting window.location.href */\n                if (!this._popupFrame) {\n                    // Fallback to just replacing the window with the target, since popups don't work :(\n                    okanjo.report('Popup blocker stopped buy experience from showing', { placement: this });\n                    window.location.href = url;\n                }\n\n            } else if (showNativeBuyUx) {\n                // Regular native buy ux\n\n                // Don't follow the link\n                e.preventDefault();\n\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-inline-buy-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto'\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Check whether we're allowed to expand past the bounds of the placement\n                additionalParams.ok_expandable = this.config.expandable ? 1: 0;\n                if (!this.config.expandable) {\n                    const parent = this.element.querySelector('.okanjo-expansion-root');\n                    /* istanbul ignore else: custom templates could break this */\n                    if (parent) {\n                        frame.className += ' okanjo-ad-in-unit';\n                        frame.setAttribute('height', \"100%\");\n                        frame.setAttribute('width', \"100%\");\n\n                        parent.appendChild(frame);\n\n                        const size = okanjo.ui.getElementSize(parent);\n                        additionalParams.ok_frame_height = size.height;\n                        additionalParams.ok_frame_width = size.width;\n                        /* istanbul ignore next: i'm not writing a whole test for this one config param */\n                        if (this.config.size) additionalParams.ok_ad_size = this.config.size;\n                    }\n                }\n\n                // Update the event\n                event\n                    .data({ ea: Metrics.Action.inline_click })\n                    .meta({ expandable: this.config.expandable ? 'true' : 'false' });\n\n                // Set the frame url\n                frame.src = this._getClickThroughURL(event, product.inline_buy_url, additionalParams);\n\n                // Show the modal if it was not internally expanded\n                if (!frame.parentNode) {\n                    okanjo.ui.modal.show(frame);\n                }\n\n            } else {\n                // Update the link a second time, just in case the data changed\n                e.currentTarget.href = this._getClickThroughURL(event, product.buy_url, additionalParams);\n            }\n        }\n\n        //endregion\n\n        //region Article Handling\n\n        /**\n         * Renders an article response\n         * @private\n         */\n        _showArticles() {\n            const data = (this._response || { data: { results: [] } }).data || { results: [] };\n\n            // Determine template to render, using custom template name if it exists\n            const templateName = this._getTemplate(Placement.ContentTypes.articles, Placement.DefaultTemplates.articles);\n\n            // - render\n\n            // Format articles\n            data.results.forEach((article, index) => {\n                // Escape url (fixme: does not include proxy_url!)\n                article._escaped_url = encodeURIComponent(article.url);\n                article._index = index;\n            });\n\n            const model = {\n                css: !this.config.no_css\n            };\n\n            // Render and display the results\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, model));\n\n            // Detect broken images\n            this.element.querySelectorAll('.okanjo-resource-image').forEach((img) => {\n                img.addEventListener('error', () => {\n                    img.src = okanjo.ui.inlineSVG(okanjo.ui.articleSVG());\n                    console.error('[okanjo] Failed to load article image: ' + img.getAttribute('data-id'));\n                    // TODO: notify of resource failure\n                });\n            });\n\n            // Track widget impression\n            if (data.results.length === 0) {\n                // Hook point for no results found\n                this.emit('empty');\n                this._reportWidgetLoad('empty'); // decline the impression\n            } else {\n                this._reportWidgetLoad();\n            }\n\n            // Bind interaction handlers and track impressions\n            this.element.querySelectorAll('a').forEach((a) => {\n\n                const id = a.getAttribute('data-id'),\n                    index = a.getAttribute('data-index');\n\n                // Don't bind links that are not tile links\n                /* istanbul ignore else: custom templates could break this */\n                if (id && index >= 0) {\n                    const article = this._response.data.results[index];\n                    /* istanbul ignore else: custom templates could break this */\n                    if (article) {\n\n                        // Bind interaction listener\n                        a.addEventListener('mousedown', this._handleResourceMouseDown.bind(this, Metrics.Object.article, article));\n                        a.addEventListener('click', this._handleArticleClick.bind(this, article));\n\n                        // Track impression\n                        okanjo.metrics.create(this._metricBase, { id: article.id })\n                            .type(Metrics.Object.article, Metrics.Event.impression)\n                            .meta(this.getConfig())\n                            .meta({\n                                bf: article.backfill ? 1 : 0,\n                                sf: article.shortfill ? 1 : 0,\n                                spltfl_seg: article.splitfill_segment || null\n                            })\n                            .element(a)\n                            .viewport()\n                            .widget(this.element)\n                            .send();\n\n                        // Start watching for a viewable impression\n                        this._addOnceViewedHandler(a, () => {\n                            okanjo.metrics.create(this._metricBase, { id: article.id })\n                                .type(Metrics.Object.article, Metrics.Event.view)\n                                .meta(this.getConfig())\n                                .meta({\n                                    bf: article.backfill ? 1 : 0,\n                                    sf: article.shortfill ? 1 : 0,\n                                    spltfl_seg: article.splitfill_segment || null\n                                })\n                                .element(a)\n                                .viewport()\n                                .widget(this.element)\n                                .send();\n                        });\n\n                    }\n                }\n            });\n\n            // Truncate product name to fit the space\n            this.element.querySelectorAll('.okanjo-resource-title').forEach((element) => {\n                okanjo.ui.ellipsify(element);\n            });\n\n            // Fit images\n            okanjo.ui.fitImages(this.element);\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        /**\n         * Handles the article click process\n         * @param article\n         * @param e\n         * @private\n         */\n        _handleArticleClick(article, e) {\n            // Update the event\n            if (!article._event || !article._additionalParams || !article._clickId) {\n                this._handleResourceMouseDown(Metrics.Object.article, article, e);\n            }\n\n            // Extract the already generated event and params list\n            const {\n                _event: event,\n                _additionalParams: additionalParams\n            } = article;\n\n            // Update the event to the current one\n            event.event(e);\n\n            // Update the link a second time, just in case the data changed\n            e.currentTarget.href = this._getClickThroughURL(event, article.url, additionalParams);\n        }\n\n        //endregion\n\n        //region ADX Handling\n\n        /**\n         * Renders a Google DFP/ADX response\n         * @private\n         */\n        _showADX() {\n            const data = (this._response || { data: { settings: {} } }).data || { settings: {} };\n\n            // Get the template we should use to render the google ad\n            const templateName = this._getTemplate(Placement.ContentTypes.adx, Placement.DefaultTemplates.adx);\n\n            // Determine what size ad we can place here\n            let size = null;\n            if (this.config.size) {\n                if (Placement.Sizes[this.config.size]) {\n                    // Defined size, use these known dimensions\n                    size = Placement.Sizes[this.config.size];\n                } else {\n                    let match = (/^([0-9]+)x([0-9]+)$/i).exec(this.config.size);\n                    if (match) {\n                        size = { width: match[1], height: match[2] }\n                    }\n                }\n            }\n\n            // No given size, we need to guess\n            if (!size) size = Placement.Sizes.default;\n\n            // If we're using okanjo's ad slot, then track the impression\n            // otherwise decline it because we're just passing through to the publishers account\n            let adUnitPath = '/90447967/okanjo:<publisher>';\n            let declineReason;\n            if (data.settings.display && data.settings.display.adx_unit_path) {\n                adUnitPath = data.settings.display.adx_unit_path;\n                declineReason = 'custom_ad_unit';\n            }\n\n            // Pass along what the template needs to know to display the ad\n            const renderContext = {\n                css: !this.config.no_css,\n                size,\n                adUnitPath\n            };\n\n            // Render the container\n            this.setMarkup(okanjo.ui.engine.render(templateName, this, renderContext));\n\n            // Report the impression\n            this._reportWidgetLoad(declineReason);\n\n            // Insert the actual ad into the container\n            const container = this.element.querySelector('.okanjo-adx-container');\n            /* istanbul ignore else: custom templates could break this */\n            if (container) {\n\n                // Make the frame element\n                const frame = document.createElement('iframe');\n                const attributes = {\n                    'class': 'okanjo-adx-frame',\n                    frameborder: 0,\n                    vspace: 0,\n                    hspace: 0,\n                    webkitallowfullscreen: '',\n                    mozallowfullscreen: '',\n                    allowfullscreen: '',\n                    scrolling: 'auto',\n                    width: size.width,\n                    height: size.height\n                };\n\n                // Apply attributes\n                Object.keys(attributes).forEach((key) => frame.setAttribute(key, attributes[key]));\n\n                // Attach to dOM\n                container.appendChild(frame);\n\n                // Build a click-through tracking url so we know when an ad is clicked too\n                let clickUrl = okanjo.metrics.create(this._metricBase)\n                    .type(Metrics.Object.thirdparty_ad, Metrics.Event.interaction)\n                    .meta(this.getConfig())\n                    .meta({\n                        ta_s: adUnitPath,\n                        ta_w: size.width,\n                        ta_h: size.height\n                    })\n                    .element(frame)\n                    .viewport()\n                    .widget(this.element)\n                    .toUrl();\n\n                // Transfer references to the frame window\n                // frame.contentWindow.okanjo = okanjo;\n                // frame.contentWindow.placement = this;\n                frame.contentWindow.trackImpression = () => {\n                    okanjo.metrics.create(this._metricBase)\n                        .type(Metrics.Object.thirdparty_ad, Metrics.Event.impression)\n                        .meta(this.getConfig())\n                        .meta({\n                            ta_s: adUnitPath,\n                            ta_w: size.width,\n                            ta_h: size.height\n                        })\n                        .element(frame)\n                        .viewport()\n                        .widget(this.element)\n                        .send()\n                    ;\n\n                    // Start watching for a viewable impression\n                    this._addOnceViewedHandler(frame, () => {\n                        okanjo.metrics.create(this._metricBase)\n                            .type(Metrics.Object.thirdparty_ad, Metrics.Event.view)\n                            .meta(this.getConfig())\n                            .meta({\n                                ta_s: adUnitPath,\n                                ta_w: size.width,\n                                ta_h: size.height\n                            })\n                            .element(frame)\n                            .viewport()\n                            .widget(this.element)\n                            .send()\n                        ;\n                    });\n                };\n\n                // Load Google ad!\n                // See: https://developers.google.com/publisher-tag/reference#googletag.events.SlotRenderEndedEvent\n                frame.contentWindow.document.open();\n                frame.contentWindow.document.write(\n`<html><head><style type=\"text/css\">html,body {margin: 0; padding: 0;}</style></head><body><div id=\"gpt-passback\">\n<`+`script type=\"text/javascript\" src=\"https://securepubads.g.doubleclick.net/tag/js/gpt.js\">\n    \n    window.googletag = window.googletag || {cmd: []};\n    googletag.cmd.push(function() {\n        \n        // Define the slot\n        googletag.defineSlot(\"${adUnitPath.replace(/\"/g, '\\\\\"')}\", [[${size.width}, ${size.height}]], 'gpt-passback')\n            .setClickUrl(\"${clickUrl}&u=\")     // Track click event on the okanjo side\n            .addService(googletag.pubads())    // Service the ad\n        ;\n        \n        // Track load/view events\n        googletag.pubads().addEventListener('slotRenderEnded', function(e) { \n            trackImpression(e);\n        });\n        \n        // Go time\n        googletag.enableServices();\n        googletag.display('gpt-passback');\n    });\n    \n<`+`/script></div>\n</body></html>`);\n                frame.contentWindow.document.close();\n\n                // TODO future event hooks\n                // googletag.pubads().addEventListener('impressionViewable', function(e) { future )});\n                // googletag.pubads().addEventListener('slotOnload', function(e) { future });\n                // googletag.pubads().addEventListener('slotVisibilityChangedEvent', function(e) { future );\n\n                // Impression tracking is done from within the iframe. Crazy, right?\n            }\n\n            // Hook point that the widget is done loading\n            this.emit('load');\n        }\n\n        //endregion\n    }\n\n    //region Enumerations\n\n    /**\n     * Standard ad sizes\n     * @type {{billboard: {width: number, height: number}, button_2: {width: number, height: number}, half_page: {width: number, height: number}, leaderboard: {width: number, height: number}, medium_rectangle: {width: number, height: number}, micro_bar: {width: number, height: number}, portrait: {width: number, height: number}, rectangle: {width: number, height: number}, super_leaderboard: {width: number, height: number}, wide_skyscraper: {width: number, height: number}, large_mobile_banner: {width: number, height: number}, mobile_leaderboard: {width: number, height: number}, small_square: {width: number, height: number}, button_1: {width: number, height: number}, full_banner: {width: number, height: number}, half_banner: {width: number, height: number}, large_rectangle: {width: number, height: number}, pop_under: {width: number, height: number}, three_to_one_rectangle: {width: number, height: number}, skyscraper: {width: number, height: number}, square: {width: number, height: number}, square_button: {width: number, height: number}, vertical_banner: {width: number, height: number}, vertical_rectangle: {width: number, height: number}}}\n     */\n    Placement.Sizes = {\n\n        // Supported\n        medium_rectangle:       { width: 300, height: 250 }, // aka: sidekick\n        leaderboard:            { width: 728, height:  90 },\n        large_mobile_banner:    { width: 320, height: 100 },\n        half_page:              { width: 300, height: 600 }, // aka: filmstrip, sidekick\n        billboard:              { width: 970, height: 250 }, // aka: sidekick\n\n        // IAB / Others\n        button_2:               { width: 120, height:  60 },\n        micro_bar:              { width:  88, height:  31 },\n        portrait:               { width: 300, height:1050 },\n        rectangle:              { width: 180, height: 150 },\n        super_leaderboard:      { width: 970, height:  90 }, // aka: pushdown, slider, large_leaderboard\n        wide_skyscraper:        { width: 160, height: 600 },\n\n        // Google\n        mobile_leaderboard:     { width: 320, height:  50 },\n        small_square:           { width: 200, height: 200 },\n\n        // Retired / Deprecated\n        button_1:               { width: 120, height:  90 },\n        full_banner:            { width: 468, height:  60 },\n        half_banner:            { width: 234, height:  60 },\n        large_rectangle:        { width: 336, height: 280 },\n        pop_under:              { width: 720, height: 300 },\n        three_to_one_rectangle: { width: 300, height: 100 },\n        skyscraper:             { width: 120, height: 600 },\n        square:                 { width: 250, height: 250 },\n        square_button:          { width: 125, height: 125 },\n        vertical_banner:        { width: 120, height: 240 },\n        vertical_rectangle:     { width: 240, height: 400 }\n    };\n\n    // When we should show an ad but nobody told us what size\n    Placement.Sizes.default = Placement.Sizes.medium_rectangle;\n\n    /**\n     * Placement content types\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.ContentTypes = {\n        products: 'products',\n        articles: 'articles',\n        adx: 'adx'\n    };\n\n    /**\n     * Default templates for each content type\n     * @type {{products: string, articles: string, adx: string}}\n     */\n    Placement.DefaultTemplates = {\n        products: 'block2',\n        articles: 'block2',\n        adx: 'block2'\n    };\n\n    //endregion\n\n    return okanjo.Placement = Placement;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning a Product widget into a placement widget\n     * @deprecated\n     */\n    class Product extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Product widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Product';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Set filters based on old \"mode\"\n            if (this.config.mode === 'sense') {\n                // sense\n                this.config.url = this.config.url || 'referrer';\n                this.config.take = this.config.take || 5;\n            } else if (this.config.mode === 'single') {\n                // single\n                this.config.url = null;\n                if (this.config.id) this.config.ids = [this.config.id];\n                this.config.take = 1;\n                delete this.config.id;\n            } else {\n                // browse\n                this.config.url = null;\n                this.config.take = this.config.take || 25;\n            }\n            delete this.config.mode;\n\n            // Sold by changed to store name\n            if (this.config.sold_by) {\n                this.config.store_name = this.config.sold_by;\n                delete this.config.sold_by;\n            }\n\n            // Selectors is now url_selectors\n            if (this.config.selectors) {\n                this.config.url_selectors = this.config.selectors;\n                delete this.config.selectors;\n            }\n\n            // Marketplace_id is no longer a thing, closest analog are properties.\n            if (this.config.marketplace_id) {\n                this.config.property_id = this.config.marketplace_id;\n                delete this.config.marketplace_id\n            }\n\n            // Marketplace status is no longer a thing, instead, use the sandbox environment for testing\n            if (this.config.marketplace_status === 'testing') {\n                this.config.sandbox = true;\n            }\n            delete this.config.marketplace_status;\n\n            // Deprecated\n            delete this.config.suboptimal;\n            delete this.config.text;\n        }\n\n    }\n\n    return okanjo.Product = Product;\n\n})(window);","\"use strict\";\n\n// **********\n// DEPRECATED - USE okanjo.Placement instead!\n// **********\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Backwards compatible interface, turning an Ad widget into a placement widget\n     * @deprecated\n     */\n    class Ad extends okanjo.Placement {\n\n        constructor(element, options) {\n            // Initialize placement w/o loading (we need to jack the config)\n            options = options || {};\n            const no_init = options.no_init; // hold original no_init flag, if set\n            options.no_init = true;\n            super(element, options);\n\n            okanjo.warn('Ad widget has been deprecated. Use Placement instead (may require configuration changes)', { widget: this });\n\n            // Start loading content\n            if (!no_init) {\n                delete this.config.no_init;\n                this.init();\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Converts the old product widget configuration into a usable placement configuration\n         */\n        _setCompatibilityOptions() {\n            // Convert the product config to a placement configuration\n            this.config.backwards = 'Ad';\n            this.config.type = okanjo.Placement.ContentTypes.products;\n\n            // Id / single mode is now ids\n            this.config.url = null;\n            if (this.config.id) {\n                this.config.ids = [this.config.id];\n            } else {\n                okanjo.warn('Ad widget should have parameter `id` set.');\n            }\n            this.config.take = 1;\n            delete this.config.id;\n\n            // Content is automatically determined whether the placement element contains children\n            delete this.config.content;\n        }\n\n    }\n\n    return okanjo.Ad = Ad;\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/** Based on https://gist.github.com/mudge/5830382 **/\n(function(window) {\n\n    /**\n     * Simplified EventEmitter base class\n     */\n    class EventEmitter {\n\n        constructor() {\n            this._events = {};\n        }\n\n        /**\n         * Registers an event handler to fire on any occurrence of an event\n         * @param event\n         * @param listener\n         */\n        on(event, listener) {\n            if (!this._events[event]) {\n                this._events[event] = [];\n            }\n\n            this._events[event].push(listener);\n        }\n\n        /**\n         * Removes an event handler for an event\n         * @param event\n         * @param listener\n         */\n        removeListener(event, listener) {\n\n            if (this._events[event]) {\n                let idx = this._events[event].indexOf(listener);\n                if (idx >= 0) {\n                    this._events[event].splice(idx, 1);\n                }\n            }\n        }\n\n        /**\n         * Emits an event\n         * @param event\n         */\n        emit(event) {\n            let i, listeners, length, args = [].slice.call(arguments, 1);\n\n            if (this._events[event]) {\n                listeners = this._events[event].slice();\n                length = listeners.length;\n\n                for (i = 0; i < length; i++) {\n                    listeners[i].apply(this, args);\n                }\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Registers an event handler to fire only once on an event\n         * @param event\n         * @param listener\n         */\n        once(event, listener) {\n\n            const callback = () => {\n                let args = [].slice.call(arguments, 1);\n                this.removeListener(event, callback);\n                listener.apply(this, args);\n            };\n\n            this.on(event, callback);\n        }\n\n    }\n\n    window.okanjo._EventEmitter = EventEmitter;\n    return EventEmitter;\n\n})(window);","/* jshint ignore:start */\n\n(function() {\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n\n\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */"],"sourceRoot":"./"}