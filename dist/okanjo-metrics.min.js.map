{"version":3,"sources":["okanjo-metrics.js","Okanjo.js","Request.js","Cookie.js","Metrics.js","vendor-metrics.js"],"names":["root","factory","define","amd","exports","module","okanjo","this","ELLIPSIFY_PATTERN","Constructor","instance","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_typeof","document","CSS1_COMPATIBLE","Symbol","iterator","obj","constructor","NOOP","window","SUPPORTS_PAGE_OFFSET","undefined","pageXOffset","compatMode","AGENT","navigator","userAgent","MOBILE_PATTERN","Console","console","settings","metrics","report","_len","arguments","args","Array","_key","err","Error","messageIndex","find","arg","stack","split","shift","push","reportStack","join","filter","a","splice","error","version","warn","apply","concat","message","_len2","_key2","selector","parent","qwery","querySelector","querySelectorAll","net","endpoint","sandboxEndpoint","routes","ads","getRoute","route","params","env","request","keys","forEach","replace","util","isEmpty","test","val","trim","getPageArguments","query","eqIndex","includeHashArguments","value","decodeURIComponent","parts","part","indexOf","queryArgs","hashArgs","substring","location","search","hash","Math","max","mixed","out","map","deepClone","options","output","input","isArray","toISOString","childObject","childKey","ignoreArrays","arrayToCsv","flatten","shortid","clusterWorkerId","shuffled","crypto","msCrypto","require","getRandomValues","randomBytes","encode","number","loopCounter","random","dest","Uint8Array","str","done","randomByte","pow","REDUCE_TIME","seconds","counter","previousSeconds","floor","Date","getTime","ui","getScrollPosition","x","documentElement","scrollLeft","body","getElementSize","element","scrollTop","includeMargin","size","height","offsetHeight","width","offsetWidth","style","currentStyle","getComputedStyle","parseInt","marginTop","marginBottom","getPageSize","marginLeft","marginRight","html","getViewportSize","scrollWidth","clientWidth","clientHeight","scrollHeight","vh","isMobileZoom","inWidth","innerWidth","inHeight","innerHeight","getEventPosition","ex","et","event","ey","el","type","__proto__","name","getElementPosition","clientX","clientY","x1","y1","x2","rect","getBoundingClientRect","y2","bottom","contains","exception","left","pos","top","y","right","e","elementArea","iLeft","s","iRight","min","v","vw","iTop","iBottom","intersectionArea","getPercentageInViewport","_okanjo$ui$_getInters","_getIntersection","replacedText","container","substr","parentNode","targetHeight","useTextContent","textContent","text","innerText","safety","replacer","match","span","createElement","content","setAttribute","innerHTML","appendChild","method","url","payload","callback","res","ActiveXObject","calledBack","req","timeout","ontimeout","attributes","statusCode","onreadystatechange","status","data","JSON_TEST","getResponseHeader","parse","responseText","xhr","toUpperCase","open","withCredentials","includes","setRequestHeader","post","send","get","bind","encodeURIComponent","getKey","keyPrefix","stringify","pairs","expireDate","setDate","set","cookieName","expireDays","getDate","expires","toUTCString","path","encodeURI","cookie","cookieValue","nameTest","decodeURI","Metrics","_classCallCheck","sourceCh","_getStoredQueue","sourceCx","pageId","defaultChannel","Channel","external","sid","_checkUrlForReferral","queue","Params","JSON","localStorage","delay","_this","_saveQueueTimeout","clearTimeout","setTimeout","_saveQueue","_queue","object_type","metric_session","event_type","Event","correlation","id","urlSid","_noProcess","context","sourceChannel","pageArgs","channel","localSid","trackEvent","sourceContext","ch","_push","page","view","href","_processQueue","_this2","_processTimeout","items","_batchSend","_updateSid","item","_this3","events","win","metrics_batch","m","exclude","assign","Meta","ok_ver","pgid","referrer","ref","ttl","_len3","_key3","pw","w","ph","h","vp","vx1","vy1","vx2","vy2","jsEvent","_len4","_key4","_len5","_key5","MetricEvent","impression","interaction","Action","click","inline_click","article","thirdparty_ad","cart","order","order_item","user","widget","product","store","cause","marketplace","placement","live","testing","store_widget","Environment","others","_this4","_data","addEventInfo","addViewportInfo","_element","addElementInfo","_len6","_key6","addEventMeta","_normalizeEvent","docElem","FALSE","COMPLETE","ready","fn","isReady","doc","defer","detach","w3c","REMOVEEVENTLISTENER","completed","DOMCONTENTLOADED","wait","DETACHEVENT","ONREADYSTATECHANGE","ONLOAD","READYSTATE","onDomReady","callbacks","ADDEVENTLISTENER","LOAD","ATTACHEVENT","frameElement","doScroll","doScrollCheck","lib"],"mappings":"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","file":"okanjo-metrics.min.js","sourcesContent":["/*! okanjo-metrics.js v1.3.0 | (c) 2013 Okanjo Partners Inc | https://okanjo.com/ */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.okanjo = factory();\n  }\n}(this, function() {\n\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar okanjo = function (window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    var SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    var CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    var AGENT = window.navigator.userAgent;\n    var ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    var MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    var NOOP = function NOOP() {};\n    var Console = window.console;\n\n    // Place to pull defaults, if already set\n    var settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    var okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"1.3.0\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: function report() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var err = args.find(function (arg) {\n                return arg instanceof Error;\n            });\n            if (!err) {\n                var messageIndex = args.findIndex(function (arg) {\n                    return typeof arg === \"string\";\n                });\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                var stack = new Error().stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter(function (a) {\n                    return a !== err;\n                });\n            }\n\n            Console.error(\"[Okanjo v\" + okanjo.version + \"]: \" + err.stack);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: function warn(message) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n            }\n\n            var err = new Error(message);\n\n            Console.warn(\"[Okanjo v\" + okanjo.version + \"]: \" + err.stack);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: function qwery(selector, parent) {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: function getRoute(route, params, env) {\n            if (params) {\n                Object.keys(params).forEach(function (key) {\n                    route = route.replace(\":\" + key, params[key] + \"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: function isEmpty(val) {\n            return val === null || val === undefined || typeof val === \"string\" && val.trim().length === 0;\n        },\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: function isMobile() {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: function getPageArguments(includeHashArguments) {\n\n            var split = function split(query) {\n                query = query || \"\";\n                var params = {};\n                var parts = query.split('&');\n                parts.forEach(function (part) {\n                    var eqIndex = part.indexOf('=');\n                    var key = void 0,\n                        value = void 0;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            var queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            var hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach(function (key) {\n                return queryArgs[key] = hashArgs[key];\n            });\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = function (mixed, out) {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map(function (val) {\n                return okanjo.util.deepClone(val);\n            }));\n        } else if ((typeof mixed === \"undefined\" ? \"undefined\" : _typeof(mixed)) === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach(function (key) {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = function (input) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var output = {};\n\n        if (input !== undefined && input !== null) {\n            Object.keys(input).forEach(function (key) {\n                // Convert object ids to hex strings\n                if (input[key] instanceof Date) {\n                    if (options.dateToIso) {\n                        output[key] = input[key].toISOString(); // convert to iso\n                    } else {\n                        output[key] = input[key]; // as-is\n                    }\n                } else if (_typeof(input[key]) === 'object' && input[key] !== null) {\n                    // Allow ignoring arrays if desired\n                    if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                        output[key] = input[key];\n                    } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                        output[key] = input[key].join(',');\n                    } else {\n                        // Make child objects flat too (always returns object so Object.keys is safe)\n                        var childObject = okanjo.util.flatten(input[key], options);\n                        Object.keys(childObject).forEach(function (childKey) {\n                            output[key + '_' + childKey] = childObject[childKey];\n                        });\n                    }\n                } else {\n                    // Copy value references\n                    output[key] = input[key];\n                }\n            });\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = function (clusterWorkerId) {\n\n        var shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n            crypto = window.crypto || window.msCrypto || typeof require === \"function\" && require('crypto'),\n            randomByte = function randomByte() {\n            /* istanbul ignore next: platform diffs out of scope */\n            if (crypto && crypto.randomBytes) {\n                return crypto.randomBytes(1)[0] & 0x30;\n            } else if (!crypto || !crypto.getRandomValues) {\n                return Math.floor(Math.random() * 256) & 0x30;\n            }\n            /* istanbul ignore next: platform diffs out of scope */\n            var dest = new Uint8Array(1);\n            /* istanbul ignore next: platform diffs out of scope */\n            crypto.getRandomValues(dest);\n            /* istanbul ignore next: platform diffs out of scope */\n            return dest[0] & 0x30;\n        },\n            encode = function encode(number) {\n            var loopCounter = 0,\n                done = void 0,\n                str = '';\n\n            while (!done) {\n                str = str + shuffled[number >> 4 * loopCounter & 0x0f | randomByte()];\n                done = number < Math.pow(16, loopCounter + 1);\n                loopCounter++;\n            }\n            return str;\n        },\n\n\n        // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n        // This number should be updated every year or so to keep the generated id short.\n        // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n        REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        var counter = void 0,\n            previousSeconds = void 0;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function () {\n            var str = '',\n                seconds = Math.floor((new Date().getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    }();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: function getScrollPosition() {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: function getElementSize(element, includeMargin) {\n            var size = {\n                height: element.offsetHeight,\n                width: element.offsetWidth\n            };\n            var style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: function getPageSize() {\n            var body = document.querySelector('body');\n            var html = document.documentElement;\n\n            return {\n                w: Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth),\n\n                h: Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight)\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: function getViewportSize() {\n            var element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */ : document.body;\n            var width = element.clientWidth;\n            var height = element.clientHeight;\n            var inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            var inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            var isMobileZoom = inWidth && width > inWidth || inHeight && height > inHeight;\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: function getEventPosition(event) {\n            var ex = event.pageX;\n            var ey = event.pageY;\n            var body = document.body;\n            var el = document.documentElement;\n            var scrollLeft = 'scrollLeft';\n            var scrollTop = 'scrollTop';\n            var type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: function getElementPosition(element) {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            var err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                var rect = element.getBoundingClientRect();\n                var pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    x1: rect.left + pos.x,\n                    y1: rect.top + pos.y,\n                    x2: rect.right + pos.x,\n                    y2: rect.bottom + pos.y\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element: element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: function _getIntersection(e, s, v) {\n            var iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x + v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y + v.vh),\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea: intersectionArea,\n                elementArea: elementArea\n            };\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: function getPercentageInViewport(element) {\n            var e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n\n            var _okanjo$ui$_getInters = okanjo.ui._getIntersection(e, s, v),\n                intersectionArea = _okanjo$ui$_getInters.intersectionArea,\n                elementArea = _okanjo$ui$_getInters.elementArea;\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n\n\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function (element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        var parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        var text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000,\n            // Safety switch to bust out of the loop in the event something goes terribly wrong\n        replacer = function replacer(match) {\n            /* istanbul ignore next: n/a to jsdom */\n            replacedText = match.substr(0, match.length - 3) + replacedText;\n            /* istanbul ignore next: n/a to jsdom */\n            return '...';\n        };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && safety-- > 0) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            var content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class', 'okanjo-ellipses');\n            span.setAttribute('class', 'okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length - 3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length - 3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n}(window, document);\n\"use strict\";\n\n(function (window) {\n\n    var JSON_TEST = /^application\\/json/;\n    var okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        var req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        var calledBack = false;\n\n        // Normalized done handler\n        var done = function done(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function (e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function (e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    var res = void 0;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    var encode = function encode(val) {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent('' + val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    var getKey = function getKey(key, keyPrefix) {\n        if (keyPrefix) {\n            return keyPrefix + \"[\" + encode(key) + \"]\";\n        } else {\n            return encode(key);\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = function (obj, keyPrefix) {\n        var pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (v) {\n                    return pairs.push(getKey(key, keyPrefix) + '=' + encode(v));\n                }); // Does not do that PHP garbage with key[]=val\n            } else if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\" && value !== null) {\n                // Recurse\n                var res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n})(window);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function (window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: function set(cookieName, value, expireDays) {\n            var expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            var expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            var path = \" Path=/\";\n            var cookieValue = encodeURI(value) + \";\" + expires + path;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: function get(cookieName) {\n            var output = null;\n            document.cookie.split(\";\").find(function (cookie) {\n                var nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                var value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                if (nameTest === cookieName) {\n                    output = decodeURI(value);\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            return output;\n        }\n    };\n})(window, document);\n\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function (window, document) {\n\n    var okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n\n    var Metrics = function () {\n\n        //noinspection JSUnusedGlobalSymbols\n        function Metrics() {\n            _classCallCheck(this, Metrics);\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n\n\n        _createClass(Metrics, [{\n            key: \"_getStoredQueue\",\n            value: function _getStoredQueue() {\n                if (window.localStorage[Metrics.Params.queue]) {\n                    try {\n                        var queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                        if (Array.isArray(queue)) {\n                            return queue;\n                        } else {\n                            okanjo.report('Stored queue is not a queue', { queue: queue });\n                            return [];\n                        }\n                    } catch (e) {\n                        okanjo.report('Failed to load metric queue from storage', { err: e });\n                        return [];\n                    }\n                } else {\n                    // not stored\n                    return [];\n                }\n            }\n\n            /**\n             * Updates the queue stored in storage, in the event we can't complete our submissions\n             * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n             * @private\n             */\n\n        }, {\n            key: \"_saveQueue\",\n            value: function _saveQueue(delay) {\n                var _this = this;\n\n                if (delay) {\n                    if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                    this._saveQueueTimeout = setTimeout(function () {\n                        _this._saveQueue(false);\n                        _this._saveQueueTimeout = null;\n                    }, 100);\n                } else {\n                    window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n                }\n            }\n\n            /**\n             * Extract contextual pass-through data from the URL, if present\n             * @private\n             */\n\n        }, {\n            key: \"_checkUrlForReferral\",\n            value: function _checkUrlForReferral() {\n                var pageArgs = okanjo.util.getPageArguments(true),\n                    urlSid = pageArgs[Metrics.Params.name],\n                    localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name),\n                    // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                    sourceChannel = pageArgs[Metrics.Params.channel];\n\n                // If for some reason, both are set, record the incident as a possible correlation\n                if (urlSid && localSid && urlSid !== localSid) {\n                    this.trackEvent({\n                        object_type: Metrics.Object.metric_session,\n                        event_type: Metrics.Event.correlation,\n                        id: urlSid + \"_\" + localSid,\n                        ch: this.defaultChannel,\n                        _noProcess: true\n                    });\n                }\n\n                // Update local values\n                this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n                this.sourceCh = sourceChannel || null;\n                this.sourceCx = sourceContext || null;\n            }\n\n            /**\n             * Submits an individual event metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: \"trackEvent\",\n            value: function trackEvent(event, callback) {\n                // Ensure the event contains the required fields\n                if (!event.object_type || !event.event_type) {\n                    okanjo.report('Invalid metric to track (missing object_type or event_type)', { event: event });\n                    return;\n                }\n\n                // Queue the event for publishing\n                this._push(event, callback);\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Submits a page view metric\n             * @param event\n             * @param callback\n             */\n\n        }, {\n            key: \"trackPageView\",\n            value: function trackPageView(event, callback) {\n                event = event || {};\n                event.object_type = Metrics.Object.page;\n                event.event_type = Metrics.Event.view;\n                event.id = event.id || window.location.href;\n                event.ch = event.ch || this.defaultChannel;\n\n                // Queue the event for publishing\n                this.trackEvent(event, callback);\n            }\n\n            /**\n             * Adds an event to the queue\n             * @param event\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_push\",\n            value: function _push(event, callback) {\n                this._queue.push({ event: event, callback: callback });\n\n                // Save the queue\n                this._saveQueue(true);\n\n                // Start burning down the queue, unless the event says not to\n                if (event._noProcess) {\n                    delete event._noProcess;\n                } else {\n                    this._processQueue();\n                }\n            }\n\n            /**\n             * Burn down the queue\n             * @private\n             */\n\n        }, {\n            key: \"_processQueue\",\n            value: function _processQueue() {\n                var _this2 = this;\n\n                // If the queue is not already being processed, and there's stuff to process, continue sending them\n                if (!this._processTimeout && this._queue.length > 0) {\n                    this._processTimeout = setTimeout(function () {\n\n                        // Pull the items we're going to batch out of the queue\n                        var items = _this2._queue.splice(0, 255);\n                        _this2._saveQueue(false);\n\n                        // Track the item\n                        _this2._batchSend(items, function (err, res) {\n                            // TODO: If there was an error, consider splicing the batch back into the queue\n\n                            // Update / Set the metric sid on the publisher\n                            /* istanbul ignore else: server barks */\n                            if (res && res.data && res.data.sid) _this2._updateSid(res.data.sid);\n\n                            // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                            _this2._processTimeout = null;\n                            _this2._processQueue();\n\n                            // Fire the event callbacks if there are any\n                            items.forEach(function (item) {\n                                item.callback && item.callback(err, res);\n                            });\n                        });\n                    }, 0); // break event loop, maybe\n                }\n            }\n\n            /**\n             * Sends a bunch of queued metric events\n             * @param items\n             * @param callback\n             * @private\n             */\n\n        }, {\n            key: \"_batchSend\",\n            value: function _batchSend(items, callback) {\n                var _this3 = this;\n\n                // Normalize event data\n                var events = items.map(function (item) {\n                    _this3._normalizeEvent(item.event);\n\n                    // Strip duplicated data from event batch\n                    delete item.event.sid;\n                    delete item.event.win;\n\n                    return item.event;\n                });\n\n                var payload = {\n                    events: events,\n                    win: window.location.href\n                };\n\n                var route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n                // Set sid if present\n                if (this.sid) {\n                    payload.sid = this.sid;\n                }\n\n                // Send it\n                okanjo.net.request.post(route, payload, function (err, res) {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err: err, res: res, items: items, route: route });\n                    }\n                    callback && callback(err, res);\n                });\n            }\n\n            /**\n             * Normaizes events so that they contain consistent data values\n             * @param event\n             * @private\n             */\n\n        }, {\n            key: \"_normalizeEvent\",\n            value: function _normalizeEvent(event) {\n\n                // Ensure meta is ready to receive values\n                event.m = event.m || {};\n\n                // Set key\n                event.key = event.key || event.m.key || okanjo.key || undefined;\n\n                // Set session\n                if (this.sid) event.sid = this.sid;\n\n                // Clone the metadata, since it might be a direct reference to a widget property\n                // Deleting properties on the meta object could be very destructive\n                event.m = Object.assign({}, event.m); // event.m should be flat\n\n                // Strip meta keys that should be excluded\n                Object.keys(Metrics.Meta.exclude).forEach(function (key) {\n                    return delete event.m[key];\n                });\n\n                // Set referral channel / context\n                if (this.sourceCh) {\n                    event.m.ref_ch = this.sourceCh;\n                }\n                if (this.sourceCx) {\n                    event.m.ref_cx = this.sourceCx;\n                }\n\n                // Set page group id\n                event.m.pgid = this.pageId;\n\n                // Set okanjo version\n                event.m.ok_ver = okanjo.version;\n\n                // Finalize metadata\n                event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n                // Ensure metadata strings won't exceed the imposed limit\n                Object.keys(event.m).forEach(function (key) {\n                    if (typeof event.m[key] === \"string\") {\n                        event.m[key] = event.m[key].substr(0, 255);\n                    }\n                });\n\n                // Set page source reference\n                if (document.referrer) {\n                    event.ref = document.referrer;\n                }\n\n                // Set the window location\n                event.win = window.location.href;\n            }\n\n            /**\n             * Updates the stored session identifier\n             * @param sid\n             * @private\n             */\n\n        }, {\n            key: \"_updateSid\",\n            value: function _updateSid(sid) {\n                if (!this.sid && sid) {\n                    this.sid = sid;\n                    window.localStorage[Metrics.Params.name] = sid;\n                    okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n                }\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"create\",\n\n\n            //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n            /**\n             * Helper to create a new fluent event structure\n             * @param args\n             * @return {*}\n             */\n            value: function create() {\n                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                    args[_key3] = arguments[_key3];\n                }\n\n                return Metrics.create.apply(null, args);\n            }\n        }], [{\n            key: \"addElementInfo\",\n            value: function addElementInfo(element, event) {\n                var page = okanjo.ui.getPageSize(),\n                    size = okanjo.ui.getElementPosition(element);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.pw = page.w;\n                event.m.ph = page.h;\n                event.m.x1 = size.x1;\n                event.m.y1 = size.y1;\n                event.m.x2 = size.x2;\n                event.m.y2 = size.y2;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addViewportInfo\",\n            value: function addViewportInfo(event) {\n                var vp = okanjo.ui.getViewportSize(),\n                    pos = okanjo.ui.getScrollPosition();\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.vx1 = pos.x;\n                event.m.vy1 = pos.y;\n                event.m.vx2 = pos.x + vp.vw;\n                event.m.vy2 = pos.y + vp.vh;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @param event\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addEventInfo\",\n            value: function addEventInfo(jsEvent, event) {\n                var pos = okanjo.ui.getEventPosition(jsEvent);\n\n                event = event || {};\n                event.m = event.m || {};\n                event.m.et = pos.et;\n                event.m.ex = pos.ex;\n                event.m.ey = pos.ey;\n\n                return event;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param event\n             * @param args\n             * @return {*|{}}\n             */\n\n        }, {\n            key: \"addEventMeta\",\n            value: function addEventMeta(event) {\n                event = event || {};\n                event.m = event.m || {};\n\n                for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                    args[_key4 - 1] = arguments[_key4];\n                }\n\n                event.m = Object.assign.apply(Object, [event.m].concat(args));\n\n                return event;\n            }\n\n            /**\n             * Helper to create a new fluent event structure\n             * @param data\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"create\",\n            value: function create(data) {\n                for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                    args[_key5 - 1] = arguments[_key5];\n                }\n\n                // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n                return new MetricEvent(data, args);\n            }\n        }]);\n\n        return Metrics;\n    }();\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n\n\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key', 'callback', 'metrics_channel_context', 'metrics_context', 'mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n\n    var MetricEvent = function () {\n        function MetricEvent(data, others) {\n            var _this4 = this;\n\n            _classCallCheck(this, MetricEvent);\n\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach(function (data) {\n                    _this4.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n\n\n        _createClass(MetricEvent, [{\n            key: \"data\",\n            value: function data(_data) {\n                Object.assign(this, okanjo.util.deepClone(_data));\n                return this;\n            }\n\n            /**\n             * Adds DOM event positional data to the event\n             * @param jsEvent\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"event\",\n            value: function event(jsEvent) {\n                Metrics.addEventInfo(jsEvent, this);\n                return this;\n            }\n\n            /**\n             * Adds viewport dimensions / positional data to the event\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"viewport\",\n            value: function viewport() {\n                Metrics.addViewportInfo(this);\n                return this;\n            }\n\n            /**\n             * Adds DOM element dimensions / positional data to the event\n             * @param element\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"element\",\n            value: function element(_element) {\n                Metrics.addElementInfo(_element, this);\n                return this;\n            }\n\n            //noinspection JSUnusedGlobalSymbols\n            /**\n             * Adds meta data values to the event\n             * @param args\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"meta\",\n            value: function meta() {\n                for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                    args[_key6] = arguments[_key6];\n                }\n\n                Metrics.addEventMeta.apply(null, [this].concat(args));\n                return this;\n            }\n\n            /**\n             * Sets the object and event type on the event w/o having to use .data\n             * @param object_type\n             * @param event_type\n             * @return {MetricEvent}\n             */\n\n        }, {\n            key: \"type\",\n            value: function type(object_type, event_type) {\n                this.object_type = object_type;\n                this.event_type = event_type;\n                return this;\n            }\n\n            /**\n             * Finalizes and sends the event\n             * @param callback\n             */\n\n        }, {\n            key: \"send\",\n            value: function send(callback) {\n                okanjo.metrics.trackEvent(this, callback);\n                // DONT RETURN - BREAK THE CHAIN HERE\n            }\n\n            /**\n             * Gets the single-metric tracking url for this event\n             * @return {string}\n             */\n\n        }, {\n            key: \"toUrl\",\n            value: function toUrl() {\n                // Copy data w/o modifying it\n                var event = Object.assign({}, this);\n\n                // Extract params\n                var object_type = event.object_type,\n                    event_type = event.event_type;\n\n                delete event.object_type;\n                delete event.event_type;\n\n                // Normalize event data\n                okanjo.metrics._normalizeEvent(event);\n\n                // Get the URL\n                return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type: object_type, event_type: event_type }) + '?' + okanjo.net.request.stringify(event);\n            }\n        }]);\n\n        return MetricEvent;\n    }();\n\n    // Export / initialize\n\n\n    okanjo.metrics = new Metrics();\n})(window, document);\n/* jshint ignore:start */\n\n(function () {\n\n    /*! onDomReady.js 1.4.0 (c) 2013 Tubal Martin - MIT license | Wrapped in UMD by Okanjo */\n    (function (root, factory) {\n        if (typeof define === 'function' && define.amd) {\n            define([], factory);\n        } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') {\n            module.exports = factory();\n        } else {\n            root.onDomReady = factory();\n        }\n    })(this, function () {\n\n        'use strict';\n\n        var win = window,\n            doc = win.document,\n            docElem = doc.documentElement,\n            LOAD = \"load\",\n            FALSE = false,\n            ONLOAD = \"on\" + LOAD,\n            COMPLETE = \"complete\",\n            READYSTATE = \"readyState\",\n            ATTACHEVENT = \"attachEvent\",\n            DETACHEVENT = \"detachEvent\",\n            ADDEVENTLISTENER = \"addEventListener\",\n            DOMCONTENTLOADED = \"DOMContentLoaded\",\n            ONREADYSTATECHANGE = \"onreadystatechange\",\n            REMOVEEVENTLISTENER = \"removeEventListener\",\n\n\n        // W3C Event model\n        w3c = ADDEVENTLISTENER in doc,\n            top = FALSE,\n\n\n        // isReady: Is the DOM ready to be used? Set to true once it occurs.\n        isReady = FALSE,\n\n\n        // Callbacks pending execution until DOM is ready\n        callbacks = [];\n\n        // Handle when the DOM is ready\n        function ready(fn) {\n            if (!isReady) {\n\n                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                if (!doc.body) {\n                    return defer(ready);\n                }\n\n                // Remember that the DOM is ready\n                isReady = true;\n\n                // Execute all callbacks\n                while (fn = callbacks.shift()) {\n                    defer(fn);\n                }\n            }\n        }\n\n        // The ready event handler\n        function completed(event) {\n            // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n            if (w3c || event.type === LOAD || doc[READYSTATE] === COMPLETE) {\n                detach();\n                ready();\n            }\n        }\n\n        // Clean-up method for dom ready events\n        function detach() {\n            if (w3c) {\n                doc[REMOVEEVENTLISTENER](DOMCONTENTLOADED, completed, FALSE);\n                win[REMOVEEVENTLISTENER](LOAD, completed, FALSE);\n            } else {\n                doc[DETACHEVENT](ONREADYSTATECHANGE, completed);\n                win[DETACHEVENT](ONLOAD, completed);\n            }\n        }\n\n        // Defers a function, scheduling it to run after the current call stack has cleared.\n        function defer(fn, wait) {\n            // Allow 0 to be passed\n            setTimeout(fn, +wait >= 0 ? wait : 1);\n        }\n\n        // Attach the listeners:\n\n        // Catch cases where onDomReady is called after the browser event has already occurred.\n        // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n        if (doc[READYSTATE] === COMPLETE) {\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\n            defer(ready);\n\n            // Standards-based browsers support DOMContentLoaded\n        } else if (w3c) {\n            // Use the handy event callback\n            doc[ADDEVENTLISTENER](DOMCONTENTLOADED, completed, FALSE);\n\n            // A fallback to window.onload, that will always work\n            win[ADDEVENTLISTENER](LOAD, completed, FALSE);\n\n            // If IE event model is used\n        } else {\n            // Ensure firing before onload, maybe late but safe also for iframes\n            doc[ATTACHEVENT](ONREADYSTATECHANGE, completed);\n\n            // A fallback to window.onload, that will always work\n            win[ATTACHEVENT](ONLOAD, completed);\n\n            // If IE and not a frame\n            // continually check to see if the document is ready\n            try {\n                top = win.frameElement == null && docElem;\n            } catch (e) {}\n\n            if (top && top.doScroll) {\n                (function doScrollCheck() {\n                    if (!isReady) {\n                        try {\n                            // Use the trick by Diego Perini\n                            // http://javascript.nwbox.com/IEContentLoaded/\n                            top.doScroll(\"left\");\n                        } catch (e) {\n                            return defer(doScrollCheck, 50);\n                        }\n\n                        // detach all dom ready events\n                        detach();\n\n                        // and execute any waiting functions\n                        ready();\n                    }\n                })();\n            }\n        }\n\n        function onDomReady(fn) {\n            // If DOM is ready, execute the function (async), otherwise wait\n            isReady ? defer(fn) : callbacks.push(fn);\n        }\n\n        // Add version\n        onDomReady.version = \"1.4.0\";\n        // Add method to check if DOM is ready\n        onDomReady.isReady = function () {\n            return isReady;\n        };\n\n        return onDomReady;\n    });\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */\nreturn okanjo;\n}));\n","\"use strict\";\n\n/* exported okanjo */\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n/**\n * Okanjo widget framework namespace\n * @global okanjo\n */\nconst okanjo = (function(window, document) {\n\n    //region Constants\n\n    // Environment Vars\n    const SUPPORTS_PAGE_OFFSET = window.pageXOffset !== undefined;\n    const CSS1_COMPATIBLE = (document.compatMode /* istanbul ignore next: out of scope */ || \"\") === \"CSS1Compat\";\n    const AGENT = window.navigator.userAgent;\n    const ELLIPSIFY_PATTERN = /[\\s\\S](?:\\.\\.\\.)?$/;\n    const MOBILE_PATTERN = /(iPhone|iPad|iPod|Android|blackberry)/i;\n    const NOOP = () => {};\n    const Console = window.console;\n\n    // Place to pull defaults, if already set\n    const settings = window.okanjo || {};\n\n    //endregion\n\n    //region Okanjo Core\n\n\n    //noinspection JSValidateJSDoc,JSClosureCompilerSyntax - idk phpStorm generated it so why would it be wrong? :P\n    /**\n     * Okanjo namespace\n     * @global\n     * @type {{version: string, metrics: null, key: null, report: ((...p1?:*[])), warn: ((p1?:*, ...p2?:*[])), qwery: ((p1?:*, p2?:*))}}\n     */\n    const okanjo = {\n\n        /**\n         * Okanjo version\n         */\n        version: \"%%OKANJO_VERSION\",\n\n        /**\n         * Placeholder\n         */\n        metrics: null,\n\n        /**\n         * Global/default placement key\n         */\n        key: settings.key || null,\n\n        /**\n         * Reports an error to the console and possibly Raven in the future\n         * @param args\n         */\n        report: (...args) => {\n            let err = args.find((arg) => arg instanceof Error);\n            if (!err) {\n                let messageIndex = args.findIndex((arg) => typeof arg === \"string\");\n                err = new Error(args[messageIndex] || \"Okanjo Error\");\n                if (messageIndex >= 0) args.splice(messageIndex, 1);\n            } else {\n                // Grow our own stack so we can figure out what async thing did it\n                let stack = (new Error()).stack.split('\\n');\n                stack.shift();\n                stack.shift();\n                args.push({ reportStack: stack.join('\\n') });\n                args = args.filter((a) => a !== err);\n            }\n\n            Console.error(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.error.apply(Console, ['Additional information:'].concat(args));\n\n            // TODO - integrate with Raven\n        },\n\n        /**\n         * Warn developers of their misdeeds\n         * @param message\n         * @param args\n         */\n        warn: (message, ...args) => {\n            const err = new Error(message);\n\n            Console.warn(`[Okanjo v${okanjo.version}]: ${err.stack}`);\n            args.length && Console.warn.apply(Console, ['Additional information:'].concat(args));\n        },\n\n        // Backwards compatibility when we shipped with qwery, cuz querySelector[All] wasn't mainstream enough\n        qwery: (selector, parent) => {\n\n            // If parent is a selector, select the parent first!\n            if (typeof parent === \"string\") {\n                parent = document.querySelector(parent);\n\n                // If parent is not found, there are obviously no results\n                if (!parent) return [];\n            }\n\n            if (!parent) parent = document;\n\n            return parent.querySelectorAll(selector);\n        }\n    };\n\n    //endregion\n\n    //region Vendor Libs\n\n    /**\n     * Placeholder for where vendor libraries get no-conflict loaded\n     * @type {{}}\n     */\n    okanjo.lib = {};\n\n    //endregion\n\n    //region Networking\n\n    /**\n     * Networking methods\n     * @type {{getRoute: *, exec: *}}\n     */\n    okanjo.net = {\n\n        /**\n         * API Endpoints\n         */\n        endpoint: 'https://api2.okanjo.com',\n        sandboxEndpoint: 'https://sandbox-api2.okanjo.com',\n\n        /**\n         * API routes\n         */\n        routes: {\n            ads: '/content',\n            metrics: '/metrics/:object_type/:event_type',\n            metrics_batch: '/metrics'\n        },\n\n        /**\n         * Compiles a route and parameters into a final URL\n         * @param {string} route - Route constant\n         * @param {*} [params] - Key value hash\n         * @param {*} [env] - Optional environment to use instead of live\n         * @return {string} - Route\n         */\n        getRoute: (route, params, env) => {\n            if (params) {\n                Object.keys(params).forEach((key) => {\n                    route = route.replace(`:${key}`, params[key]+\"\");\n                });\n            }\n            env = env || okanjo.env || 'live';\n            return (env === 'sandbox' ? okanjo.net.sandboxEndpoint : okanjo.net.endpoint) + route;\n        },\n\n        // placeholder, xhr request extension\n        request: NOOP\n    };\n\n    //endregion\n\n    // region Utilities\n\n    //noinspection JSClosureCompilerSyntax,JSValidateJSDoc\n    /**\n     * Utility functions and helpers\n     * @type {{isEmpty: ((p1?:*)=>boolean), isMobile: (()), getPageArguments: ((p1:boolean))}}\n     */\n    okanjo.util = {\n\n        /**\n         * Checks whether a value is _really_ empty (trims)\n         * @param val\n         * @return {boolean}\n         */\n        isEmpty: (val) => val === null || val === undefined || (typeof val === \"string\" && val.trim().length === 0),\n\n        /**\n         * Checks if the current user agent identifies as a mobile device\n         * @returns {boolean}\n         */\n        isMobile: () => {\n            // KludgyAF™, but let's go with it\n            return MOBILE_PATTERN.test(AGENT);\n        },\n\n        /**\n         * Returns an object hashmap of query and hash parameters\n         * @param {boolean} includeHashArguments - Whether to include the hash arguments, if any\n         * @return {*}\n         */\n        getPageArguments: (includeHashArguments) => {\n\n            const split = (query) => {\n                query = query || \"\";\n                const params = {};\n                const parts = query.split('&');\n                parts.forEach((part) => {\n                    const eqIndex = part.indexOf('=');\n                    let key, value;\n                    if (eqIndex < 0) {\n                        key = decodeURIComponent(part);\n                        value = null;\n                    } else {\n                        key = decodeURIComponent(part.substring(0, eqIndex));\n                        value = decodeURIComponent(part.substring(eqIndex + 1));\n                    }\n                    if (key) params[key] = value;\n                });\n                return params;\n            };\n\n            const queryArgs = split(window.location.search.substring(window.location.search.indexOf('?') + 1));\n            const hashArgs = includeHashArguments ? split(window.location.hash.substring(Math.max(window.location.hash.indexOf('#') + 1, window.location.hash.indexOf('#!') + 2))) : {};\n            Object.keys(hashArgs).forEach((key) => queryArgs[key] = hashArgs[key]);\n\n            return queryArgs;\n        }\n\n    };\n\n    /**\n     * Deep clones an object by breaking references, unlike Object.assign\n     * @param mixed – Source to clone (object, array, value)\n     * @param [out] - Existing output, if any\n     * @return {*}\n     */\n    okanjo.util.deepClone = (mixed, out) => {\n        if (Array.isArray(mixed)) {\n            // Array reference\n            out = out || [];\n            out = out.concat(mixed.map((val) => okanjo.util.deepClone(val)));\n        } else if (typeof mixed === \"object\" && mixed !== null) {\n            // Object reference\n            out = out || {};\n            Object.keys(mixed).forEach((key) => {\n                out[key] = okanjo.util.deepClone(mixed[key]);\n            });\n        } else {\n            // Value\n            out = mixed;\n        }\n\n        return out;\n    };\n\n    /**\n     * Flattens a multi-dimensional object into a single object\n     * @param input\n     * @param [options]\n     * @return {{}}\n     */\n    okanjo.util.flatten = (input, options = {}) => {\n        const output = {};\n\n        if (input !== undefined && input !== null) {\n            Object\n                .keys(input)\n                .forEach((key) => {\n                    // Convert object ids to hex strings\n                    if (input[key] instanceof Date) {\n                        if (options.dateToIso) {\n                            output[key] = input[key].toISOString(); // convert to iso\n                        } else {\n                            output[key] = input[key]; // as-is\n                        }\n                    } else if (typeof input[key] === 'object' && input[key] !== null) {\n                        // Allow ignoring arrays if desired\n                        if (Array.isArray(input[key]) && options.ignoreArrays === true) {\n                            output[key] = input[key];\n                        } else if (Array.isArray(input[key]) && options.arrayToCsv === true) {\n                            output[key] = input[key].join(',');\n                        } else {\n                            // Make child objects flat too (always returns object so Object.keys is safe)\n                            const childObject = okanjo.util.flatten(input[key], options);\n                            Object\n                                .keys(childObject)\n                                .forEach((childKey) => {\n                                    output[key + '_' + childKey] = childObject[childKey];\n                                })\n                            ;\n                        }\n                    } else {\n                        // Copy value references\n                        output[key] = input[key];\n                    }\n                })\n            ;\n        }\n\n        return output;\n    };\n\n    /*! based on shortid https://github.com/dylang/shortid */\n    okanjo.util.shortid = (function(clusterWorkerId) {\n\n        const shuffled = 'ylZM7VHLvOFcohp01x-fXNr8P_tqin6RkgWGm4SIDdK5s2TAJebzQEBUwuY9j3aC',\n\n            crypto = window.crypto || window.msCrypto || (typeof require === \"function\" && require('crypto')),\n\n            randomByte = () => {\n                /* istanbul ignore next: platform diffs out of scope */\n                if (crypto && crypto.randomBytes) {\n                    return crypto.randomBytes(1)[0] & 0x30;\n                } else if (!crypto || !crypto.getRandomValues) {\n                    return Math.floor(Math.random() * 256) & 0x30;\n                }\n                /* istanbul ignore next: platform diffs out of scope */\n                const dest = new Uint8Array(1);\n                /* istanbul ignore next: platform diffs out of scope */\n                crypto.getRandomValues(dest);\n                /* istanbul ignore next: platform diffs out of scope */\n                return dest[0] & 0x30;\n            },\n\n            encode = (number) => {\n                let loopCounter = 0,\n                    done,\n                    str = '';\n\n                while (!done) {\n                    str = str + shuffled[ ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() ];\n                    done = number < (Math.pow(16, loopCounter + 1 ) );\n                    loopCounter++;\n                }\n                return str;\n            },\n\n            // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n            // This number should be updated every year or so to keep the generated id short.\n            // To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\n            REDUCE_TIME = 1490384907498,\n            version = 7;\n\n        let counter,\n            previousSeconds;\n\n        clusterWorkerId = clusterWorkerId || 0;\n\n        return function() {\n            let str = '',\n                seconds = Math.floor(((new Date()).getTime() - REDUCE_TIME) * 0.001);\n\n            if (seconds === previousSeconds) {\n                counter++;\n            } else {\n                counter = 0;\n                previousSeconds = seconds;\n            }\n\n            str = str + encode(version) + encode(clusterWorkerId);\n            if (counter > 0) {\n                str = str + encode(counter);\n            }\n            str = str + encode(seconds);\n\n            return str;\n        };\n    })();\n\n    //endregion\n\n    //region User Interface\n\n    okanjo.ui = {\n\n        /**\n         * Gets the current page scroll position\n         * @returns {{x: Number, y: Number}}\n         */\n        getScrollPosition: () => {\n            return {\n                x: SUPPORTS_PAGE_OFFSET ? window.pageXOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollLeft : document.body.scrollLeft,\n                y: SUPPORTS_PAGE_OFFSET ? window.pageYOffset : /* istanbul ignore next: old browsers */ CSS1_COMPATIBLE ? document.documentElement.scrollTop : document.body.scrollTop\n            };\n        },\n\n        /**\n         * Gets the height and width of the given element\n         * @param {HTMLElement|Node} element – The DOM element to get the size of\n         * @param {boolean} [includeMargin] – Whether to include the margins of the element in the size\n         * @returns {{height: number, width: number}}\n         */\n        getElementSize: (element, includeMargin) => {\n            const size = {\n                height: element.offsetHeight,\n                width : element.offsetWidth\n            };\n            const style = element.currentStyle || window.getComputedStyle(element);\n\n            if (includeMargin) {\n                size.height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n                size.width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n            }\n\n            return size;\n        },\n\n        /**\n         * Gets the current page size\n         * @return {{w: number, h: number}}\n         */\n        getPageSize: () => {\n            const body = document.querySelector('body');\n            const html = document.documentElement;\n\n            return {\n                w: Math.max(\n                    body.scrollWidth,\n                    body.offsetWidth,\n                    html.clientWidth,\n                    html.scrollWidth,\n                    html.offsetWidth\n                ),\n\n                h: Math.max(\n                    body.scrollHeight,\n                    body.offsetHeight,\n                    html.clientHeight,\n                    html.scrollHeight,\n                    html.offsetHeight\n                )\n            };\n        },\n\n        /**\n         * Gets the current viewport size\n         * @return {{vw: number, vh: number}}\n         */\n        getViewportSize: () => {\n            const element = CSS1_COMPATIBLE ? document.documentElement /* istanbul ignore next: browser diffs */: document.body;\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const inWidth = window.innerWidth /* istanbul ignore next: browser diffs */ || 0;\n            const inHeight = window.innerHeight /* istanbul ignore next: browser diffs */ || 0;\n            const isMobileZoom = (inWidth && width > inWidth) || (inHeight && height > inHeight);\n\n            return {\n                vw: isMobileZoom /* istanbul ignore next: browser diffs */ ? inWidth : width,\n                vh: isMobileZoom /* istanbul ignore next: browser diffs */ ? inHeight : height\n            };\n        },\n\n        /**\n         * Gets the x, y location of the event relative to the page\n         * @param event – Mouse/Touch Event\n         * @return {{ex: number, ey: number}}\n         */\n        getEventPosition: (event) => {\n            const ex = event.pageX;\n            const ey = event.pageY;\n            const body = document.body;\n            const el = document.documentElement;\n            const scrollLeft = 'scrollLeft';\n            const scrollTop = 'scrollTop';\n            const type = event.__proto__.constructor.name;\n\n            return {\n                et: type, // mouse? touch? keyboard? robot?\n                ex: ex === undefined /* istanbul ignore next: browser diffs */ ? event.clientX + body[scrollLeft] + el[scrollLeft] : ex,\n                ey: ey === undefined /* istanbul ignore next: browser diffs */ ? event.clientY + body[scrollTop] + el[scrollTop] : ey\n            };\n        },\n\n        /**\n         * Gets the element's rectangle coordinates on the page\n         * @param element\n         * @return {{x1: number, y1: number, x2: number, y2: number}}\n         */\n        getElementPosition: (element) => {\n\n            // Wrapped in try-catch because IE is super strict about the\n            // element being on the DOM before you call this. Other browsers\n            // let it slide, but oh well.\n\n            const err = 'Could not get position of element. Did you attach the element to the DOM before initializing?';\n            try {\n                let rect = element.getBoundingClientRect();\n                let pos = okanjo.ui.getScrollPosition();\n\n                /* istanbul ignore else: jsdom doesn't mock this */\n                if (!document.body.contains(element)) {\n                    okanjo.report(err, element);\n                }\n                return {\n                    x1: rect.left + pos.x,\n                    y1: rect.top + pos.y,\n                    x2: rect.right + pos.x,\n                    y2: rect.bottom + pos.y\n                };\n            } catch (e) {\n                okanjo.report(err, { exception: e, element });\n                return {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    err: 1\n                };\n            }\n        },\n\n        /**\n         * Gets the intersection information given the element, viewport and scroll positions\n         * @param e – Element position\n         * @param s - Scroll position\n         * @param v - Viewport size\n         * @return {{intersectionArea: number, elementArea: number}}\n         * @private\n         */\n        _getIntersection: (e, s, v) => {\n            let iLeft = Math.max(e.x1, s.x),\n                iRight = Math.min(e.x2, s.x+v.vw),\n                iTop = Math.max(e.y1, s.y),\n                iBottom = Math.min(e.y2, s.y+v.vh),\n\n                intersectionArea = Math.max(0, iRight - iLeft) * Math.max(0, iBottom - iTop),\n                elementArea = (e.x2 - e.x1) * (e.y2 - e.y1);\n\n            return {\n                intersectionArea,\n                elementArea\n            };\n        },\n\n        /**\n         * Gets the percentage of the element pixels currently within the viewport\n         * @param {HTMLElement|Node} element\n         * @return {number}\n         */\n        getPercentageInViewport: (element) => {\n            let e = okanjo.ui.getElementPosition(element),\n                s = okanjo.ui.getScrollPosition(),\n                v = okanjo.ui.getViewportSize();\n\n            // If there was a problem getting the element position, fail fast\n            if (e.err) return 0;\n\n            // Get intersection rectangle\n            let { intersectionArea, elementArea } = okanjo.ui._getIntersection(e,s,v);\n\n            // Don't let it return NaN\n            /* istanbul ignore else: jsdom no love positional data */\n            if (elementArea <= 0) return 0;\n\n            /* istanbul ignore next: jsdom no love positional data, area tested with helper fn tho */\n            return intersectionArea / elementArea;\n        }\n    };\n\n    /**\n     * Splits the text in the element to fit within the visible height of its container, and separates with an ellipses\n     * @param {HTMLElement|Node} element – The DOM element containing the text to fit\n     * @param {HTMLElement} [container] – Optional container to compute fit on. Defaults to the element's parent\n     */\n    okanjo.ui.ellipsify = function(element, container) {\n\n        // It's a sad day when you have to resort to JS because CSS kludges are too hacky to work down to IE8, programmatically\n\n        //noinspection JSValidateTypes\n        const parent = container || element.parentNode,\n            targetHeight = okanjo.ui.getElementSize(parent).height,\n            useTextContent = element.textContent !== undefined;\n\n        let text = useTextContent ? element.textContent /* istanbul ignore next: browser diffs */ : element.innerText,\n            replacedText = \"\",\n            safety = 5000, // Safety switch to bust out of the loop in the event something goes terribly wrong\n            replacer = (match) => {\n                /* istanbul ignore next: n/a to jsdom */\n                replacedText = match.substr(0, match.length-3) + replacedText;\n                /* istanbul ignore next: n/a to jsdom */\n                return '...';\n            };\n\n        // Trim off characters until we can fit the text and ellipses\n        // If the text already fits, this loop is ignored\n        /* istanbul ignore next: jsdom doesn't do element size computing stuff */\n        while (okanjo.ui.getElementSize(element).height > targetHeight && text.length > 0 && (safety-- > 0)) {\n            text = useTextContent ? element.textContent : element.innerText;\n\n            text = text.replace(ELLIPSIFY_PATTERN, replacer);\n\n            if (useTextContent) {\n                element.textContent = text;\n            } else {\n                element.innerText = text;\n            }\n        }\n\n        // If there is work to do, split the content into two span tags\n        // Like so: [content]...[hidden content]\n        /* istanbul ignore if: n/a to jsdom */\n        if (replacedText.length > 0) {\n\n            let content = document.createElement('span'),\n                span = document.createElement('span');\n\n            content.setAttribute('class','okanjo-ellipses');\n            span.setAttribute('class','okanjo-visually-hidden');\n\n            if (useTextContent) {\n                content.textContent = text.substr(0, text.length-3);\n                span.textContent = replacedText;\n            } else {\n                content.innerText = text.substr(0, text.length-3);\n                span.innerText = replacedText;\n            }\n\n            element.innerHTML = '';\n            element.appendChild(content);\n            element.appendChild(span);\n        }\n\n    };\n\n    //endregion\n\n    // Export the root namespace\n    return window.okanjo = okanjo;\n\n})(window, document);","\"use strict\";\n\n(function(window) {\n\n    const JSON_TEST = /^application\\/json/;\n    const okanjo = window.okanjo;\n\n    /**\n     * Performs a reliable XHR request\n     * @param {string} method - Request method\n     * @param {string} url - URL\n     * @param [payload] optional payload\n     * @param callback Fired on when completed (err, res), normalized to standard response format\n     */\n    okanjo.net.request = function (method, url, payload, callback) {\n\n        // payload is not required\n        if (typeof payload === \"function\") {\n            callback = payload;\n            payload = undefined;\n        }\n\n        // Create a new instance\n        const req = new (window.XMLHttpRequest /* istanbul ignore next: old ie */ || window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n\n        // Flag to prevent duplicate callbacks / races\n        let calledBack = false;\n\n        // Normalized done handler\n        const done = function(err, res) {\n            /* istanbul ignore else: out of scope */\n            if (!calledBack) {\n                calledBack = true;\n                callback(err, res);\n            }\n        };\n\n        // Apply timeout if configured globally\n        if (okanjo.net.request.timeout) {\n            req.timeout = okanjo.net.request.timeout;\n        }\n\n        // Catch timeout errors\n        req.ontimeout = function(e) {\n            /* istanbul ignore next: idk if jsdom can mock this, also readystatechange may fire before this anyway */\n            done({\n                statusCode: 504,\n                error: \"Request timed out\",\n                message: 'Something went wrong',\n                attributes: {\n                    event: e,\n                    xhr: req\n                }\n            });\n        };\n\n        // Handle the response\n        req.onreadystatechange = function(e) {\n            // 4 = completed / failed\n            if (req.readyState === 4) {\n                // Do we have a response?\n                if (req.status > 0) {\n                    let res;\n\n                    // Check if we got JSON and parse it right away\n                    if (JSON_TEST.test(req.getResponseHeader('Content-Type'))) {\n                        res = JSON.parse(req.responseText);\n                    } else {\n                        // Not JSON, normalize it instead\n                        res = {\n                            statusCode: req.status,\n                            data: req.responseText\n                        };\n                    }\n\n                    // Put the response in the proper slot (err for non success responses)\n                    if (req.status >= 200 && req.status < 300) {\n                        done(null, res);\n                    } else {\n                        done(res);\n                    }\n                } else {\n                    // Request failed - e.g. CORS or network issues\n                    done({\n                        statusCode: 503,\n                        error: \"Request failed\",\n                        message: 'Something went wrong',\n                        attributes: {\n                            event: e,\n                            xhr: req\n                        }\n                    });\n                }\n            }\n        };\n\n        // Open the request\n        req.open(method.toUpperCase(), url);\n\n        // Include credentials\n        req.withCredentials = true;\n\n        // Handle post payloads\n        if (['POST','PUT','PATCH'].includes(method.toUpperCase())) {\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            if (payload !== undefined) {\n                payload = JSON.stringify(payload);\n            }\n        }\n\n        // Ship it\n        req.send(payload || undefined);\n    };\n\n    // Bind helpers to make things easy as pie\n    okanjo.net.request.get = okanjo.net.request.bind(this, 'GET');\n    okanjo.net.request.post = okanjo.net.request.bind(this, 'POST');\n    okanjo.net.request.put = okanjo.net.request.bind(this, 'PUT');\n    okanjo.net.request.delete = okanjo.net.request.bind(this, 'DELETE');\n\n    /**\n     * Helper to aid in minificiation+querystringify and redundant encodeURIComponent stuff\n     * @param val\n     * @return {*}\n     */\n    const encode = (val) => {\n        if (val === null || val === undefined) return '';\n        return encodeURIComponent(''+val);\n    };\n\n    /**\n     * Helper to aid in getting a query string key using a prefix and keyname\n     * @param key\n     * @param keyPrefix\n     * @return {*}\n     */\n    const getKey = (key, keyPrefix) => {\n        if (keyPrefix) {\n            return `${keyPrefix}[${encode(key)}]`;\n        } else {\n            return encode(key)\n        }\n    };\n\n    /**\n     * Super basic querystringify helper. It handles deep objects, but not for array values\n     * @param obj\n     * @param [keyPrefix]\n     * @return {string}\n     */\n    okanjo.net.request.stringify = (obj, keyPrefix) => {\n        let pairs = [];\n        keyPrefix = keyPrefix || \"\";\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (Array.isArray(value)) {\n                value.forEach((v) => pairs.push(getKey(key, keyPrefix) + '=' + encode(v))); // Does not do that PHP garbage with key[]=val\n            } else if (typeof value === \"object\" && value !== null) {\n                // Recurse\n                let res = okanjo.net.request.stringify(value, getKey(key, keyPrefix));\n                if (res) pairs.push(res);\n            } else if (value !== undefined) {\n                pairs.push(getKey(key, keyPrefix) + '=' + encode(value));\n            }\n        });\n        return pairs.join('&');\n    };\n\n})(window);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS\n(function(window, document) {\n\n    /**\n     * Okanjo cookie utility helpers\n     */\n    window.okanjo.util.cookie = {\n\n        /**\n         * Sets a cookie\n         * @param cookieName\n         * @param value\n         * @param expireDays\n         */\n        set: (cookieName, value, expireDays) => {\n            const expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + expireDays);\n            const expires = expireDays ? \" Expires=\" + expireDate.toUTCString() + \";\" : \"\";\n            const path = \" Path=/\";\n            const cookieValue = `${encodeURI(value)};${expires}${path}`;\n            document.cookie = cookieName + \"=\" + cookieValue;\n        },\n\n        /**\n         * Gets a cookie\n         * @param cookieName\n         * @return {*}\n         */\n        get: (cookieName) => {\n            let output = null;\n            document.cookie\n                .split(\";\")\n                .find((cookie) => {\n                    let nameTest = cookie.substr(0, cookie.indexOf(\"=\")).trim();\n                    let value = cookie.substr(cookie.indexOf(\"=\") + 1);\n                    if (nameTest === cookieName) {\n                        output = decodeURI(value);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                })\n            ;\n            return output;\n        }\n    };\n\n})(window, document);","\"use strict\";\n\n//noinspection ThisExpressionReferencesGlobalObjectJS,JSUnusedLocalSymbols\n(function(window, document) {\n\n    const okanjo = window.okanjo;\n\n    /**\n     * Event tracking class\n     * @type {Metrics}\n     */\n    class Metrics {\n\n        //noinspection JSUnusedGlobalSymbols\n        constructor() {\n\n            /**\n             * Events queued here before submission\n             * @type {Array}\n             * @private\n             */\n            this._queue = this._getStoredQueue();\n            this._processTimeout = null; // queue event loop timeout pointer\n\n            /**\n             * Unique page grouping event identifier\n             */\n            this.pageId = okanjo.util.shortid();\n            this.defaultChannel = Metrics.Channel.external;\n\n            this.sid = null;\n            this.sourceCh = null;\n            this.sourceCx = null;\n\n            // Extract referral data, if set\n            this._checkUrlForReferral();\n\n            // TODO - look into iframe session correlation system\n        }\n\n        //noinspection JSMethodCanBeStatic\n        /**\n         * Gets the storage backed metric queue, in case we did not send everything last time\n         * @return {Array}\n         * @private\n         */\n        _getStoredQueue() {\n            if (window.localStorage[Metrics.Params.queue]) {\n                try {\n                    let queue = JSON.parse(window.localStorage[Metrics.Params.queue]);\n                    if (Array.isArray(queue)) {\n                        return queue;\n                    } else {\n                        okanjo.report('Stored queue is not a queue', {queue});\n                        return [];\n                    }\n                } catch (e) {\n                    okanjo.report('Failed to load metric queue from storage', {err: e});\n                    return [];\n                }\n            } else {\n                // not stored\n                return [];\n            }\n        }\n\n        /**\n         * Updates the queue stored in storage, in the event we can't complete our submissions\n         * @param delay - Whether to delay updating the queue for a bit, to let other metrics pile in\n         * @private\n         */\n        _saveQueue(delay) {\n            if (delay) {\n                if (this._saveQueueTimeout) clearTimeout(this._saveQueueTimeout);\n                this._saveQueueTimeout = setTimeout(() => {\n                    this._saveQueue(false);\n                    this._saveQueueTimeout = null;\n                }, 100);\n            } else {\n                window.localStorage[Metrics.Params.queue] = JSON.stringify(this._queue);\n            }\n        }\n\n        /**\n         * Extract contextual pass-through data from the URL, if present\n         * @private\n         */\n        _checkUrlForReferral() {\n            const pageArgs = okanjo.util.getPageArguments(true),\n                urlSid = pageArgs[Metrics.Params.name],\n                localSid = window.localStorage[Metrics.Params.name] || okanjo.util.cookie.get(Metrics.Params.name), // pull from storage or cookie\n                sourceContext = pageArgs[Metrics.Params.context],\n                sourceChannel = pageArgs[Metrics.Params.channel];\n\n            // If for some reason, both are set, record the incident as a possible correlation\n            if (urlSid && localSid && urlSid !== localSid) {\n                this.trackEvent({\n                    object_type: Metrics.Object.metric_session,\n                    event_type: Metrics.Event.correlation,\n                    id: urlSid+\"_\"+localSid,\n                    ch: this.defaultChannel,\n                    _noProcess: true\n                });\n            }\n\n            // Update local values\n            this.sid = localSid || urlSid || null; // prefer local over remote (changed in 1.0)\n            this.sourceCh = sourceChannel || null;\n            this.sourceCx = sourceContext || null;\n        }\n\n        /**\n         * Submits an individual event metric\n         * @param event\n         * @param callback\n         */\n        trackEvent(event, callback) {\n            // Ensure the event contains the required fields\n            if (!event.object_type || !event.event_type) {\n                okanjo.report('Invalid metric to track (missing object_type or event_type)', {event});\n                return;\n            }\n\n            // Queue the event for publishing\n            this._push(event, callback);\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Submits a page view metric\n         * @param event\n         * @param callback\n         */\n        trackPageView(event, callback) {\n            event = event || {};\n            event.object_type = Metrics.Object.page;\n            event.event_type = Metrics.Event.view;\n            event.id = event.id || window.location.href;\n            event.ch = event.ch || this.defaultChannel;\n\n            // Queue the event for publishing\n            this.trackEvent(event, callback);\n        }\n\n        /**\n         * Adds an event to the queue\n         * @param event\n         * @param callback\n         * @private\n         */\n        _push(event, callback) {\n            this._queue.push({ event, callback });\n\n            // Save the queue\n            this._saveQueue(true);\n\n            // Start burning down the queue, unless the event says not to\n            if (event._noProcess) {\n                delete event._noProcess;\n            } else {\n                this._processQueue();\n            }\n        }\n\n        /**\n         * Burn down the queue\n         * @private\n         */\n        _processQueue() {\n            // If the queue is not already being processed, and there's stuff to process, continue sending them\n            if (!this._processTimeout && this._queue.length > 0) {\n                this._processTimeout = setTimeout(() => {\n\n                    // Pull the items we're going to batch out of the queue\n                    const items = this._queue.splice(0, 255);\n                    this._saveQueue(false);\n\n                    // Track the item\n                    this._batchSend(items, (err, res) => {\n                        // TODO: If there was an error, consider splicing the batch back into the queue\n\n                        // Update / Set the metric sid on the publisher\n                        /* istanbul ignore else: server barks */\n                        if (res && res.data && res.data.sid) this._updateSid(res.data.sid);\n\n                        // When this batch is done being tracked, iterate to the next metric then fire it's callback if set\n                        this._processTimeout = null;\n                        this._processQueue();\n\n                        // Fire the event callbacks if there are any\n                        items.forEach((item) => {\n                            item.callback && item.callback(err, res);\n                        });\n                    });\n\n                }, 0); // break event loop, maybe\n            }\n        }\n\n        /**\n         * Sends a bunch of queued metric events\n         * @param items\n         * @param callback\n         * @private\n         */\n        _batchSend(items, callback) {\n\n            // Normalize event data\n            const events = items.map((item) => {\n                this._normalizeEvent(item.event);\n\n                // Strip duplicated data from event batch\n                delete item.event.sid;\n                delete item.event.win;\n\n                return item.event;\n            });\n\n            const payload = {\n                events,\n                win: window.location.href\n            };\n\n            const route = okanjo.net.getRoute(okanjo.net.routes.metrics_batch);\n\n            // Set sid if present\n            if (this.sid) {\n                payload.sid = this.sid;\n            }\n\n            // Send it\n            okanjo.net.request.post(\n                route,\n                payload,\n                (err, res) => {\n                    /* istanbul ignore if: out of scope */\n                    if (err) {\n                        okanjo.report('Failed to send metrics batch', { err, res, items, route });\n                    }\n                    callback && callback(err, res);\n                }\n            );\n        }\n\n        /**\n         * Normaizes events so that they contain consistent data values\n         * @param event\n         * @private\n         */\n        _normalizeEvent(event) {\n\n            // Ensure meta is ready to receive values\n            event.m = event.m || {};\n\n            // Set key\n            event.key = event.key || event.m.key || okanjo.key || undefined;\n\n            // Set session\n            if (this.sid) event.sid = this.sid;\n\n            // Clone the metadata, since it might be a direct reference to a widget property\n            // Deleting properties on the meta object could be very destructive\n            event.m = Object.assign({}, event.m); // event.m should be flat\n\n            // Strip meta keys that should be excluded\n            Object.keys(Metrics.Meta.exclude).forEach((key) => delete event.m[key]);\n\n            // Set referral channel / context\n            if (this.sourceCh) { event.m.ref_ch = this.sourceCh; }\n            if (this.sourceCx) { event.m.ref_cx = this.sourceCx; }\n\n            // Set page group id\n            event.m.pgid = this.pageId;\n\n            // Set okanjo version\n            event.m.ok_ver = okanjo.version;\n\n            // Finalize metadata\n            event.m = okanjo.util.flatten(event.m, { arrayToCsv: true });\n\n            // Ensure metadata strings won't exceed the imposed limit\n            Object.keys(event.m).forEach((key) => {\n                if (typeof event.m[key] === \"string\") {\n                    event.m[key] = event.m[key].substr(0, 255);\n                }\n            });\n\n            // Set page source reference\n            if (document.referrer) {\n                event.ref = document.referrer;\n            }\n\n             // Set the window location\n            event.win = window.location.href;\n        }\n\n        /**\n         * Updates the stored session identifier\n         * @param sid\n         * @private\n         */\n        _updateSid(sid) {\n            if (!this.sid && sid) {\n                this.sid = sid;\n                window.localStorage[Metrics.Params.name] = sid;\n                okanjo.util.cookie.set(Metrics.Params.name, sid, Metrics.Params.ttl);\n            }\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @param event\n         * @return {*|{}}\n         */\n        static addElementInfo(element, event) {\n            const page = okanjo.ui.getPageSize(),\n                size = okanjo.ui.getElementPosition(element);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.pw = page.w;\n            event.m.ph = page.h;\n            event.m.x1 = size.x1;\n            event.m.y1 = size.y1;\n            event.m.x2 = size.x2;\n            event.m.y2 = size.y2;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @param event\n         * @return {*|{}}\n         */\n        static addViewportInfo(event) {\n            const vp = okanjo.ui.getViewportSize(),\n                pos = okanjo.ui.getScrollPosition();\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.vx1 = pos.x;\n            event.m.vy1 = pos.y;\n            event.m.vx2 = pos.x+vp.vw;\n            event.m.vy2 = pos.y+vp.vh;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @param event\n         * @return {*|{}}\n         */\n        static addEventInfo(jsEvent, event) {\n            const pos = okanjo.ui.getEventPosition(jsEvent);\n\n            event = event || {};\n            event.m = event.m || {};\n            event.m.et = pos.et;\n            event.m.ex = pos.ex;\n            event.m.ey = pos.ey;\n\n            return event;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param event\n         * @param args\n         * @return {*|{}}\n         */\n        static addEventMeta(event, ...args) {\n            event = event || {};\n            event.m = event.m || {};\n            event.m = Object.assign.apply(Object, [event.m].concat(args));\n            \n            return event;\n        }\n\n        /**\n         * Helper to create a new fluent event structure\n         * @param data\n         * @param args\n         * @return {MetricEvent}\n         */\n        static create(data, ...args) {\n            // return okanjo.util.deepClone(Object.assign.apply(Object, [{}].concat(args)));\n            return new MetricEvent(data, args);\n        }\n\n        //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n        /**\n         * Helper to create a new fluent event structure\n         * @param args\n         * @return {*}\n         */\n        create(...args) {\n            return Metrics.create.apply(null, args);\n        }\n\n    }\n\n    /**\n     * The storage/cookie/url param names\n     * @type {{queue: string, name: string, channel: string, context: string, ttl: number}}\n     */\n    Metrics.Params = {\n        queue: '_ok_q',\n        name: 'ok_msid',\n        channel: 'ok_ch',\n        context: 'ok_cx',\n        ttl: 1460 // 4 years\n    };\n\n    /**\n     * Event Metadata configuration\n     * @type {{exclude: [*]}}\n     */\n    Metrics.Meta = {\n        exclude: ['key','callback','metrics_channel_context','metrics_context','mode']\n    };\n\n    /**\n     * Event Types\n     * @type {{view: string, impression: string, interaction: string, correlation: string}}\n     */\n    Metrics.Event = {\n        view: 'vw',\n        impression: 'imp',\n        interaction: 'int',\n        correlation: 'cor'\n    };\n\n    /**\n     * Event Action Types\n     * @type {{click: string, inline_click: string}}\n     */\n    Metrics.Action = {\n        click: \"click\",\n        inline_click: \"inline_click\"\n    };\n\n    /**\n     * Event Object Types\n     * @type {{article: string, thirdparty_ad: string, cart: string, page: string, widget: string, product: string, store: string, cause: string, marketplace: string, order: string, order_item: string, user: string, metric_session: string}}\n     */\n    Metrics.Object = {\n        article: 'am',\n        thirdparty_ad: 'ta',\n        cart: 'ct',\n        page: 'pg',\n        widget: 'wg',\n        product: 'pr',\n        store: 'st',\n        cause: 'ca',\n        marketplace: 'mp',\n        order: 'or',\n        order_item: 'oi',\n        user: 'ur',\n        metric_session: 'mt'\n    };\n\n    /**\n     * Event Channels\n     * @type {{product_widget: string, ad_widget: string, store_widget: string, marketplace: string, external: string}}\n     */\n    Metrics.Channel = {\n        placement: 'pw',\n        marketplace: 'mp',\n        external: 'ex',\n\n        // Deprecated:\n        product_widget: 'pw',\n        ad_widget: 'aw',\n        store_widget: 'sw'\n    };\n\n    /**\n     * Event Environments\n     * @type {{live: string, testing: string}}\n     */\n    Metrics.Environment = {\n        live: \"live\",\n        testing: \"testing\"\n    };\n\n    /**\n     * Fluent wrapper around making events simple\n     */\n    class MetricEvent {\n        constructor(data, others) {\n            // Merge the data and other data sets into this object\n            data = data || {};\n            this.data(data);\n            /* istanbul ignore else: metrics.create is the only way to create this right now */\n            if (Array.isArray(others)) {\n                others.forEach((data) => {\n                    this.data(data);\n                });\n            }\n        }\n\n        /**\n         * Sets event parameter key-values\n         * @param data\n         */\n        data(data) {\n            Object.assign(this, okanjo.util.deepClone(data));\n            return this;\n        }\n\n        /**\n         * Adds DOM event positional data to the event\n         * @param jsEvent\n         * @return {MetricEvent}\n         */\n        event(jsEvent) {\n            Metrics.addEventInfo(jsEvent, this);\n            return this;\n        }\n\n        /**\n         * Adds viewport dimensions / positional data to the event\n         * @return {MetricEvent}\n         */\n        viewport() {\n            Metrics.addViewportInfo(this);\n            return this;\n        }\n\n        /**\n         * Adds DOM element dimensions / positional data to the event\n         * @param element\n         * @return {MetricEvent}\n         */\n        element(element) {\n            Metrics.addElementInfo(element, this);\n            return this;\n        }\n\n        //noinspection JSUnusedGlobalSymbols\n        /**\n         * Adds meta data values to the event\n         * @param args\n         * @return {MetricEvent}\n         */\n        meta(...args) {\n            Metrics.addEventMeta.apply(null, [this].concat(args));\n            return this;\n        }\n\n        /**\n         * Sets the object and event type on the event w/o having to use .data\n         * @param object_type\n         * @param event_type\n         * @return {MetricEvent}\n         */\n        type(object_type, event_type) {\n            this.object_type = object_type;\n            this.event_type = event_type;\n            return this;\n        }\n\n        /**\n         * Finalizes and sends the event\n         * @param callback\n         */\n        send(callback) {\n            okanjo.metrics.trackEvent(this, callback);\n            // DONT RETURN - BREAK THE CHAIN HERE\n        }\n\n        /**\n         * Gets the single-metric tracking url for this event\n         * @return {string}\n         */\n        toUrl() {\n            // Copy data w/o modifying it\n            const event = Object.assign({}, this);\n\n            // Extract params\n            const {\n                object_type,\n                event_type\n            } = event;\n            delete event.object_type;\n            delete event.event_type;\n\n            // Normalize event data\n            okanjo.metrics._normalizeEvent(event);\n\n            // Get the URL\n            return okanjo.net.getRoute(okanjo.net.routes.metrics, { object_type, event_type }) + '?' +\n                okanjo.net.request.stringify(event);\n        }\n    }\n\n    // Export / initialize\n    okanjo.metrics = new Metrics();\n\n})(window, document);","/* jshint ignore:start */\n\n(function() {\n\n/*! onDomReady.js 1.4.0 (c) 2013 Tubal Martin - MIT license | Wrapped in UMD by Okanjo */\n(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.onDomReady = factory();\n    }\n}(this, function() {\n\n    'use strict';\n\n    var win = window,\n        doc = win.document,\n        docElem = doc.documentElement,\n\n        LOAD = \"load\",\n        FALSE = false,\n        ONLOAD = \"on\"+LOAD,\n        COMPLETE = \"complete\",\n        READYSTATE = \"readyState\",\n        ATTACHEVENT = \"attachEvent\",\n        DETACHEVENT = \"detachEvent\",\n        ADDEVENTLISTENER = \"addEventListener\",\n        DOMCONTENTLOADED = \"DOMContentLoaded\",\n        ONREADYSTATECHANGE = \"onreadystatechange\",\n        REMOVEEVENTLISTENER = \"removeEventListener\",\n\n    // W3C Event model\n        w3c = ADDEVENTLISTENER in doc,\n        top = FALSE,\n\n    // isReady: Is the DOM ready to be used? Set to true once it occurs.\n        isReady = FALSE,\n\n    // Callbacks pending execution until DOM is ready\n        callbacks = [];\n\n    // Handle when the DOM is ready\n    function ready( fn ) {\n        if ( !isReady ) {\n\n            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n            if ( !doc.body ) {\n                return defer( ready );\n            }\n\n            // Remember that the DOM is ready\n            isReady = true;\n\n            // Execute all callbacks\n            while ( fn = callbacks.shift() ) {\n                defer( fn );\n            }\n        }\n    }\n\n    // The ready event handler\n    function completed( event ) {\n        // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n        if ( w3c || event.type === LOAD || doc[READYSTATE] === COMPLETE ) {\n            detach();\n            ready();\n        }\n    }\n\n    // Clean-up method for dom ready events\n    function detach() {\n        if ( w3c ) {\n            doc[REMOVEEVENTLISTENER]( DOMCONTENTLOADED, completed, FALSE );\n            win[REMOVEEVENTLISTENER]( LOAD, completed, FALSE );\n        } else {\n            doc[DETACHEVENT]( ONREADYSTATECHANGE, completed );\n            win[DETACHEVENT]( ONLOAD, completed );\n        }\n    }\n\n    // Defers a function, scheduling it to run after the current call stack has cleared.\n    function defer( fn, wait ) {\n        // Allow 0 to be passed\n        setTimeout( fn, +wait >= 0 ? wait : 1 );\n    }\n\n    // Attach the listeners:\n\n    // Catch cases where onDomReady is called after the browser event has already occurred.\n    // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n    // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n    if ( doc[READYSTATE] === COMPLETE ) {\n        // Handle it asynchronously to allow scripts the opportunity to delay ready\n        defer( ready );\n\n        // Standards-based browsers support DOMContentLoaded\n    } else if ( w3c ) {\n        // Use the handy event callback\n        doc[ADDEVENTLISTENER]( DOMCONTENTLOADED, completed, FALSE );\n\n        // A fallback to window.onload, that will always work\n        win[ADDEVENTLISTENER]( LOAD, completed, FALSE );\n\n        // If IE event model is used\n    } else {\n        // Ensure firing before onload, maybe late but safe also for iframes\n        doc[ATTACHEVENT]( ONREADYSTATECHANGE, completed );\n\n        // A fallback to window.onload, that will always work\n        win[ATTACHEVENT]( ONLOAD, completed );\n\n        // If IE and not a frame\n        // continually check to see if the document is ready\n        try {\n            top = win.frameElement == null && docElem;\n        } catch(e) {}\n\n        if ( top && top.doScroll ) {\n            (function doScrollCheck() {\n                if ( !isReady ) {\n                    try {\n                        // Use the trick by Diego Perini\n                        // http://javascript.nwbox.com/IEContentLoaded/\n                        top.doScroll(\"left\");\n                    } catch(e) {\n                        return defer( doScrollCheck, 50 );\n                    }\n\n                    // detach all dom ready events\n                    detach();\n\n                    // and execute any waiting functions\n                    ready();\n                }\n            })();\n        }\n    }\n\n    function onDomReady( fn ) {\n        // If DOM is ready, execute the function (async), otherwise wait\n        isReady ? defer( fn ) : callbacks.push( fn );\n    }\n\n    // Add version\n    onDomReady.version = \"1.4.0\";\n    // Add method to check if DOM is ready\n    onDomReady.isReady = function(){\n        return isReady;\n    };\n\n    return onDomReady;\n}));\n\n\n\n}).apply(okanjo.lib);\n\n/* jshint ignore:end */"],"sourceRoot":"./"}